[{"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/index.js":"1","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/App.js":"2","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/data/repository.js":"3","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/apolloClient.js":"4","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/ReviewsManage.js":"5","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/fragments/Footer.js":"6","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Reviews.js":"7","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/UserList.js":"8","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Home.js":"9","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Reservations.js":"10","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/MyProfile.js":"11","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/fragments/Navbar.js":"12","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Login.js":"13","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/MovieGraph.js":"14","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/components/EditUpdateMovies.js":"15"},{"size":367,"mtime":1697690843298,"results":"16","hashOfConfig":"17"},{"size":2088,"mtime":1697693065904,"results":"18","hashOfConfig":"17"},{"size":5935,"mtime":1697690909719,"results":"19","hashOfConfig":"17"},{"size":263,"mtime":1697678245338,"results":"20","hashOfConfig":"17"},{"size":6209,"mtime":1698151431976,"results":"21","hashOfConfig":"17"},{"size":242,"mtime":1697423251506,"results":"22","hashOfConfig":"17"},{"size":0,"mtime":1697678245339,"results":"23","hashOfConfig":"17"},{"size":2526,"mtime":1697692920814,"results":"24","hashOfConfig":"17"},{"size":377,"mtime":1697690922732,"results":"25","hashOfConfig":"17"},{"size":4013,"mtime":1698151431976,"results":"26","hashOfConfig":"17"},{"size":5250,"mtime":1697690924329,"results":"27","hashOfConfig":"17"},{"size":2049,"mtime":1697691771851,"results":"28","hashOfConfig":"17"},{"size":2206,"mtime":1697693025691,"results":"29","hashOfConfig":"17"},{"size":1829,"mtime":1697693440143,"results":"30","hashOfConfig":"17"},{"size":5824,"mtime":1697678245338,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xrtmoi",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/index.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/App.js",["82","83"],[],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Navbar from \"./fragments/Navbar\";\nimport Footer from \"./fragments/Footer\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport MyProfile from \"./pages/MyProfile\";\nimport Reviews from \"./pages/Reviews\";\nimport { getUser, removeUser } from \"./data/repository\";\nimport './style.css';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './apolloClient';\nimport UserList from \"./pages/UserList\";\nimport ReviewsManage from \"./pages/ReviewsManage\";\nimport Reservations from \"./pages/Reservations\";\n\n\n// Main App Component\nfunction App() {\n  // State to track the currently logged-in username\n  const [username, setUsername] = useState(getUser());\n\n  // Function to log in a user\n  const loginUser = (username) => {\n    setUsername(username);\n  }\n\n  // Function to log out a user\n  const logoutUser = () => {\n    removeUser();\n    setUsername(null);\n  }\n\n  return (\n    <ApolloProvider client={client}>\n    <div className=\"d-flex flex-column min-vh-100\">\n      <Router>\n        {/* Navbar component with username and logout function */}\n        <Navbar username={username} logoutUser={logoutUser} />\n\n        <main role=\"main\">\n          <div className=\"container my-3\">\n            {/* Define routes for different pages */}\n            <Routes>\n              <Route path=\"/\" element={<Login loginUser={loginUser} />} />\n              <Route path=\"/home\" element={<Home username={username} />} />\n              {/* <Route path=\"/login\" element={<Login loginUser={loginUser} />} /> */}\n              <Route path=\"/profile\" element={<UserList username={username} />} />\n              <Route path=\"/reviews\" element={<ReviewsManage username={username} />} />\n              <Route path=\"/reservations\" element={<Reservations username={username} />} />\n            </Routes>\n          </div>\n        </main>\n\n        {/* Footer component */}\n        <Footer />\n      </Router>\n    </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/data/repository.js",["84","85"],[],"import axios from \"axios\";\nconst API_HOST = \"http://localhost:4000/api\";\n\n\nconst USERS_KEY = \"users\";\nconst USER_KEY = \"user\";\nconst MOVIE_REVIEWS = \"movieReviews\";\n\nconst movies = [\n  { title: \"Gran Turismo\", sessionTime: \"10:00 AM, 2:00 PM\" , image:\"./gran_card.png\", corouselImage:\"./gran.png\"},\n  { title: \"Blue Beetle\", sessionTime: \"11:00 AM, 3:00 PM\" ,image:\"./blue_card.png\", corouselImage:\"./blue.png\" },\n  { title: \"Oppenheimer\", sessionTime: \"12:00 PM, 4:00 PM\" ,image:\"./oppenheimer_card.png\", corouselImage:\"./oppenheimer.png\" },\n]\nconst movieRatings = [\n  {\n    movieReviewId: 1,\n    movieTitle: \"Gran Turismo\",\n    rating: 4,\n    comments: \"Great movie, loved it!\",\n    userId: 1,\n  },\n  {\n    movieReviewId: 2,\n    movieTitle: \"Blue Beetle\",\n    rating: 1,\n    comments: \"One of the best movies I've seen!\",\n    userId: 1,\n  },\n  {\n    movieReviewId: 3,\n    movieTitle: \"Oppenheimer\",\n    rating: 5,\n    comments: \"One of the best movies I've seen!\",\n    userId: 1,\n  },\n]\n// Check if data is already initialized before proceeding with initialization\nfunction initializeLocalStorage() {\n  if (!localStorage.getItem(USERS_KEY)) {\n    const users = [\n      {\n        username: \"admin\",\n        password: \"admin\"\n      }\n    ];\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  }\n\n  if (!localStorage.getItem(MOVIE_REVIEWS)) {\n    // Assume movieRatings is already defined\n    localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(movieRatings));\n  }\n  if (!localStorage.getItem('userReviewCount')) {\n    // Assume movieRatings is already defined\n  }\n  \n}\n\n\nasync function getUsers() {\n  try {\n    const response = await axios.get(`${API_HOST}/users`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }\n}\n\nasync function verifyUser(username, password) {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/users/login?username=${username}&password=${password}`;\n  \n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl);\n    \n    console.log(apiUrl);\n    // If the request is successful, set the user and return true\n    if (response.data && response.data.role === 'admin' ) {\n      setUser(response.data.username); // Assuming response.data contains the user data\n      console.log(response.data)\n      return true;\n    }else {\n      console.error('Admin only!');\n    }\n    \n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during authentication:', error);\n  }\n  // Return false if the authentication failed\n  return false;\n}\n\n\nasync function setUser(username) {\n  try {\n    localStorage.setItem(USER_KEY, username);\n  } catch (error) {\n    // Log any error that occurs during the API call\n    console.error('Error setting user:', error);\n  }\n}\n\nfunction getUser() {\n  return localStorage.getItem(USER_KEY);\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nasync function saveUser(user) {\n  try {\n    const response = await axios.post(`${API_HOST}/users`, user);\n    setUser(user.username);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function updateUser(currentUsername, fields) {\n  try {\n    const response = await axios.put(`http://localhost:4000/api/users/${currentUsername}`, fields);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating user:', error);\n    throw error;\n  }\n}\n\nasync function deleteUser(username) {\n  try {\n    await axios.delete(`${API_HOST}/users/${username}`);\n    removeUser();\n    window.location.href = \"http://localhost:3003/login\";\n  } catch (error) {\n    console.error(\"Error deleting user\", error);\n  }\n}\n\n\nfunction getMovieReviews(){\n  const data = localStorage.getItem(MOVIE_REVIEWS);\n  // Convert data to objects.\n  return JSON.parse(data);\n}\n\n\nfunction deleteMovieReviews(selectedReview){\n  \n\n  const reviews = getMovieReviews();\n  for(const r of reviews) {\n    if(r.userId === selectedReview.userId && r.movieTitle === selectedReview.movieTitle)\n    {\n      var index = reviews.indexOf(r);\n      if (index !== -1) {\n        reviews.splice(index, 1);\n}\n    }\n  }\n\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n  \n}\nfunction editMovieRatings(selectedMoviewReview) {\n  //deleteMovieReviewbyId(selectedMoviewReview);\n  console.log(\"Before\",getMovieReviews())\n  const reviews = getMovieReviews().map((r) =>\n    r.movieReviewId === selectedMoviewReview.movieReviewId\n      ? selectedMoviewReview\n      : r\n  );\n\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n  console.log(\"After\",getMovieReviews())\n\n}\n\nfunction deleteMovieReviewbyId(selectedReview){\n  \n  const reviews = getMovieReviews();\n  for(const r of reviews) {\n      if(r.movieReviewId === selectedReview.movieReviewId)\n      {\n        var index = reviews.indexOf(r);\n        if (index !== -1) {\n          reviews.splice(index, 1);\n      }\n    }\n  }\n\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n  \n}\nfunction updateMovieRatings(rating){\n  const movieReviews = getMovieReviews();\n  movieReviews.push(rating);\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(movieReviews));\n \n}\n\n\nasync function getLoggedInUserDetails(){\n  let tempUser = getUser();\n  const apiUrl = \"http://localhost:4000/api/users/\"+getUser();\n  const response = await axios.get(apiUrl);\n  return response.data;\n}\n\n\n\nfunction deleteUserMovieReviews(username){\n  let reviews = getMovieReviews();\n  reviews = reviews.filter(review=> review.userId !== username);\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n\n}\n\nexport {\n  initializeLocalStorage,\n  verifyUser,\n  getUser,\n  removeUser,\n  saveUser,\n  updateUser,\n  deleteUser,\n  getLoggedInUserDetails,\n  movies,\n  movieRatings,\n  updateMovieRatings,\n  getMovieReviews,\n  deleteMovieReviews,\n  deleteUserMovieReviews,\n  deleteMovieReviewbyId,\n  editMovieRatings\n}\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/apolloClient.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/ReviewsManage.js",["86","87","88"],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/fragments/Footer.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Reviews.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/UserList.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Home.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Reservations.js",["89"],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/MyProfile.js",["90","91"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { updateUser, deleteUser, getLoggedInUserDetails,deleteUserMovieReviews } from \"../data/repository\";\nimport '../Style/profile.css'; \n\n\n\nfunction MyProfile(props) {\n\n  const [user, setUser] = useState({});\n  const getUserDetails = async () => {\n    const user = await getLoggedInUserDetails(); \n    console.log(user);\n    setUser(user);\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchedUser = await getLoggedInUserDetails(); \n      setUser(fetchedUser);\n      setFields({\n        username: fetchedUser.username,\n        email: fetchedUser.email,\n        password: \"\", \n        confirmPassword: \"\", \n        createdAt: fetchedUser.createdAt,\n      });\n    }\n  \n    fetchData();\n  }, []);\n\n  const [editMode, setEditMode] = useState(false);\n  const [fields, setFields] = useState({\n    username: \"\",\n    email:\"\",\n    password: \"\", \n    confirmPassword: \"\", \n    createdAt: \"\",\n  });\n\n\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchUserDetails = async () => {\n      const user = await getLoggedInUserDetails();\n      setUser(user);\n      setFields({ username: user.username, email: user.email });\n    };\n    \n    fetchUserDetails();\n  }, []);\n\n\n\n  const handleEdit = () => {\n    setEditMode(true);\n  };\n\n  const handleDelete = () => {\n    console.log(user.username);\n    if (user.username) {\n  \n      deleteUser(user.username);\n      setSuccessMessage(\"Profile deleted successfully.\");\n      // Redirect to the home page after successful delete\n      setTimeout(() => {\n        navigate(\"/home\");\n      }, 3000);\n    } else {\n      console.error(\"Username is undefined\");\n    }\n};\n\n\n\n  const handleCancel = (event) =>{\n    event.preventDefault();\n    setEditMode(false);\n    navigate(\"/profile\")\n  }\n\n  const handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    // Copy fields.\n    const temp = { ...fields };\n\n    // Update field and state.\n    temp[name] = value;\n    setFields(temp);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Perform form validation\n    const validationErrors = {};\n    if (!fields.username.trim()) {\n      validationErrors.username = \"Username is required\";\n    }\n    if (!fields.email.trim()) {\n      validationErrors.email = \"Email is required\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(fields.email)) {\n      validationErrors.email = \"Invalid email format\";\n    }\n\n    if (Object.keys(validationErrors).length > 0) {\n      setErrorMessage(validationErrors);\n      setSuccessMessage(null);\n    } else \n    // {\n    //   updateUser(user.username, fields);\n    //   // setSuccessMessage(\"Profile updated successfully.\");\n    //   setErrorMessage(null);\n    //   setEditMode(false);\n    // }\n    {\n      try {\n        const updatedUser = await updateUser(user.username, fields);\n        setUser(updatedUser);\n        window.location.reload();\n        setSuccessMessage(\"Profile updated successfully.\");\n        setErrorMessage(null);\n        setEditMode(false);\n      } catch (error) {\n        setErrorMessage({ apiError: 'Error updating profile' });\n      }\n    }\n   \n  };\n\n  const renderViewMode = () => (\n    <div className=\"profile-edit-container \">\n      <h1>My Profile</h1>\n      <hr/>\n      <div>\n        <p><strong>Username:</strong> {user.username}</p>\n        <p><strong>Email:</strong> {user.email}</p>\n        <p><strong>Joined:</strong> {user.createdAt}</p>\n        <button className=\"mx-3\" onClick={handleEdit}>Edit</button>\n        <button onClick={handleDelete}>Delete</button>\n      </div>\n    </div>\n  );\n\n  const renderEditMode = () => (\n    <div className=\"profile-edit-container \">\n      <h1>Edit Profile</h1>\n      <hr />\n      <form onSubmit={handleSubmit}>\n        {/* Form fields and validation messages */}\n        <div>\n          <label htmlFor=\"username\">Username: {fields.username}</label>\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            name=\"password\"\n            id=\"password\"\n            type=\"password\"\n            value={fields.password}\n            onChange={handleInputChange}\n          />\n          {errorMessage && <p className=\"text-danger\">{errorMessage.password}</p>}\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            value={fields.email}\n            onChange={handleInputChange}\n          />\n          {errorMessage && <p className=\"text-danger\">{errorMessage.email}</p>}\n        </div>\n        <div>\n          <button className=\"mx-3\" type=\"submit\">Save</button>\n          <button onClick={(event) => handleCancel(event)}>Cancel</button>\n        </div>\n      </form>\n    </div>\n  );\n\n  return (\n    <div className=\"profile-edit-container\">\n      {editMode ? renderEditMode() : renderViewMode()}\n      {successMessage && <p className=\"success-message\">{successMessage}</p>}\n    </div>\n  );\n}\n\nexport default MyProfile;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/fragments/Navbar.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/Login.js",["92"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { verifyUser } from \"../data/repository\";\nimport axios from \"axios\";\n\nfunction Login(props) {\n  const [fields, setFields] = useState({ username: \"\", password: \"\" });\n  const [errorMessage, setErrorMessage] = useState(null);\n  const navigate = useNavigate();\n  const handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const temp = { username: fields.username, password: fields.password };\n    temp[name] = value;\n    setFields(temp);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const verified = await verifyUser(fields.username, fields.password);\n    console.log(verified)\n    if(verified === true) {\n      props.loginUser(fields.username);\n      navigate(\"/home\");\n      return;\n    }\n\n    const temp = { ...fields };\n    temp.password = \"\";\n    setFields(temp);\n    setErrorMessage(\"Username and / or password invalid, please try again.\");\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"username\" className=\"control-label\">Username</label>\n              <input name=\"username\" id=\"username\" className=\"form-control\"\n                value={fields.username} onChange={handleInputChange} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\" className=\"control-label\">Password</label>\n              <input type=\"password\" name=\"password\" id=\"password\" className=\"form-control\"\n                value={fields.password} onChange={handleInputChange} />\n            </div>\n            <div className=\"form-group\">\n              <input type=\"submit\" className=\"btn btn-primary\" value=\"Login\" />\n            </div>\n            {errorMessage !== null &&\n              <div className=\"form-group\">\n                <span className=\"text-danger\">{errorMessage}</span>\n              </div>\n            }\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/pages/MovieGraph.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/src/components/EditUpdateMovies.js",["93","94"],[],"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport '../Style/EditMovies.css'; \n\n\n\n// Define the GraphQL query to fetch movies\nconst GET_MOVIES_QUERY = gql`\n  query GetMovies {\n    getMovies {\n      movie_id\n      movie_name\n      image\n      corouselImage\n    }\n  }\n`;\n\nconst UPDATE_MOVIE_MUTATION = gql`\n  mutation UpdateMovie($movie_id: Int!, $movie_name: String!, $image: String!, $corouselImage: String!) {\n    updateMovie(movie_id: $movie_id, movie_name: $movie_name, image: $image, corouselImage: $corouselImage) {\n      movie_id\n      movie_name\n      image\n      corouselImage\n      \n    }\n  }\n`;\n\nconst ADD_MOVIE_MUTATION = gql`\n  mutation AddMovie($movie_name: String!, $image: String!, $corouselImage: String!) {\n    addMovie(movie_name: $movie_name, image: $image, corouselImage: $corouselImage) {\n      movie_id\n      movie_name\n      image\n      corouselImage\n    }\n  }\n`;\n\nconst DELETE_MOVIE_MUTATION = gql`\n  mutation DeleteMovie($movie_id: Int!) {\n    deleteMovie(movie_id: $movie_id) {\n      movie_name\n    }\n  }\n`;\n\n\n\nfunction EditUpdateMovies() {\n  const { data, loading, error } = useQuery(GET_MOVIES_QUERY);\n  const [updateMovie] = useMutation(UPDATE_MOVIE_MUTATION);\n  const [isUpdated, setIsUpdated] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [deleteMovie] = useMutation(DELETE_MOVIE_MUTATION);\n  const [newMovieForm, setNewMovieForm] = useState({\n    movie_name: \"\",\n    image: \"\",\n    corouselImage: \"\"\n    });\n\n  const [addMovie] = useMutation(ADD_MOVIE_MUTATION);\n  \n\n  useEffect(() => {\n    if (isUpdated) {\n      window.location.reload();\n    }\n  }, [isUpdated]);\n\n  const [editingMovieId, setEditingMovieId] = useState(null);\n  const [editForm, setEditForm] = useState({});\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  const handleEditClick = (movie) => {\n    setEditingMovieId(movie.movie_id);\n    setEditForm(movie);\n  };\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setEditForm(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n        await updateMovie({ variables: editForm });\n        setEditingMovieId(null);\n        setIsUpdated(true);\n    } catch (error) {\n        console.error(\"Error updating movie:\", error);\n    }\n};\n\nconst handleAddFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      await addMovie({ variables: newMovieForm });\n      setShowAddForm(false);\n    } catch (error) {\n      console.error(\"Error adding movie:\", error);\n    }\n  };\n  \n  const handleNewMovieInputChange = (event) => {\n    const { name, value } = event.target;\n    setNewMovieForm(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleDeleteClick = async (movieId) => {\n    try {\n      await deleteMovie({ variables: { movie_id: movieId } });\n    } catch (error) {\n      console.error(\"Error deleting movie:\", error);\n    }finally{\n        window.location.reload(); \n    }\n  };\n  \n\n\n\n  return (\n    <div className='edit-movies'>\n    <h2>Manage Movies</h2>\n    <div className=\"movie-cards-container\">\n        {data.getMovies.map(movie => (\n            <div className=\"movie-card\" key={movie.movie_id}>\n                <div className=\"movie-details\">\n                    <p><strong>ID:</strong> {movie.movie_id}</p>\n                    <p><strong>Name:</strong> {movie.movie_name}</p>\n                    <img src={movie.image} alt={movie.movie_name} className=\"movie-image\" />\n                    <img src={movie.corouselImage} alt={movie.movie_name} className=\"corousel-image\" />\n                </div>\n                <div className=\"movie-actions\">\n                    <button onClick={() => handleEditClick(movie)}>Edit</button>\n                    <button onClick={() => handleDeleteClick(movie.movie_id)}>Delete</button>\n                </div>\n                {editingMovieId === movie.movie_id && (\n                    <form className=\"edit-form\" onSubmit={handleFormSubmit}>\n                        <input name=\"movie_name\" value={editForm.movie_name} onChange={handleInputChange} placeholder=\"Movie Name\" />\n                        <input name=\"image\" value={editForm.image} onChange={handleInputChange} placeholder=\"Image URL\" />\n                        <input name=\"corouselImage\" value={editForm.corouselImage} onChange={handleInputChange} placeholder=\"Corousel Image URL\" />\n                        <button type=\"submit\" onClick={() => window.location.href = window.location.href}>Save</button>\n                        <button type=\"button\" onClick={() => setEditingMovieId(null)}>Cancel</button>\n                    </form>\n                )}\n            </div>\n        ))}\n    </div>\n\n    <div className='add-new-movie my-5'>\n        <button onClick={() => setShowAddForm(true)}>Add New Movie</button>\n        {showAddForm && (\n            <form onSubmit={handleAddFormSubmit}>\n                <input className='mx-2' name=\"movie_name\" value={newMovieForm.movie_name} onChange={handleNewMovieInputChange} placeholder=\"Movie Name\" />\n                <input className='mx-2' name=\"image\" value={newMovieForm.image} onChange={handleNewMovieInputChange} placeholder=\"Image URL\" />\n                <input  className='mx-2' name=\"corouselImage\" value={newMovieForm.corouselImage} onChange={handleNewMovieInputChange} placeholder=\"Corousel Image URL\" />\n                <button className='mx-2' type=\"submit\" onClick={() => window.location.href = window.location.href}>Add</button>\n                <button className='mx-2' type=\"button\" onClick={() => setShowAddForm(false)}>Cancel</button>\n            </form>\n        )}\n    </div>\n</div>\n\n      );\n}\n\nexport default EditUpdateMovies;\n",{"ruleId":"95","severity":1,"message":"96","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":17},{"ruleId":"95","severity":1,"message":"99","line":8,"column":8,"nodeType":"97","messageId":"98","endLine":8,"endColumn":15},{"ruleId":"95","severity":1,"message":"100","line":60,"column":16,"nodeType":"97","messageId":"98","endLine":60,"endColumn":24},{"ruleId":"95","severity":1,"message":"101","line":208,"column":7,"nodeType":"97","messageId":"98","endLine":208,"endColumn":15},{"ruleId":"95","severity":1,"message":"102","line":56,"column":14,"nodeType":"97","messageId":"98","endLine":56,"endColumn":27},{"ruleId":"95","severity":1,"message":"103","line":57,"column":12,"nodeType":"97","messageId":"98","endLine":57,"endColumn":23},{"ruleId":"95","severity":1,"message":"104","line":83,"column":9,"nodeType":"97","messageId":"98","endLine":83,"endColumn":31},{"ruleId":"95","severity":1,"message":"105","line":2,"column":20,"nodeType":"97","messageId":"98","endLine":2,"endColumn":31},{"ruleId":"95","severity":1,"message":"106","line":3,"column":57,"nodeType":"97","messageId":"98","endLine":3,"endColumn":79},{"ruleId":"95","severity":1,"message":"107","line":11,"column":9,"nodeType":"97","messageId":"98","endLine":11,"endColumn":23},{"ruleId":"95","severity":1,"message":"108","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":13},{"ruleId":"109","severity":1,"message":"110","line":148,"column":85,"nodeType":"111","messageId":"112","endLine":148,"endColumn":105},{"ruleId":"109","severity":1,"message":"110","line":163,"column":94,"nodeType":"111","messageId":"112","endLine":163,"endColumn":114},"no-unused-vars","'MyProfile' is defined but never used.","Identifier","unusedVar","'Reviews' is defined but never used.","'getUsers' is defined but never used.","'tempUser' is assigned a value but never used.","'moviesLoading' is assigned a value but never used.","'moviesError' is assigned a value but never used.","'averageReviewsPerMovie' is assigned a value but never used.","'useMutation' is defined but never used.","'deleteUserMovieReviews' is defined but never used.","'getUserDetails' is assigned a value but never used.","'axios' is defined but never used.","no-self-assign","'window.location.href' is assigned to itself.","MemberExpression","selfAssignment"]