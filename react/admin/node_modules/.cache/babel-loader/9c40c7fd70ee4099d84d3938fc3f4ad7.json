{"ast":null,"code":"import { dep } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nexport var cacheSlot = new Slot();\nvar cacheInfoMap = new WeakMap();\n\nfunction getCacheInfo(cache) {\n  var info = cacheInfoMap.get(cache);\n\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set(),\n      dep: dep()\n    });\n  }\n\n  return info;\n}\n\nexport function forgetCache(cache) {\n  getCacheInfo(cache).vars.forEach(function (rv) {\n    return rv.forgetCache(cache);\n  });\n}\nexport function recallCache(cache) {\n  getCacheInfo(cache).vars.forEach(function (rv) {\n    return rv.attachCache(cache);\n  });\n}\nexport function makeVar(value) {\n  var caches = new Set();\n  var listeners = new Set();\n\n  var rv = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue;\n        caches.forEach(function (cache) {\n          getCacheInfo(cache).dep.dirty(rv);\n          broadcast(cache);\n        });\n        var oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach(function (listener) {\n          return listener(value);\n        });\n      }\n    } else {\n      var cache = cacheSlot.getValue();\n\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = function (listener) {\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  var attach = rv.attachCache = function (cache) {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = function (cache) {\n    return caches.delete(cache);\n  };\n\n  return rv;\n}\n\nfunction broadcast(cache) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,GAAT,QAAoB,UAApB;AACA,SAASC,IAAT,QAAqB,cAArB;AAeA,OAAO,IAAMC,SAAS,GAAG,IAAID,IAAJ,EAAlB;AAEP,IAAME,YAAY,GAAG,IAAIC,OAAJ,EAArB;;AAQA,SAASC,YAAT,CAAsBC,KAAtB,EAA6C;EAC3C,IAAIC,IAAI,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,KAAjB,CAAX;;EACA,IAAI,CAACC,IAAL,EAAW;IACTJ,YAAY,CAACM,GAAb,CACEH,KADF,EAEGC,IAAI,GAAG;MACNG,IAAI,EAAE,IAAIC,GAAJ,EADA;MAENX,GAAG,EAAEA,GAAG;IAFF,CAFV;EAOD;;EACD,OAAOO,IAAP;AACD;;AAED,OAAM,SAAUK,WAAV,CAAsBN,KAAtB,EAA6C;EACjDD,YAAY,CAACC,KAAD,CAAZ,CAAoBI,IAApB,CAAyBG,OAAzB,CAAiC,UAACC,EAAD,EAAG;IAAK,SAAE,CAACF,WAAH,CAAeN,KAAf;EAAqB,CAA9D;AACD;AAUD,OAAM,SAAUS,WAAV,CAAsBT,KAAtB,EAA6C;EACjDD,YAAY,CAACC,KAAD,CAAZ,CAAoBI,IAApB,CAAyBG,OAAzB,CAAiC,UAACC,EAAD,EAAG;IAAK,SAAE,CAACE,WAAH,CAAeV,KAAf;EAAqB,CAA9D;AACD;AAED,OAAM,SAAUW,OAAV,CAAqBC,KAArB,EAA6B;EACjC,IAAMC,MAAM,GAAG,IAAIR,GAAJ,EAAf;EACA,IAAMS,SAAS,GAAG,IAAIT,GAAJ,EAAlB;;EAEA,IAAMG,EAAE,GAAmB,UAAUO,QAAV,EAAkB;IAC3C,IAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;MACxB,IAAIL,KAAK,KAAKG,QAAd,EAAwB;QACtBH,KAAK,GAAGG,QAAR;QACAF,MAAM,CAACN,OAAP,CAAe,UAACP,KAAD,EAAM;UAInBD,YAAY,CAACC,KAAD,CAAZ,CAAoBN,GAApB,CAAwBwB,KAAxB,CAA8BV,EAA9B;UAGAW,SAAS,CAACnB,KAAD,CAAT;QACD,CARD;QAUA,IAAMoB,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWR,SAAX,CAArB;QACAA,SAAS,CAACS,KAAV;QACAH,YAAY,CAACb,OAAb,CAAqB,UAACiB,QAAD,EAAS;UAAK,eAAQ,CAACZ,KAAD,CAAR;QAAe,CAAlD;MACD;IACF,CAjBD,MAiBO;MAIL,IAAMZ,KAAK,GAAGJ,SAAS,CAAC6B,QAAV,EAAd;;MACA,IAAIzB,KAAJ,EAAW;QACT0B,MAAM,CAAC1B,KAAD,CAAN;QACAD,YAAY,CAACC,KAAD,CAAZ,CAAoBN,GAApB,CAAwBc,EAAxB;MACD;IACF;;IAED,OAAOI,KAAP;EACD,CA9BD;;EAgCAJ,EAAE,CAACmB,YAAH,GAAkB,UAACH,QAAD,EAAS;IACzBV,SAAS,CAACc,GAAV,CAAcJ,QAAd;IACA,OAAO;MACLV,SAAS,CAACe,MAAV,CAAiBL,QAAjB;IACD,CAFD;EAGD,CALD;;EAOA,IAAME,MAAM,GAAIlB,EAAE,CAACE,WAAH,GAAiB,UAACV,KAAD,EAAM;IACrCa,MAAM,CAACe,GAAP,CAAW5B,KAAX;IACAD,YAAY,CAACC,KAAD,CAAZ,CAAoBI,IAApB,CAAyBwB,GAAzB,CAA6BpB,EAA7B;IACA,OAAOA,EAAP;EACD,CAJD;;EAMAA,EAAE,CAACF,WAAH,GAAiB,UAACN,KAAD,EAAM;IAAK,aAAM,CAAC6B,MAAP,CAAc7B,KAAd;EAAoB,CAAhD;;EAEA,OAAOQ,EAAP;AACD;;AAQD,SAASW,SAAT,CAAmBnB,KAAnB,EAAuC;EACrC,IAAIA,KAAK,CAAC8B,gBAAV,EAA4B;IAC1B9B,KAAK,CAAC8B,gBAAN;EACD;AACF","names":["dep","Slot","cacheSlot","cacheInfoMap","WeakMap","getCacheInfo","cache","info","get","set","vars","Set","forgetCache","forEach","rv","recallCache","attachCache","makeVar","value","caches","listeners","newValue","arguments","length","dirty","broadcast","oldListeners","Array","from","clear","listener","getValue","attach","onNextChange","add","delete","broadcastWatches"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/cache/inmemory/reactiveVars.ts"],"sourcesContent":["import type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { ApolloCache } from \"../../core/index.js\";\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\nconst cacheInfoMap = new WeakMap<\n  ApolloCache<any>,\n  {\n    vars: Set<ReactiveVar<any>>;\n    dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n  }\n>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(\n      cache,\n      (info = {\n        vars: new Set(),\n        dep: dep(),\n      })\n    );\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach((cache) => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach((listener) => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = (listener) => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = (rv.attachCache = (cache) => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  });\n\n  rv.forgetCache = (cache) => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}