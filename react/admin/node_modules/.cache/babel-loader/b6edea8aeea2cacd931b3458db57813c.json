{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment(options) {\n  var cache = useApolloClient().cache;\n\n  var fragment = options.fragment,\n      fragmentName = options.fragmentName,\n      from = options.from,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n\n  var diffOptions = __assign(__assign({}, rest), {\n    returnPartialData: true,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n\n  var resultRef = React.useRef();\n  var latestDiff = cache.diff(diffOptions);\n\n  var getSnapshot = function () {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  };\n\n  return useSyncExternalStore(function (forceUpdate) {\n    var lastTimeout = 0;\n    var unsubcribe = cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      }\n    }));\n    return function () {\n      unsubcribe();\n      clearTimeout(lastTimeout);\n    };\n  }, getSnapshot, getSnapshot);\n}\n\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n\n  return result;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,eAAtB;AAGA,SAASC,cAAT,QAA+B,0BAA/B;AAQA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,oBAAT,QAAqC,2BAArC;AA8BA,OAAM,SAAUC,WAAV,CACJC,OADI,EACqC;EAEjC,SAAK,GAAKH,eAAe,GAAEI,KAA3B;;EAEA,YAAQ,GAAqDD,OAAO,SAApE;EAAA,IAAUE,YAAY,GAAuCF,OAAO,aAApE;EAAA,IAAwBG,IAAI,GAAiCH,OAAO,KAApE;EAAA,IAA8BI,KAA+BJ,OAAO,WAApE;EAAA,IAA8BK,UAAU,mBAAG,IAAH,GAAOD,EAA/C;EAAA,IAAoDE,IAAI,UAAKN,OAAL,EAA1D,kDAA0D,CAAxD;;EAER,IAAMO,WAAW,yBACZD,IADY,GACR;IACPE,iBAAiB,EAAE,IADZ;IAEPC,EAAE,EAAE,OAAON,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCF,KAAK,CAACS,QAAN,CAAeP,IAAf,CAF/B;IAGPQ,KAAK,EAAEV,KAAK,CAAC,gBAAD,CAAL,CAAwBW,QAAxB,EAAkCV,YAAlC,CAHA;IAIPG,UAAU;EAJH,CADQ,CAAjB;;EAQA,IAAMQ,SAAS,GAAGnB,KAAK,CAACoB,MAAN,EAAlB;EACA,IAAIC,UAAU,GAAGd,KAAK,CAACe,IAAN,CAAkBT,WAAlB,CAAjB;;EAGA,IAAMU,WAAW,GAAG;IAClB,IAAMC,kBAAkB,GAAGC,YAAY,CAACJ,UAAD,CAAvC;IACA,OAAOF,SAAS,CAACO,OAAV,IACLzB,KAAK,CAACkB,SAAS,CAACO,OAAV,CAAkBC,IAAnB,EAAyBH,kBAAkB,CAACG,IAA5C,CADA,GAEHR,SAAS,CAACO,OAFP,GAGFP,SAAS,CAACO,OAAV,GAAoBF,kBAHzB;EAID,CAND;;EAQA,OAAOpB,oBAAoB,CACzB,UAACwB,WAAD,EAAY;IACV,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAMC,UAAU,GAAGvB,KAAK,CAACwB,KAAN,CAAWC,sBACzBnB,WADyB,GACd;MACdoB,SAAS,EAAE,IADG;MAEdC,QAAQ,YAACZ,IAAD,EAAK;QACX,IAAI,CAACrB,KAAK,CAACqB,IAAD,EAAOD,UAAP,CAAV,EAA8B;UAC5BF,SAAS,CAACO,OAAV,GAAoBD,YAAY,CAAEJ,UAAU,GAAGC,IAAf,CAAhC;UACAO,WAAW,GAAGM,UAAU,CAACP,WAAD,CAAxB;QACD;MACF;IAPa,CADc,CAAX,CAAnB;IAUA,OAAO;MACLE,UAAU;MACVM,YAAY,CAACP,WAAD,CAAZ;IACD,CAHD;EAID,CAjBwB,EAkBzBN,WAlByB,EAmBzBA,WAnByB,CAA3B;AAqBD;;AAED,SAASE,YAAT,CACEH,IADF,EAC+B;EAE7B,IAAMe,MAAM,GAAG;IACbV,IAAI,EAAEL,IAAI,CAACe,MADE;IAEbC,QAAQ,EAAE,CAAC,CAAChB,IAAI,CAACgB;EAFJ,CAAf;;EAKA,IAAIhB,IAAI,CAACiB,OAAT,EAAkB;IAChBF,MAAM,CAACE,OAAP,GAAiBrC,cAAc,CAACoB,IAAI,CAACiB,OAAL,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAM;MAAK,YAAK,CAACF,OAAN;IAAa,CAAzC,CAAD,CAA/B;EACD;;EAED,OAAOF,MAAP;AACD","names":["React","equal","mergeDeepArray","useApolloClient","useSyncExternalStore","useFragment","options","cache","fragmentName","from","_a","optimistic","rest","diffOptions","returnPartialData","id","identify","query","fragment","resultRef","useRef","latestDiff","diff","getSnapshot","latestDiffToResult","diffToResult","current","data","forceUpdate","lastTimeout","unsubcribe","watch","__assign","immediate","callback","setTimeout","clearTimeout","result","complete","missing","map","error"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/hooks/useFragment.ts"],"sourcesContent":["import * as React from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const { fragment, fragmentName, from, optimistic = true, ...rest } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    returnPartialData: true,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = React.useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = () => {\n    const latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current &&\n      equal(resultRef.current.data, latestDiffToResult.data)\n      ? resultRef.current\n      : (resultRef.current = latestDiffToResult);\n  };\n\n  return useSyncExternalStore(\n    (forceUpdate) => {\n      let lastTimeout = 0;\n      const unsubcribe = cache.watch({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (!equal(diff, latestDiff)) {\n            resultRef.current = diffToResult((latestDiff = diff));\n            lastTimeout = setTimeout(forceUpdate) as any;\n          }\n        },\n      });\n      return () => {\n        unsubcribe();\n        clearTimeout(lastTimeout);\n      };\n    },\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}