{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.selectionsToResolveCache = new WeakMap();\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2, remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n\n    return null;\n  };\n\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          selectionsToResolve: selectionsToResolve,\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        isClientFieldDescendant = false;\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                return [2];\n              }\n\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== \"undefined\") {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                invariant(fragment, 16, selection.name.value);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2];\n            });\n          });\n        };\n\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (!rootValue) {\n          return [2, null];\n        }\n\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n\n        return [2, resultPromise.then(function (result) {\n          var _a, _b;\n\n          if (result === void 0) {\n            result = defaultResult;\n          }\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === \"export\" && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n\n          if (!field.selectionSet) {\n            return result;\n          }\n\n          if (result == null) {\n            return result;\n          }\n\n          var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) {\n            return d.name.value === \"client\";\n          })) !== null && _b !== void 0 ? _b : false;\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n          }\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n      }\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n      }\n    }));\n  };\n\n  LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n    var isSingleASTNode = function (node) {\n      return !Array.isArray(node);\n    };\n\n    var selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(definitionNode) {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        var matches_1 = new Set();\n        selectionsToResolveCache.set(definitionNode, matches_1);\n        visit(definitionNode, {\n          Directive: function (node, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread: function (spread, _, __, ___, ancestors) {\n            var fragment = fragmentMap[spread.name.value];\n            invariant(fragment, 17, spread.name.value);\n            var fragmentSelections = collectByDefinition(fragment);\n\n            if (fragmentSelections.size > 0) {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n              matches_1.add(spread);\n              fragmentSelections.forEach(function (selection) {\n                matches_1.add(selection);\n              });\n            }\n          }\n        });\n      }\n\n      return selectionsToResolveCache.get(definitionNode);\n    }\n\n    return collectByDefinition(mainDefinition);\n  };\n\n  return LocalState;\n}();\n\nexport { LocalState };","map":{"version":3,"mappings":"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","names":["invariant","visit","BREAK","isSelectionNode","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","_a","cache","client","resolvers","fragmentMatcher","WeakMap","addResolvers","setFragmentMatcher","LocalState","Array","isArray","forEach","resolverGroup","_this","document","remoteResult","context","variables","_b","onlyRunForcedResolvers","resolveDocument","data","then","localResult","result","getCacheKey","obj","identify","buildRootValueFromCache","prepareContext","exportedVariables","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","selectionsToResolve","collectSelectionsToResolve","definitionOperation","operation","defaultOperationType","charAt","toUpperCase","slice","execContext","isClientFieldDescendant","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","has","resolveField","fieldResult","push","fragment","typeCondition","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolve","shouldForceResolvers","resolverType","__typename","resolverMap","withValue","directives","directive","isClientField","d","resolveSubSelectedArray","item","isSingleASTNode","selectionsToResolveCache","collectByDefinition","definitionNode","matches_1","Set","set","_","__","___","ancestors","add","FragmentSpread","spread","fragmentSelections","size","get"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/core/LocalState.ts"],"sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  DirectiveNode,\n  FragmentSpreadNode,\n  ExecutableDefinitionNode,\n} from \"graphql\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\n\nimport type { ApolloCache } from \"../cache/index.js\";\nimport type { FragmentMap, StoreObject } from \"../utilities/index.js\";\nimport {\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"../utilities/index.js\";\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport type { Resolvers, OperationVariables } from \"./types.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  }\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n  selectionsToResolve: Set<SelectionNode>;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n  private selectionsToResolveCache = new WeakMap<\n    ExecutableDefinitionNode,\n    Set<SelectionNode>\n  >();\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach((resolverGroup) => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers\n      ).then((localResult) => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {}\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables\n      ).then((data) => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(\n              (arg) =>\n                arg.name.value === \"always\" &&\n                arg.value.kind === \"BooleanValue\" &&\n                arg.value.value === true\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false\n  ) {\n    const mainDefinition = getMainDefinition(\n      document\n    ) as OperationDefinitionNode;\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n    const selectionsToResolve = this.collectSelectionsToResolve(\n      mainDefinition,\n      fragmentMap\n    );\n\n    const definitionOperation = mainDefinition.operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : \"Query\";\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      selectionsToResolve,\n      onlyRunForcedResolvers,\n    };\n    const isClientFieldDescendant = false;\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      isClientFieldDescendant,\n      rootValue,\n      execContext\n    ).then((result) => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    isClientFieldDescendant: boolean,\n    rootValue: TData,\n    execContext: ExecContext\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (\n        !isClientFieldDescendant &&\n        !execContext.selectionsToResolve.has(selection)\n      ) {\n        // Skip selections without @client directives\n        // (still processing if one of the ancestors or one of the child fields has @client directive)\n        return;\n      }\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(\n          selection,\n          isClientFieldDescendant,\n          rootValue,\n          execContext\n        ).then((fieldResult) => {\n          if (typeof fieldResult !== \"undefined\") {\n            resultsToMerge.push({\n              [resultKeyNameFromField(selection)]: fieldResult,\n            } as TData);\n          }\n        });\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named %s`, selection.name.value);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            isClientFieldDescendant,\n            rootValue,\n            execContext\n          ).then((fragmentResult) => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function () {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    rootValue: any,\n    execContext: ExecContext\n  ): Promise<any> {\n    if (!rootValue) {\n      return null;\n    }\n\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach((directive) => {\n          if (directive.name.value === \"export\" && directive.arguments) {\n            directive.arguments.forEach((arg) => {\n              if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      const isClientField =\n        field.directives?.some((d) => d.name.value === \"client\") ?? false;\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(\n          field,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    result: any[],\n    execContext: ExecContext\n  ): any {\n    return Promise.all(\n      result.map((item) => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(\n            field,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(\n            field.selectionSet,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n      })\n    );\n  }\n\n  // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n  private collectSelectionsToResolve(\n    mainDefinition: OperationDefinitionNode,\n    fragmentMap: FragmentMap\n  ): Set<SelectionNode> {\n    const isSingleASTNode = (\n      node: ASTNode | readonly ASTNode[]\n    ): node is ASTNode => !Array.isArray(node);\n    const selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(\n      definitionNode: ExecutableDefinitionNode\n    ): Set<SelectionNode> {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        const matches = new Set<SelectionNode>();\n        selectionsToResolveCache.set(definitionNode, matches);\n\n        visit(definitionNode, {\n          Directive(node: DirectiveNode, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread(spread: FragmentSpreadNode, _, __, ___, ancestors) {\n            const fragment = fragmentMap[spread.name.value];\n            invariant(fragment, `No fragment named %s`, spread.name.value);\n\n            const fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n              matches.add(spread);\n              fragmentSelections.forEach((selection) => {\n                matches.add(selection);\n              });\n            }\n          },\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode)!;\n    }\n    return collectByDefinition(mainDefinition);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}