{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\n\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.getDiff = function () {\n    var options = this.getDiffOptions();\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables);\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        var diff = _this.getDiff();\n\n        if (diff.fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n\n  QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n    var _this = this;\n\n    var merger = new DeepMerger();\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    this.reset();\n\n    if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n      var mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n    } else if (\"hasNext\" in result && result.hasNext) {\n      var diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n\n    this.graphQLErrors = graphQLErrors;\n\n    if (options.fetchPolicy === \"no-cache\") {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n\n          var diffOptions = _this.getDiffOptions(options.variables);\n\n          var diff = cache.diff(diffOptions);\n\n          if (!_this.stopped && equal(_this.variables, options.variables)) {\n            _this.updateWatch(options.variables);\n          }\n\n          _this.updateLastDiff(diff, diffOptions);\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n\n  return writeWithErrors;\n}","map":{"version":3,"mappings":"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","names":["equal","DeepMerger","mergeIncrementalData","reobserveCacheFirst","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","isNetworkRequestInFlight","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","cancelNotifyTimeout","info","clearTimeout","queryManager","queryId","generateQueryId","Set","has","QueryInfo","query","networkStatus","loading","variables","setVariables","lastDiff","Object","assign","document","networkError","graphQLErrors","observableQuery","setObservableQuery","lastRequestId","dirty","options","getDiffOptions","diff","updateWatch","oq","fetchPolicy","complete","updateLastDiff","returnPartialData","optimistic","canonizeResults","_a","oldDiff","result","notifyTimeout","setTimeout","notify","oqListener","listeners","delete","add","_this","getDiff","fromOptimisticTransaction","shouldNotify","forEach","listener","size","stopped","reset","cancel","prototype","stopPolling","watchOptions","watcher","callback","setDiff","lastWatch","watch","lastWrite","dmCount","data","cacheWriteBehavior","merger","errors","slice","incremental","mergedData","hasNext","merge","shouldWriteResult","errorPolicy","performTransaction","shouldWrite","writeQuery","overwrite","diffOptions","ready","error","ignoreErrors","writeWithErrors"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/core/QueryInfo.ts"],"sourcesContent":["import type { DocumentNode, GraphQLError } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport type { WatchQueryOptions, ErrorPolicy } from \"./watchQueryOptions.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport type { QueryListener, MethodKeys } from \"./types.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport {\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type { ApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\n\nexport type QueryStoreValue = Pick<\n  QueryInfo,\n  \"variables\" | \"networkStatus\" | \"networkError\" | \"graphQLErrors\"\n>;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n}\n\nconst destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)<\n  ApolloCache<any>,\n  number\n>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: MethodKeys<ApolloCache<any>>\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId()\n  ) {\n    const cache = (this.cache = queryManager.cache);\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined;\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus;\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (\n      this.variables &&\n      this.networkStatus !== NetworkStatus.loading &&\n      !equal(this.variables, query.variables)\n    ) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  }\n\n  getDiff(): Cache.DiffResult<any> {\n    const options = this.getDiffOptions();\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>;\n    options: Cache.DiffOptions;\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions\n  ) {\n    this.lastDiff = diff\n      ? {\n          diff,\n          options: options || this.getDiffOptions(),\n        }\n      : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(\n        (this.oqListener = () => {\n          const diff = this.getDiff();\n          if (diff.fromOptimisticTransaction) {\n            // If this diff came from an optimistic transaction, deliver the\n            // current cache data to the ObservableQuery, but don't perform a\n            // reobservation, since oq.reobserveCacheFirst might make a network\n            // request, and we never want to trigger network requests in the\n            // middle of optimistic updates.\n            oq[\"observe\"]();\n          } else {\n            // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n            // using a temporary fetch policy of \"cache-first\", so complete cache\n            // results have a chance to be delivered without triggering additional\n            // network requests, even when options.fetchPolicy is \"network-only\"\n            // or \"cache-and-network\". All other fetch policies are preserved by\n            // this method, and are handled by calling oq.reobserve(). If this\n            // reobservation is spurious, isDifferentFromLastResult still has a\n            // chance to catch it before delivery to ObservableQuery subscribers.\n            reobserveCacheFirst(oq);\n          }\n        })\n      );\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach((listener) => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: (diff) => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch((this.lastWatch = watchOptions));\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"]\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    document: DocumentNode,\n    options: Pick<\n      WatchQueryOptions,\n      \"variables\" | \"fetchPolicy\" | \"errorPolicy\"\n    >,\n    cacheWriteBehavior: CacheWriteBehavior\n  ) {\n    const merger = new DeepMerger();\n    const graphQLErrors = isNonEmptyArray(result.errors)\n      ? result.errors.slice(0)\n      : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n      const mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n\n      // Detect the first chunk of a deferred query and merge it with existing\n      // cache data. This ensures a `cache-first` fetch policy that returns\n      // partial cache data or a `cache-and-network` fetch policy that already\n      // has full data in the cache does not complain when trying to merge the\n      // initial deferred server data with existing cache data.\n    } else if (\"hasNext\" in result && result.hasNext) {\n      const diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n\n    this.graphQLErrors = graphQLErrors;\n\n    if (options.fetchPolicy === \"no-cache\") {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables)\n      );\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction((cache) => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff && this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called. We also avoid updating\n          // the watch if we are writing a result that doesn't match the current\n          // variables to avoid race conditions from broadcasting the wrong\n          // result.\n          if (!this.stopped && equal(this.variables, options.variables)) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return (this.networkStatus = NetworkStatus.ready);\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\"\n) {\n  const ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n"]},"metadata":{},"sourceType":"module"}