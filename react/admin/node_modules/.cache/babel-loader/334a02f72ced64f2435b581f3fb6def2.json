{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  invariant(!!document && !!document.kind, 57, document);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n\n        case \"mutation\":\n          mutations.push(x);\n          break;\n\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 58);\n  invariant(queries.length + mutations.length + subscriptions.length <= 1, 59, document, queries.length, subscriptions.length, mutations.length);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  invariant(definitions.length === 1, 60, document, definitions.length);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\";\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  invariant(operation.type === type, 61, requiredOperationName, requiredOperationName, usedOperationName);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,kCAA1B;AASA,WAAYC,YAAZ;;AAAA,WAAYA,YAAZ,EAAwB;EACtBA;EACAA;EACAA;AACD,CAJD,EAAYA,YAAY,KAAZA,YAAY,MAAxB;;AAYA,IAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AAEA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAA0C;EAC9C,IAAIC,IAAJ;;EACA,QAAQD,IAAR;IACE,KAAKJ,YAAY,CAACM,KAAlB;MACED,IAAI,GAAG,OAAP;MACA;;IACF,KAAKL,YAAY,CAACO,QAAlB;MACEF,IAAI,GAAG,UAAP;MACA;;IACF,KAAKL,YAAY,CAACQ,YAAlB;MACEH,IAAI,GAAG,cAAP;MACA;EATJ;;EAWA,OAAOA,IAAP;AACD;AAGD,OAAM,SAAUI,MAAV,CAAiBC,QAAjB,EAAuC;EAC3C,IAAMC,MAAM,GAAGV,KAAK,CAACW,GAAN,CAAUF,QAAV,CAAf;EACA,IAAIC,MAAJ,EAAY,OAAOA,MAAP;EAEZ,IAAIE,SAAJ,EAAeT,IAAf,EAAqBC,IAArB;EAEAN,SAAS,CACP,CAAC,CAACW,QAAF,IAAc,CAAC,CAACA,QAAQ,CAACI,IADlB,EAEP,EAFO,EAEPJ,QAFO,CAAT;MAGIK;MACAC;EAIJ,IAAMC,SAAS,GAAqB,EAApC;EACA,IAAMC,aAA+B,KAArC;;EACA,KAAM,SAAS,CAAT,EAA8BC,EAAG,uBAAvC,EAAuCC,cAAvC,EAAuCA,IAAvC,EAAuC;IACjC;;IAEN,IAAgBC,+BAAhB,EAAyB;MAAdN,SAAC,KAAD,CAACM,CAAD;MACL;;;QAEFA,WAAS;MACV;QAEK,KAAI,OAAJ;UACIL,OAAE,KAAF,CAAaK,CAAb;UACN;;aACE;UACAJ,SAAM,KAAN,CAAMI,CAAN;UACF;;aACE;UACAH,aAAM,KAAN,CAAMG,CAAN;UACF;MAVH;;;;WAcA,sBACFL,cADE,IAGHC,SACG,OAJA,IAKCC,aAAQ,CAAMI,MALf,EAKe,EALf;WAMC,CACAN,iBAAcC,SAChB,OADE,GACFC,oBADE,IACF,CAFE,EAGA,EAHA,EAMJR,QANI,EASAM,cATA,EAUAE,oBAVA,EAWAD,gBAXA;EAmBJb,IAAI,GAACY,OAAQ,OAAR,GAAmBhB,YAAU,MAA7B,GAAmCA,qBAAxC;MAA0C,QAAO,OAAP,IAAmB,CAACiB,kBAExDb,mBAAc,aAAd;MACJmB,WAAS,oBACPP,OADO,YAEP,UACAC,YAGFC;WAEE,aAAkBI,MAAlB,KAAkB,CAAlB,EAAkB,EAAlB,EAAkBZ,QAAlB,EAAkBa,kBAAlB;MACAC;EAKJX,SAAM,aAAa,oBAAb,IAAuD,EAA7D;;EACA,cAAY,KAAZ,IAAuBW,yBAAyB,MAAhD,EAAiD;IAE7CnB,iBAAe,KAAf,CAAmBoB,KAAnB;GAFJ,MAIC;QAAM;;;MAENC;IAAArB;IAAAD;IAAAS;EAAA;EAEDZ,KAAM,IAAN,CAAMS,QAAN,EAAsBgB,OAAtB;EACA,OAAMA,OAAN;;AAEF,OAAC;EAED,IAAMC,SAAU,mBAAhB;EACE,IAAMC,qBAAmB,gBAAU,MAAnC;EACA,IAAMC,iCAAwB,UAAmB,CAACzB,IAApB,CAA9B;EACAL,SAAM,CACN4B,SACE,KADF,KACYvB,IAFN,EAQP,EARO,kEAAN","names":["invariant","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","kind","fragments","queries","mutations","subscriptions","_a","_i","x","length","definitions","definition","value","payload","operation","requiredOperationName","usedOperationName"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"]},"metadata":{},"sourceType":"module"}