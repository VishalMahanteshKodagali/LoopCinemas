{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = [\"refetch\", \"reobserve\", \"fetchMore\", \"updateQuery\", \"startPolling\", \"subscribeToMore\"];\nexport function useLazyQuery(query, options) {\n  var _a;\n\n  var execOptionsRef = React.useRef();\n  var optionsRef = React.useRef();\n  var queryRef = React.useRef();\n  var merged = mergeOptions(options, execOptionsRef.current || {});\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  optionsRef.current = merged;\n  queryRef.current = document;\n  var internalState = useInternalState(useApolloClient(options && options.client), document);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = React.useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdateState();\n        }\n\n        return method.apply(this, arguments);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = React.useCallback(function (executeOptions) {\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options = mergeOptions(optionsRef.current, __assign({\n      query: queryRef.current\n    }, execOptionsRef.current));\n    var promise = internalState.executeQuery(__assign(__assign({}, options), {\n      skip: false\n    })).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"mappings":"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","names":["React","mergeOptions","useInternalState","useApolloClient","EAGER_METHODS","useLazyQuery","query","options","execOptionsRef","useRef","optionsRef","queryRef","merged","current","document","_a","internalState","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","useMemo","key","method","create","forceUpdateState","apply","arguments","_i","execute","useCallback","executeOptions","fetchPolicy","promise","executeQuery","then","queryResult","catch"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"react\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = merged;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current = executeOptions\n        ? {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"]},"metadata":{},"sourceType":"module"}