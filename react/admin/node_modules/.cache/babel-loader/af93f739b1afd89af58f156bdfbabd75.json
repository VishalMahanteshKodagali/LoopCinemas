{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var promiseQueue = {\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n\n    function makeCallback(examiner, key) {\n      return function (arg) {\n        if (examiner) {\n          var both = function () {\n            return observer.closed ? 0 : examiner(arg);\n          };\n\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            return observer.next(result);\n          }, function (error) {\n            return observer.error(error);\n          });\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete: function () {\n        promiseQueue.then(function () {\n          return observer.complete();\n        });\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,iBAA3B;AAIA,OAAM,SAAUC,QAAV,CACJC,UADI,EAEJC,KAFI,EAGJC,OAHI,EAGwC;EAE5C,OAAO,IAAIJ,UAAJ,CAAkB,UAACK,QAAD,EAAS;IAChC,IAAIC,YAAY,GAAG;MAIjBC,IAAI,YAACC,QAAD,EAAoB;QACtB,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAQ;UAAK,cAAO,CAACF,QAAQ,EAAT,CAAP;QAAmB,CAA5C,CAAP;MACD;IANgB,CAAnB;;IASA,SAASG,YAAT,CACEC,QADF,EAEEC,GAFF,EAEuB;MAErB,OAAO,UAACC,GAAD,EAAI;QACT,IAAIF,QAAJ,EAAc;UACZ,IAAMG,IAAI,GAAG;YAGX,eAAQ,CAACC,MAAT,GAC6B,CAD7B,GAEIJ,QAAQ,CAACE,GAAD,CAFZ;UAEiB,CALnB;;UAOAR,YAAY,GAAGA,YAAY,CAACC,IAAb,CAAkBQ,IAAlB,EAAwBA,IAAxB,EAA8BR,IAA9B,CACb,UAACU,MAAD,EAAO;YAAK,eAAQ,CAACC,IAAT,CAAcD,MAAd;UAAqB,CADpB,EAEb,UAACE,KAAD,EAAM;YAAK,eAAQ,CAACA,KAAT,CAAeA,KAAf;UAAqB,CAFnB,CAAf;QAID,CAZD,MAYO;UACLd,QAAQ,CAACQ,GAAD,CAAR,CAAcC,GAAd;QACD;MACF,CAhBD;IAiBD;;IAED,IAAMM,OAAO,GAAgB;MAC3BF,IAAI,EAAEP,YAAY,CAACR,KAAD,EAAQ,MAAR,CADS;MAE3BgB,KAAK,EAAER,YAAY,CAACP,OAAD,EAAU,OAAV,CAFQ;MAG3BiB,QAAQ;QAGcf,YAAY,CAACC,IAAb,CAAkB;UAAM,eAAQ,CAACc,QAAT;QAAmB,CAA3C;MACrB;IAP0B,CAA7B;IAUA,IAAMC,GAAG,GAAGpB,UAAU,CAACqB,SAAX,CAAqBH,OAArB,CAAZ;IACA,OAAO;MAAM,UAAG,CAACI,WAAJ;IAAiB,CAA9B;EACD,CA7CM,CAAP;AA8CD","names":["Observable","asyncMap","observable","mapFn","catchFn","observer","promiseQueue","then","callback","Promise","resolve","makeCallback","examiner","key","arg","both","closed","result","next","error","handler","complete","sub","subscribe","unsubscribe"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/utilities/observables/asyncMap.ts"],"sourcesContent":["import type { Observer } from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>\n): Observable<R> {\n  return new Observable<R>((observer) => {\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise((resolve) => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      key: \"next\" | \"error\"\n    ): (arg: any) => void {\n      return (arg) => {\n        if (examiner) {\n          const both = () =>\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            observer.closed\n              ? /* will be swallowed */ (0 as any)\n              : examiner(arg);\n\n          promiseQueue = promiseQueue.then(both, both).then(\n            (result) => observer.next(result),\n            (error) => observer.error(error)\n          );\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete() {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */ promiseQueue.then(() => observer.complete());\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}