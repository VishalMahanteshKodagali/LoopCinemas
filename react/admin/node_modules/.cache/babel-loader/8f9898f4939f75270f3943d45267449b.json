{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = React.useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = React.useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = React.useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    var client = executeOptions.client || ref.current.client;\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (error && onError) {\n        onError(error, clientOptions);\n      }\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n\n      if (!error) {\n        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n      }\n\n      return response;\n    }).catch(function (error) {\n      var _a;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (onError) {\n        onError(error, clientOptions);\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = React.useCallback(function () {\n    if (ref.current.isMounted) {\n      setResult({\n        called: false,\n        loading: false,\n        client: client\n      });\n    }\n  }, []);\n  React.useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"mappings":"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","names":["React","mergeOptions","equal","DocumentType","verifyDocumentType","ApolloError","useApolloClient","useMutation","mutation","options","client","Mutation","useState","called","loading","result","setResult","ref","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","onError","_a","result_1","onCompleted","_b","catch","result_2","reset","useEffect","__assign"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import * as React from \"react\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions as any);\n\n      return client\n        .mutate(clientOptions)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0\n              ? new ApolloError({ graphQLErrors: errors })\n              : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(error, clientOptions);\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(response.data!, clientOptions);\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(error, clientOptions);\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      setResult({ called: false, loading: false, client });\n    }\n  }, []);\n\n  React.useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"]},"metadata":{},"sourceType":"module"}