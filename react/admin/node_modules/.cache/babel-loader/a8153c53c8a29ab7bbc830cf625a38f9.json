{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var _this = this;\n\n    var cache = _a.cache,\n        link = _a.link,\n        defaultOptions = _a.defaultOptions,\n        documentTransform = _a.documentTransform,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        _e = _a.assumeImmutableResults,\n        assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    var defaultDocumentTransform = new DocumentTransform(function (document) {\n      return _this.cache.transformDocument(document);\n    }, {\n      cache: false\n    });\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform).concat(defaultDocumentTransform) : defaultDocumentTransform;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(newInvariantError(23));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _d = _a.refetchQueries,\n        refetchQueries = _d === void 0 ? [] : _d,\n        _e = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _e === void 0 ? false : _e,\n        updateWithProxyFn = _a.update,\n        onQueryUpdated = _a.onQueryUpdated,\n        _f = _a.fetchPolicy,\n        fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n        _g = _a.errorPolicy,\n        errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n        keepRootFields = _a.keepRootFields,\n        context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, hasClientExports, mutationStoreValue, self;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            invariant(mutation, 24);\n            invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 25);\n            mutationId = this.generateMutationId();\n            mutation = this.cache.transformForLink(this.transform(mutation));\n            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _h.sent();\n            _h.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n\n                var storeResult = __assign({}, result);\n\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n\n                  if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n\n        if (typeof mergedData !== \"undefined\") {\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n\n          var update = mutation.update;\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                    DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n\n    return Promise.resolve(result);\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        globalThis.__DEV__ !== false && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    return this.documentTransform.transformDocument(document);\n  };\n\n  QueryManager.prototype.getDocumentInfo = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var cacheEntry = {\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument([{\n          name: \"client\",\n          remove: true\n        }, {\n          name: \"connection\"\n        }, {\n          name: \"nonreactive\"\n        }], document),\n        defaultVars: getDefaultValues(getOperationDefinition(document)),\n        asQuery: __assign(__assign({}, document), {\n          definitions: document.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n\n            return def;\n          })\n        })\n      };\n      transformCache.set(document, cacheEntry);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    var query = this.transform(options.query);\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    observable[\"lastQuery\"] = query;\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n\n    invariant(options.query, 26);\n    invariant(options.query.kind === \"Document\", 27);\n    invariant(!options.returnPartialData, 28);\n    invariant(!options.pollInterval, 29);\n    return this.fetchQuery(queryId, __assign(__assign({}, options), {\n      query: this.transform(options.query)\n    })).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n\n    this.cancelPendingFetches(newInvariantError(30));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset(options);\n  };\n\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n          document = _a.document;\n\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        var queryName = oq.queryName,\n            fetchPolicy = oq.options.fetchPolicy;\n\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 31 : 32, nameOrDoc);\n        }\n      });\n    }\n\n    return queries;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        _b = _a.errorPolicy,\n        errorPolicy = _b === void 0 ? \"none\" : _b,\n        variables = _a.variables,\n        _c = _a.context,\n        context = _c === void 0 ? {} : _c;\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== \"no-cache\") {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        var hasErrors = graphQLResultHasError(result);\n        var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n\n        if (hasErrors || hasProtocolErrors) {\n          var errors = {};\n\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n\n        return result;\n      });\n    };\n\n    if (this.getDocumentInfo(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n\n    var _b = this.getDocumentInfo(query),\n        serverQuery = _b.serverQuery,\n        clientQuery = _b.clientQuery;\n\n    if (serverQuery) {\n      var _c = this,\n          inFlightLinkObservables_1 = _c.inFlightLinkObservables,\n          link = _c.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var printedServerQuery_1 = print(serverQuery);\n        var byVariables_1 = inFlightLinkObservables_1.get(printedServerQuery_1) || new Map();\n        inFlightLinkObservables_1.set(printedServerQuery_1, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(printedServerQuery_1);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    var linkDocument = this.cache.transformForLink(options.query);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, networkStatus, query) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    if (query === void 0) {\n      query = options.query;\n    }\n\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n\n      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n\n      if (normalized.fetchPolicy !== \"standby\" && sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return sourcesWithInfo;\n    };\n\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast, containsDataFromLink;\n\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {\n        return sourcesWithInfo.sources;\n      }));\n      containsDataFromLink = true;\n    } else {\n      var sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return {\n      concast: concast,\n      fromLink: containsDataFromLink\n    };\n  };\n\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n\n    var updateCache = _a.updateCache,\n        include = _a.include,\n        _b = _a.optimistic,\n        optimistic = _b === void 0 ? false : _b,\n        _c = _a.removeOptimistic,\n        removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n        onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n\n    var results = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                result = oq.refetch();\n              }\n\n              if (result !== false) {\n                results.set(oq, result);\n              }\n\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n            lastDiff = _a.lastDiff,\n            diff = _a.diff;\n        var result;\n\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n\n    var query = _a.query,\n        variables = _a.variables,\n        fetchPolicy = _a.fetchPolicy,\n        refetchWritePolicy = _a.refetchWritePolicy,\n        errorPolicy = _a.errorPolicy,\n        returnPartialData = _a.returnPartialData,\n        context = _a.context,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff();\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n\n      if (errorPolicy === \"none\" && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        query: query,\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return {\n              fromLink: false,\n              sources: [resultsFromCache(diff, queryInfo.markReady())]\n            };\n          }\n\n          if (returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())]\n        };\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()]\n          };\n        }\n\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]\n          };\n        }\n\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n\n      case \"standby\":\n        return {\n          fromLink: false,\n          sources: []\n        };\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"mappings":"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","names":["invariant","newInvariantError","equal","execute","hasDirectives","isExecutionPatchIncrementalResult","isExecutionPatchResult","removeDirectivesFromDocument","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","getGraphQLErrorsFromResult","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","DocumentTransform","mergeIncrementalData","ApolloError","isApolloError","graphQLResultHasProtocolErrors","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","PROTOCOL_ERRORS_SYMBOL","print","Object","prototype","hasOwnProperty","_a","cache","link","defaultOptions","documentTransform","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","_e","assumeImmutableResults","Map","WeakMap","defaultDocumentTransform","document","transformDocument","create","concat","mutationStore","QueryManager","queries","forEach","_info","queryId","_this","stopQueryNoBroadcast","cancelPendingFetches","error","fetchCancelFns","cancel","clear","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","onQueryUpdated","_f","fetchPolicy","mutate","_g","errorPolicy","keepRootFields","context","mutationId","generateMutationId","transformForLink","transform","getDocumentInfo","getVariables","addExportedVariables","_h","mutationStoreValue","loading","markMutationOptimistic","update","broadcastQueries","self","Promise","resolve","reject","getObservableFromLink","__assign","result","graphQLErrors","storeResult","errors","markMutationResult","removeOptimistic","subscribe","next","hasNext","err","networkError","cacheWrites","skipCache","push","data","dataId","query","incremental","diff","id","asQuery","optimistic","returnPartialData","mergedData","updateQueries_1","observableQuery","queryName","call","updater","get","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","isFinalResult","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","globalThis","options","networkStatus","fetchConcastWithInfo","concast","promise","store","info","queryInfo","undefined","transformCache","has","cacheEntry","hasForcedResolvers","shouldForceResolvers","hasNonreactiveDirective","clientQuery","serverQuery","name","remove","defaultVars","definitions","map","def","kind","operation","set","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","fetchQuery","finally","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","desc","oq","setObservableQuery","included","nameOrDoc","__DEV__","includeStandby","observableQueryPromises","setDiff","makeObservable","hasProtocolErrors","hasErrors","protocolErrors","observablePromise_1","observer","sub","delete","deduplication","inFlightLinkObservables_1","operationName","forceFetch","byVariables_1","printedServerQuery_1","varJson_1","remoteResult","linkDocument","requestId","aqr","watchQuery","defaults","normalized","fromVariables","sourcesWithInfo","sources","cleanupCancelFn","setTimeout","reason","containsDataFromLink","fromLink","includedQueriesById","lastDiff","getDiff","onWatchUpdated","watch","results","readCache","resultsFromCache","fromData","partial","runResolvers","onlyRunForcedResolvers","resolved","refetch","refetchWritePolicy","oldNetworkStatus","resultsFromLink","shouldNotify","getQuery"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/core/QueryManager.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { DocumentNode } from \"graphql\";\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from \"@wry/equality\";\n\nimport type { ApolloLink, FetchResult } from \"../link/core/index.js\";\nimport { execute } from \"../link/core/index.js\";\nimport {\n  hasDirectives,\n  isExecutionPatchIncrementalResult,\n  isExecutionPatchResult,\n  removeDirectivesFromDocument,\n} from \"../utilities/index.js\";\nimport type { Cache, ApolloCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\n\nimport type {\n  ObservableSubscription,\n  ConcastSourcesArray,\n} from \"../utilities/index.js\";\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  getGraphQLErrorsFromResult,\n  canUseWeakMap,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n  DocumentTransform,\n} from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport {\n  ApolloError,\n  isApolloError,\n  graphQLResultHasProtocolErrors,\n} from \"../errors/index.js\";\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from \"./types.js\";\nimport { LocalState } from \"./LocalState.js\";\n\nimport type { QueryStoreValue } from \"./QueryInfo.js\";\nimport {\n  QueryInfo,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from \"./QueryInfo.js\";\nimport type { ApolloErrorOptions } from \"../errors/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  hasNonreactiveDirective: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nimport type { DefaultOptions } from \"./ApolloClient.js\";\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly documentTransform: DocumentTransform;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    documentTransform,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults = !!cache.assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    documentTransform?: DocumentTransform;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    const defaultDocumentTransform = new DocumentTransform(\n      (document) => this.cache.transformDocument(document),\n      // Allow the apollo cache to manage its own transform caches\n      { cache: false }\n    );\n\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform = documentTransform\n      ? defaultDocumentTransform\n          .concat(documentTransform)\n          // The custom document transform may add new fragment spreads or new\n          // field selections, so we want to give the cache a chance to run\n          // again. For example, the InMemoryCache adds __typename to field\n          // selections and fragments from the fragment registry.\n          .concat(defaultDocumentTransform)\n      : defaultDocumentTransform;\n\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      newInvariantError(\"QueryManager stopped while query was in flight\")\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach((cancel) => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TContext extends Record<string, any>,\n    TCache extends ApolloCache<any>,\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<\n    FetchResult<TData>\n  > {\n    invariant(\n      mutation,\n      \"mutation option is required. You must specify your GraphQL document in the mutation option.\"\n    );\n\n    invariant(\n      fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\",\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    mutation = this.cache.transformForLink(this.transform(mutation));\n    const { hasClientExports } = this.getDocumentInfo(mutation);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = (await this.localState.addExportedVariables(\n        mutation,\n        variables,\n        context\n      )) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<TData, TVariables, TContext, TCache>(\n        optimisticResponse,\n        {\n          mutationId,\n          document: mutation,\n          variables,\n          fetchPolicy,\n          errorPolicy,\n          context,\n          updateQueries,\n          update: updateWithProxyFn,\n          keepRootFields,\n        }\n      );\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n            throw new ApolloError({\n              graphQLErrors: getGraphQLErrorsFromResult(result),\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<TData, TVariables, TContext, TCache>({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        }\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // Since mutations might receive multiple payloads from the\n          // ApolloLink chain (e.g. when used with @defer),\n          // we resolve with a SingleExecutionResult or after the final\n          // ExecutionPatchResult has arrived and we have assembled the\n          // multipart response into a single result.\n          if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n            resolve(storeResult);\n          }\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError\n              ? err\n              : new ApolloError({\n                  networkError: err,\n                })\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables,\n        });\n      }\n      if (\n        isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)\n      ) {\n        const diff = cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        });\n        let mergedData;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          (result as FetchResult).data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables,\n          });\n        }\n      }\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: (document && getOperationName(document)) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach((write) => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          const isFinalResult =\n            !isExecutionPatchResult(result) ||\n            (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...(result as FetchResult), data: diff.result };\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables,\n              });\n            }\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n      }).forEach((result) => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>,\n  >(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean;\n    }\n  ) {\n    const data =\n      typeof optimisticResponse === \"function\"\n        ? optimisticResponse(mutation.variables)\n        : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction((cache) => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>(\n          {\n            ...mutation,\n            result: { data },\n          },\n          cache\n        );\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n      .promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  public transform(document: DocumentNode) {\n    return this.documentTransform.transformDocument(document);\n  }\n\n  private transformCache = new (canUseWeakMap ? WeakMap : Map)<\n    DocumentNode,\n    TransformCacheEntry\n  >();\n\n  public getDocumentInfo(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cacheEntry: TransformCacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument(\n          [\n            { name: \"client\", remove: true },\n            { name: \"connection\" },\n            { name: \"nonreactive\" },\n          ],\n          document\n        ),\n        defaultVars: getDefaultValues(\n          getOperationDefinition(document)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...document,\n          definitions: document.definitions.map((def) => {\n            if (\n              def.kind === \"OperationDefinition\" &&\n              def.operation !== \"query\"\n            ) {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        },\n      };\n\n      transformCache.set(document, cacheEntry);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables\n  ): OperationVariables {\n    return {\n      ...this.getDocumentInfo(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<\n    T,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    const query = this.transform(options.query);\n\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = {\n      ...options,\n      variables: this.getVariables(query, options.variables) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n    observable[\"lastQuery\"] = query;\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId()\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      \"query option is required. You must specify your GraphQL document \" +\n        \"in the query option.\"\n    );\n\n    invariant(\n      options.query.kind === \"Document\",\n      'You must wrap the query string in a \"gql\" tag.'\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      \"returnPartialData option only supported on watchQuery.\"\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      \"pollInterval option only supported on watchQuery.\"\n    );\n\n    return this.fetchQuery<TData, TVars>(queryId, {\n      ...options,\n      query: this.transform(options.query),\n    }).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(\n    options: Cache.ResetOptions = {\n      discardWatches: true,\n    }\n  ): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(\n      newInvariantError(\n        \"Store reset while query was in flight (not completed in link chain)\"\n      )\n    );\n\n    this.queries.forEach((queryInfo) => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\"\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach((desc) => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(\n            typeof nameOrDoc === \"string\"\n              ? `Unknown query named \"%s\" requested in refetchQueries options.include array`\n              : `Unknown query %s requested in refetchQueries options.include array`,\n            nameOrDoc\n          );\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(\n      (observableQuery, queryId) => {\n        const { fetchPolicy } = observableQuery.options;\n        observableQuery.resetLastResults();\n        if (\n          includeStandby ||\n          (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        this.getQuery(queryId).setDiff(null);\n      }\n    );\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy = \"none\",\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(query, context, variables).map((result) => {\n        if (fetchPolicy !== \"no-cache\") {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        const hasErrors = graphQLResultHasError(result);\n        const hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          const errors: ApolloErrorOptions = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n\n          // `errorPolicy` is a mechanism for handling GraphQL errors, according\n          // to our documentation, so we throw protocol errors regardless of the\n          // set error policy.\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n\n        return result;\n      });\n\n    if (this.getDocumentInfo(query).hasClientExports) {\n      const observablePromise = this.localState\n        .addExportedVariables(query, variables, context)\n        .then(makeObservable);\n\n      return new Observable<FetchResult<T>>((observer) => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          (observable) => (sub = observable.subscribe(observer)),\n          observer.error\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach((info) => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected inFlightLinkObservables = new Map<\n    string,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    // Prefer context.queryDeduplication if specified.\n    deduplication: boolean = context?.queryDeduplication ??\n      this.queryDeduplication\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery, clientQuery } = this.getDocumentInfo(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication,\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const printedServerQuery = print(serverQuery);\n        const byVariables =\n          inFlightLinkObservables.get(printedServerQuery) || new Map();\n        inFlightLinkObservables.set(printedServerQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>,\n          ]);\n\n          byVariables.set(varJson, (observable = concast));\n\n          concast.beforeNext(() => {\n            if (byVariables.delete(varJson) && byVariables.size < 1) {\n              inFlightLinkObservables.delete(printedServerQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>,\n        ]);\n      }\n    } else {\n      observable = new Concast([Observable.of({ data: {} } as FetchResult<T>)]);\n      context = this.prepareContext(context);\n    }\n\n    if (clientQuery) {\n      observable = asyncMap(observable, (result) => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<\n      WatchQueryOptions<TVars, TData>,\n      \"query\" | \"variables\" | \"context\" | \"fetchPolicy\" | \"errorPolicy\"\n    >\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = (queryInfo.lastRequestId = this.generateRequestId());\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(options.query);\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables\n      ),\n\n      (result) => {\n        const graphQLErrors = getGraphQLErrorsFromResult(result);\n        const hasErrors = graphQLErrors.length > 0;\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(\n              new ApolloError({\n                graphQLErrors,\n              })\n            );\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(\n            result,\n            linkDocument,\n            options,\n            cacheWriteBehavior\n          );\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      (networkError) => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      }\n    );\n  }\n\n  private fetchConcastWithInfo<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n    query = options.query\n  ): ConcastAndInfo<TData> {\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = (defaults && defaults.fetchPolicy) || \"cache-first\",\n      errorPolicy = (defaults && defaults.errorPolicy) || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const sourcesWithInfo = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        sourcesWithInfo.sources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\n          \"after-fetch\",\n          options\n        );\n      }\n\n      return sourcesWithInfo;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, (reason) => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    let concast: Concast<ApolloQueryResult<TData>>,\n      containsDataFromLink: boolean;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(\n        this.localState\n          .addExportedVariables(\n            normalized.query,\n            normalized.variables,\n            normalized.context\n          )\n          .then(fromVariables)\n          .then((sourcesWithInfo) => sourcesWithInfo.sources)\n      );\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      const sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return {\n      concast,\n      fromLink: containsDataFromLink,\n    };\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<\n    ApolloCache<TStore>,\n    TResult\n  >): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<\n      string,\n      {\n        oq: ObservableQuery<any>;\n        lastDiff?: Cache.DiffResult<any>;\n        diff?: Cache.DiffResult<any>;\n      }\n    >();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: (optimistic && removeOptimistic) || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(\n                  oq,\n                  result as InternalRefetchQueriesResult<TResult>\n                );\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result:\n          | TResult\n          | boolean\n          | Promise<ApolloQueryResult<any>>\n          | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    {\n      query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus\n  ): SourcesAndInfo<TData> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff();\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) =>\n        Observable.of({\n          data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus,\n          ...(diff.complete ? null : { partial: true }),\n        } as ApolloQueryResult<TData>);\n\n      if (data && this.getDocumentInfo(query).hasForcedResolvers) {\n        return this.localState\n          .runResolvers({\n            document: query,\n            remoteResult: { data },\n            context,\n            variables,\n            onlyRunForcedResolvers: true,\n          })\n          .then((resolved) => fromData(resolved.data || void 0));\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === \"none\" &&\n        networkStatus === NetworkStatus.refetch &&\n        Array.isArray(diff.missing)\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\"\n        ? CacheWriteBehavior.FORBID\n        : // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n          refetchWritePolicy !== \"merge\"\n        ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        query,\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\": {\n        const diff = readCache();\n\n        if (diff.complete) {\n          return {\n            fromLink: false,\n            sources: [resultsFromCache(diff, queryInfo.markReady())],\n          };\n        }\n\n        if (returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-and-network\": {\n        const diff = readCache();\n\n        if (diff.complete || returnPartialData || shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(diff), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n      }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n        };\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n          };\n        }\n\n        return { fromLink: true, sources: [resultsFromLink()] };\n\n      case \"standby\":\n        return { fromLink: false, sources: [] };\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n\n// Return types used by fetchQueryByPolicy and other private methods above.\ninterface FetchConcastInfo {\n  // Metadata properties that can be returned in addition to the Concast.\n  fromLink: boolean;\n}\ninterface SourcesAndInfo<TData> extends FetchConcastInfo {\n  sources: ConcastSourcesArray<ApolloQueryResult<TData>>;\n}\ninterface ConcastAndInfo<TData> extends FetchConcastInfo {\n  concast: Concast<ApolloQueryResult<TData>>;\n}\n"]},"metadata":{},"sourceType":"module"}