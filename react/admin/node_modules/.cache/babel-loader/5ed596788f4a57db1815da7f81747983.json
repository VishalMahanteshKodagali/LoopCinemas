{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport { Kind } from \"graphql\";\nimport { getFragmentFromSelection, getDefaultValues, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument, isNonEmptyArray, argumentsObjectFromField } from \"../../utilities/index.js\";\nimport { isArray, makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, extractFragmentContext } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n\nfunction getContextFlavor(context, clientOnly, deferred) {\n  var key = \"\".concat(clientOnly).concat(deferred);\n  var flavored = context.flavors.get(key);\n\n  if (!flavored) {\n    context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : __assign(__assign({}, context), {\n      clientOnly: clientOnly,\n      deferred: deferred\n    }));\n  }\n\n  return flavored;\n}\n\nvar StoreWriter = function () {\n  function StoreWriter(cache, reader, fragments) {\n    this.cache = cache;\n    this.reader = reader;\n    this.fragments = fragments;\n  }\n\n  StoreWriter.prototype.writeToStore = function (store, _a) {\n    var _this = this;\n\n    var query = _a.query,\n        result = _a.result,\n        dataId = _a.dataId,\n        variables = _a.variables,\n        overwrite = _a.overwrite;\n    var operationDefinition = getOperationDefinition(query);\n    var merger = makeProcessedFieldsMerger();\n    variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n\n    var context = __assign(__assign({\n      store: store,\n      written: Object.create(null),\n      merge: function (existing, incoming) {\n        return merger.merge(existing, incoming);\n      },\n      variables: variables,\n      varString: canonicalStringify(variables)\n    }, extractFragmentContext(query, this.fragments)), {\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map()\n    });\n\n    var ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: {\n        map: new Map()\n      },\n      context: context\n    });\n\n    if (!isReference(ref)) {\n      throw newInvariantError(9, result);\n    }\n\n    context.incomingById.forEach(function (_a, dataId) {\n      var storeObject = _a.storeObject,\n          mergeTree = _a.mergeTree,\n          fieldNodeSet = _a.fieldNodeSet;\n      var entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n\n        if (isReference(applied)) {\n          return;\n        }\n\n        storeObject = applied;\n      }\n\n      if (globalThis.__DEV__ !== false && !context.overwrite) {\n        var fieldsWithSelectionSets_1 = Object.create(null);\n        fieldNodeSet.forEach(function (field) {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets_1[field.name.value] = true;\n          }\n        });\n\n        var hasSelectionSet_1 = function (storeFieldName) {\n          return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] === true;\n        };\n\n        var hasMergeFunction_1 = function (storeFieldName) {\n          var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(storeObject).forEach(function (storeFieldName) {\n          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n            warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n          }\n        });\n      }\n\n      store.merge(dataId, storeObject);\n    });\n    store.retain(ref.__ref);\n    return ref;\n  };\n\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n\n    var dataId = _a.dataId,\n        result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context,\n        mergeTree = _a.mergeTree;\n    var policies = this.cache.policies;\n    var incoming = Object.create(null);\n    var typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    var readField = function () {\n      var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n\n      if (isReference(options.from)) {\n        var info = context.incomingById.get(options.from.__ref);\n\n        if (info) {\n          var result_1 = policies.readField(__assign(__assign({}, options), {\n            from: info.storeObject\n          }), context);\n\n          if (result_1 !== void 0) {\n            return result_1;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    var fieldNodeSet = new Set();\n    this.flattenFields(selectionSet, result, context, typename).forEach(function (context, field) {\n      var _a;\n\n      var resultFieldKey = resultKeyNameFromField(field);\n      var value = result[resultFieldKey];\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        var storeFieldName = policies.getStoreFieldName({\n          typename: typename,\n          fieldName: field.name.value,\n          field: field,\n          variables: context.variables\n        });\n        var childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        var incomingValue = _this.processFieldValue(value, field, field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n\n        var childTypename = void 0;\n\n        if (field.selectionSet && (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField(\"__typename\", incomingValue);\n        }\n\n        var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n\n        if (merge) {\n          childTree.info = {\n            field: field,\n            typename: typename,\n            merge: merge\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n      } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !addTypenameToDocument.added(field) && !policies.getReadFunction(typename, field.name.value)) {\n        globalThis.__DEV__ !== false && invariant.error(10, resultKeyNameFromField(field), result);\n      }\n    });\n\n    try {\n      var _b = policies.identify(result, {\n        typename: typename,\n        selectionSet: selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField: readField\n      }),\n          id = _b[0],\n          keyObject = _b[1];\n\n      dataId = dataId || id;\n\n      if (keyObject) {\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      var dataRef = makeReference(dataId);\n      var sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n        return dataRef;\n      }\n\n      var previous_1 = context.incomingById.get(dataId);\n\n      if (previous_1) {\n        previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n        previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n        fieldNodeSet.forEach(function (field) {\n          return previous_1.fieldNodeSet.add(field);\n        });\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet: fieldNodeSet\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  };\n\n  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n    var _this = this;\n\n    if (!field.selectionSet || value === null) {\n      return globalThis.__DEV__ !== false ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map(function (item, i) {\n        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      mergeTree: mergeTree\n    });\n  };\n\n  StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n    if (typename === void 0) {\n      typename = getTypenameFromResult(result, selectionSet, context.fragmentMap);\n    }\n\n    var fieldMap = new Map();\n    var policies = this.cache.policies;\n    var limitingTrie = new Trie(false);\n\n    (function flatten(selectionSet, inheritedContext) {\n      var visitedNode = limitingTrie.lookup(selectionSet, inheritedContext.clientOnly, inheritedContext.deferred);\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n      selectionSet.selections.forEach(function (selection) {\n        if (!shouldInclude(selection, context.variables)) return;\n        var clientOnly = inheritedContext.clientOnly,\n            deferred = inheritedContext.deferred;\n\n        if (!(clientOnly && deferred) && isNonEmptyArray(selection.directives)) {\n          selection.directives.forEach(function (dir) {\n            var name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n\n            if (name === \"defer\") {\n              var args = argumentsObjectFromField(dir, context.variables);\n\n              if (!args || args.if !== false) {\n                deferred = true;\n              }\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          var existing = fieldMap.get(selection);\n\n          if (existing) {\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n        } else {\n          var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw newInvariantError(11, selection.name.value);\n          }\n\n          if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n            flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  };\n\n  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n    var _a;\n\n    var _this = this;\n\n    if (mergeTree.map.size && !isReference(incoming)) {\n      var e_1 = !isArray(incoming) && (isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;\n      var i_1 = incoming;\n\n      if (e_1 && !getStorageArgs) {\n        getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n      }\n\n      var changedFields_1;\n\n      var getValue_1 = function (from, name) {\n        return isArray(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n      };\n\n      mergeTree.map.forEach(function (childTree, storeFieldName) {\n        var eVal = getValue_1(e_1, storeFieldName);\n        var iVal = getValue_1(i_1, storeFieldName);\n        if (void 0 === iVal) return;\n\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n\n        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n\n        if (aVal !== iVal) {\n          changedFields_1 = changedFields_1 || new Map();\n          changedFields_1.set(storeFieldName, aVal);\n        }\n\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields_1) {\n        incoming = isArray(i_1) ? i_1.slice(0) : __assign({}, i_1);\n        changedFields_1.forEach(function (value, name) {\n          incoming[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n    }\n\n    return incoming;\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\n\nfunction getChildMergeTree(_a, name) {\n  var map = _a.map;\n\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || {\n      map: new Map()\n    });\n  }\n\n  return map.get(name);\n}\n\nfunction mergeMergeTrees(left, right) {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n  var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n  var needToMergeMaps = left.map.size && right.map.size;\n  var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n  var merged = {\n    info: info,\n    map: map\n  };\n\n  if (needToMergeMaps) {\n    var remainingRightKeys_1 = new Set(right.map.keys());\n    left.map.forEach(function (leftTree, key) {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys_1.delete(key);\n    });\n    remainingRightKeys_1.forEach(function (key) {\n      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree) {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(_a, name) {\n  var map = _a.map;\n  var childTree = map.get(name);\n\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nvar warnings = new Set();\n\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n  var getChild = function (objOrRef) {\n    var child = store.getFieldValue(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  var existing = getChild(existingRef);\n  if (!existing) return;\n  var incoming = getChild(incomingObj);\n  if (!incoming) return;\n  if (isReference(existing)) return;\n  if (equal(existing, incoming)) return;\n\n  if (Object.keys(existing).every(function (key) {\n    return store.getFieldValue(incoming, key) !== void 0;\n  })) {\n    return;\n  }\n\n  var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n  var childTypenames = [];\n\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach(function (child) {\n      var typename = store.getFieldValue(child, \"__typename\");\n\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  globalThis.__DEV__ !== false && invariant.warn(12, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, existing, incoming);\n}","map":{"version":3,"mappings":"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","names":["invariant","newInvariantError","equal","Trie","Kind","getFragmentFromSelection","getDefaultValues","getOperationDefinition","getTypenameFromResult","makeReference","isField","resultKeyNameFromField","isReference","shouldInclude","cloneDeep","addTypenameToDocument","isNonEmptyArray","argumentsObjectFromField","isArray","makeProcessedFieldsMerger","fieldNameFromStoreName","storeValueIsStoreObject","extractFragmentContext","canonicalStringify","normalizeReadFieldOptions","getContextFlavor","context","clientOnly","deferred","key","concat","flavored","flavors","get","set","__assign","cache","reader","fragments","StoreWriter","store","_a","query","result","dataId","variables","overwrite","operationDefinition","merger","written","Object","create","merge","existing","incoming","varString","incomingById","Map","ref","processSelectionSet","selectionSet","mergeTree","map","forEach","storeObject","fieldNodeSet","entityRef","size","applied","_this","applyMerges","globalThis","__DEV__","fieldsWithSelectionSets_1","field","name","value","hasSelectionSet_1","storeFieldName","hasMergeFunction_1","childTree","Boolean","info","keys","warnAboutDataLoss","retain","__ref","policies","typename","rootTypenamesById","fragmentMap","__typename","readField","options","arguments","from","result_1","Set","flattenFields","resultFieldKey","add","getStoreFieldName","fieldName","getChildMergeTree","incomingValue","processFieldValue","childTypename","getMergeFunction","maybeRecycleChildMergeTree","added","getReadFunction","identify","id","keyObject","e","dataRef","sets","indexOf","push","isFresh","previous_1","mergeMergeTrees","mergeTreeIsEmpty","item","i","fieldMap","limitingTrie","flatten","inheritedContext","visitedNode","lookup","visited","selections","selection","directives","dir","args","if","fragment","lookupFragment","kind","FRAGMENT_SPREAD","fragmentMatches","getStorageArgs","e_1","i_1","changedFields_1","getValue_1","getFieldValue","String","eVal","iVal","aVal","pop","slice","runMergeFunction","getStorage","apply","emptyMergeTreePool","has","left","right","needToMergeMaps","merged","remainingRightKeys_1","leftTree","delete","tree","warnings","existingRef","incomingObj","getChild","objOrRef","child","every","parentType","typeDotName","childTypenames","includes","join"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/cache/inmemory/writeToStore.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport type { SelectionSetNode, FieldNode } from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n  StoreValue,\n  StoreObject,\n  Reference,\n} from \"../../utilities/index.js\";\nimport {\n  getFragmentFromSelection,\n  getDefaultValues,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n  isNonEmptyArray,\n  argumentsObjectFromField,\n} from \"../../utilities/index.js\";\n\nimport type {\n  NormalizedCache,\n  ReadMergeModifyContext,\n  MergeTree,\n  InMemoryCacheConfig,\n} from \"./types.js\";\nimport {\n  isArray,\n  makeProcessedFieldsMerger,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  extractFragmentContext,\n} from \"./helpers.js\";\nimport type { StoreReader } from \"./readFromStore.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { EntityStore } from \"./entityStore.js\";\nimport type { Cache } from \"../../core/index.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\nimport type { ReadFieldFunction } from \"../core/types/common.js\";\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<\n    string,\n    {\n      storeObject: StoreObject;\n      mergeTree?: MergeTree;\n      fieldNodeSet: Set<FieldNode>;\n    }\n  >;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n}\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  \"clientOnly\" | \"deferred\" | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"]\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(\n      key,\n      (flavored =\n        context.clientOnly === clientOnly && context.deferred === deferred\n          ? context\n          : {\n              ...context,\n              clientOnly,\n              deferred,\n            })\n    );\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string;\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n    private fragments?: InMemoryCacheConfig[\"fragments\"]\n  ) {}\n\n  public writeToStore(\n    store: NormalizedCache,\n    { query, result, dataId, variables, overwrite }: Cache.WriteOptions\n  ): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      ...extractFragmentContext(query, this.fragments),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map(),\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map() },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw newInvariantError(`Could not identify object %s`, result);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(\n      ({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n        const entityRef = makeReference(dataId);\n\n        if (mergeTree && mergeTree.map.size) {\n          const applied = this.applyMerges(\n            mergeTree,\n            entityRef,\n            storeObject,\n            context\n          );\n          if (isReference(applied)) {\n            // Assume References returned by applyMerges have already been merged\n            // into the store. See makeMergeObjectsFunction in policies.ts for an\n            // example of how this can happen.\n            return;\n          }\n          // Otherwise, applyMerges returned a StoreObject, whose fields we should\n          // merge into the store (see store.merge statement below).\n          storeObject = applied;\n        }\n\n        if (__DEV__ && !context.overwrite) {\n          const fieldsWithSelectionSets: Record<string, true> =\n            Object.create(null);\n          fieldNodeSet.forEach((field) => {\n            if (field.selectionSet) {\n              fieldsWithSelectionSets[field.name.value] = true;\n            }\n          });\n\n          const hasSelectionSet = (storeFieldName: string) =>\n            fieldsWithSelectionSets[fieldNameFromStoreName(storeFieldName)] ===\n            true;\n\n          const hasMergeFunction = (storeFieldName: string) => {\n            const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n            return Boolean(childTree && childTree.info && childTree.info.merge);\n          };\n\n          Object.keys(storeObject).forEach((storeFieldName) => {\n            // If a merge function was defined for this field, trust that it\n            // did the right thing about (not) clobbering data. If the field\n            // has no selection set, it's a scalar field, so it doesn't need\n            // a merge function (even if it's an object, like JSON data).\n            if (\n              hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)\n            ) {\n              warnAboutDataLoss(\n                entityRef,\n                storeObject,\n                storeFieldName,\n                context.store\n              );\n            }\n          });\n        }\n\n        store.merge(dataId, storeObject);\n      }\n    );\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = Object.create(null);\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && (context.store.get(dataId, \"__typename\") as string));\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = function (this: void) {\n      const options = normalizeReadFieldOptions(\n        arguments,\n        incoming,\n        context.variables\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField(\n            {\n              ...options,\n              from: info.storeObject,\n            },\n            context\n          );\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet\n            ? getContextFlavor(context, false, false)\n            : context,\n          childTree\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (\n          field.selectionSet &&\n          (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))\n        ) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(\n          `Missing field '%s' while writing result %o`,\n          resultKeyNameFromField(field),\n          result\n        );\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (\n        this.reader &&\n        this.reader.isFresh(result, dataRef, selectionSet, context)\n      ) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach((field) => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item,\n          field,\n          context,\n          getChildMergeTree(mergeTree, i)\n        );\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<\n    TContext extends Pick<\n      WriteContext,\n      | \"clientOnly\"\n      | \"deferred\"\n      | \"flavors\"\n      | \"fragmentMap\"\n      | \"lookupFragment\"\n      | \"variables\"\n    >,\n  >(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap)\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach((selection) => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach((dir) => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred)\n          );\n        } else {\n          const fragment = getFragmentFromSelection(\n            selection,\n            context.lookupFragment\n          );\n\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw newInvariantError(\n              `No fragment named %s`,\n              selection.name.value\n            );\n          }\n\n          if (\n            fragment &&\n            policies.fragmentMatches(\n              fragment,\n              typename,\n              result,\n              context.variables\n            )\n          ) {\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred)\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined =\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n          ? existing\n          : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number\n      ): StoreValue => {\n        return isArray(from)\n          ? typeof name === \"number\"\n            ? from[name]\n            : void 0\n          : context.store.getFieldValue(from, String(name));\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map();\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs)\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map() });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info =\n    left.info && right.info\n      ? {\n          ...left.info,\n          ...right.info,\n        }\n      : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps\n    ? new Map()\n    : left.map.size\n    ? left.map\n    : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach((key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(right.map.get(key), left.map.get(key))\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree({ map }: MergeTree, name: string | number) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (\n    Object.keys(existing).every(\n      (key) => store.getFieldValue(incoming, key) !== void 0\n    )\n  ) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach((child) => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n    `Cache data may be lost when replacing the %s field of a %s object.\n\nThis could cause additional (usually avoidable) network requests to fetch data that were otherwise cached.\n\nTo address this problem (which is not a bug in Apollo Client), %sdefine a custom merge function for the %s field, so InMemoryCache can safely merge these objects:\n\n  existing: %s\n  incoming: %s\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`,\n    fieldName,\n    parentType,\n    childTypenames.length\n      ? \"either ensure all objects of type \" +\n          childTypenames.join(\" and \") +\n          \" have an ID or a custom merge function, or \"\n      : \"\",\n    typeDotName,\n    existing,\n    incoming\n  );\n}\n"]},"metadata":{},"sourceType":"module"}