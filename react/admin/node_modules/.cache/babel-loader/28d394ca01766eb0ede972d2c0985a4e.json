{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy,\n      variables = watchQueryOptions.variables;\n  var _a = options.queryKey,\n      queryKey = _a === void 0 ? [] : _a;\n\n  var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n    return client.watchQuery(watchQueryOptions);\n  });\n\n  var _b = React.useState(function () {\n    return new Map([[queryRef.key, queryRef.promise]]);\n  }),\n      promiseCache = _b[0],\n      setPromiseCache = _b[1];\n\n  var promise = promiseCache.get(queryRef.key);\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  if (!promise) {\n    promise = queryRef.promise;\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  React.useEffect(function () {\n    var dispose = queryRef.retain();\n    var removeListener = queryRef.listen(function (promise) {\n      setPromiseCache(function (promiseCache) {\n        return new Map(promiseCache).set(queryRef.key, promise);\n      });\n    });\n    return function () {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n  var skipResult = React.useMemo(function () {\n    var error = toApolloError(queryRef.result);\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error: error\n    };\n  }, [queryRef.result]);\n  var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = queryRef.fetchMore(options);\n    setPromiseCache(function (previousPromiseCache) {\n      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  var refetch = React.useCallback(function (variables) {\n    var promise = queryRef.refetch(variables);\n    setPromiseCache(function (previousPromiseCache) {\n      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  var subscribeToMore = React.useCallback(function (options) {\n    return queryRef.observable.subscribeToMore(options);\n  }, [queryRef]);\n  return React.useMemo(function () {\n    return {\n      client: client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore: fetchMore,\n      refetch: refetch,\n      subscribeToMore: subscribeToMore\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\n\nfunction validateOptions(options) {\n  var query = options.query,\n      fetchPolicy = options.fetchPolicy,\n      returnPartialData = options.returnPartialData;\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\n\nfunction validateFetchPolicy(fetchPolicy) {\n  if (fetchPolicy === void 0) {\n    fetchPolicy = \"cache-first\";\n  }\n\n  var supportedFetchPolicies = [\"cache-first\", \"network-only\", \"no-cache\", \"cache-and-network\"];\n  invariant(supportedFetchPolicies.includes(fetchPolicy), 54, fetchPolicy);\n}\n\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    globalThis.__DEV__ !== false && invariant.warn(55);\n  }\n}\n\nexport function toApolloError(result) {\n  return isNonEmptyArray(result.errors) ? new ApolloError({\n    graphQLErrors: result.errors\n  }) : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n  var client = _a.client,\n      query = _a.query,\n      options = _a.options;\n  return useDeepMemo(function () {\n    var _a;\n\n    if (options === skipToken) {\n      return {\n        query: query,\n        fetchPolicy: \"standby\"\n      };\n    }\n\n    var fetchPolicy = options.fetchPolicy || ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n\n    var watchQueryOptions = __assign(__assign({}, options), {\n      fetchPolicy: fetchPolicy,\n      query: query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0\n    });\n\n    if (globalThis.__DEV__ !== false) {\n      validateOptions(watchQueryOptions);\n    }\n\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n\n    return watchQueryOptions;\n  }, [client, options, query]);\n}","map":{"version":3,"mappings":"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","names":["React","invariant","ApolloError","NetworkStatus","isNonEmptyArray","useApolloClient","DocumentType","verifyDocumentType","__use","useDeepMemo","getSuspenseCache","canonicalStringify","skipToken","useSuspenseQuery","query","options","Object","create","client","suspenseCache","watchQueryOptions","useWatchQueryOptions","variables","_a","cacheKey","concat","queryKey","queryRef","getQueryRef","watchQuery","useState","Map","key","promise","promiseCache","setPromiseCache","get","didChangeOptions","applyOptions","set","useEffect","dispose","retain","removeListener","listen","skipResult","useMemo","error","toApolloError","result","loading","data","networkStatus","ready","fetchPolicy","fetchMore","useCallback","previousPromiseCache","refetch","subscribeToMore","observable","validateOptions","returnPartialData","Query","validateFetchPolicy","validatePartialDataReturn","supportedFetchPolicies","includes","globalThis","errors","graphQLErrors","defaultOptions","notifyOnNetworkStatusChange","nextFetchPolicy","skip"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/hooks/useSuspenseQuery.ts"],"sourcesContent":["import * as React from \"react\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n  FetchMoreQueryOptions,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  SuspenseQueryHookOptions,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\nimport { __use, useDeepMemo } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nimport type { SkipToken } from \"./constants.js\";\nimport type { CacheKey } from \"../cache/types.js\";\n\nexport interface UseSuspenseQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  client: ApolloClient<any>;\n  data: TData;\n  error: ApolloError | undefined;\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  networkStatus: NetworkStatus;\n  refetch: RefetchFunction<TData, TVariables>;\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\nexport type FetchMoreFunction<TData, TVariables extends OperationVariables> = (\n  fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TData;\n        variables: TVariables;\n      }\n    ) => TData;\n  }\n) => Promise<ApolloQueryResult<TData>>;\n\nexport type RefetchFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"refetch\"];\n\nexport type SubscribeToMoreFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"subscribeToMore\"];\n\nexport function useSuspenseQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<SuspenseQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> &\n    TOptions\n): UseSuspenseQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\"\n    ? TOptions[\"returnPartialData\"] extends true\n      ? DeepPartial<TData> | undefined\n      : TData | undefined\n    : TOptions[\"returnPartialData\"] extends true\n    ? TOptions[\"skip\"] extends boolean\n      ? DeepPartial<TData> | undefined\n      : DeepPartial<TData>\n    : TOptions[\"skip\"] extends boolean\n    ? TData | undefined\n    : TData,\n  TVariables\n>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData>, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n        returnPartialData: true;\n      })\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?:\n    | SkipToken\n    | SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken & Partial<SuspenseQueryHookOptions<TData, TVariables>>)\n    | SuspenseQueryHookOptions<TData, TVariables> = Object.create(null)\n): UseSuspenseQueryResult<TData | undefined, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions)\n  );\n\n  const [promiseCache, setPromiseCache] = React.useState(\n    () => new Map([[queryRef.key, queryRef.promise]])\n  );\n\n  let promise = promiseCache.get(queryRef.key);\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  if (!promise) {\n    promise = queryRef.promise;\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  React.useEffect(() => {\n    const dispose = queryRef.retain();\n\n    const removeListener = queryRef.listen((promise) => {\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, promise)\n      );\n    });\n\n    return () => {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n\n  const skipResult = React.useMemo(() => {\n    const error = toApolloError(queryRef.result);\n\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error,\n    };\n  }, [queryRef.result]);\n\n  const result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options);\n\n      setPromiseCache((previousPromiseCache) =>\n        new Map(previousPromiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setPromiseCache((previousPromiseCache) =>\n        new Map(previousPromiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => queryRef.observable.subscribeToMore(options),\n      [queryRef]\n    );\n\n  return React.useMemo(() => {\n    return {\n      client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore,\n      refetch,\n      subscribeToMore,\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\n\nfunction validateOptions(options: WatchQueryOptions) {\n  const { query, fetchPolicy, returnPartialData } = options;\n\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\n\nfunction validateFetchPolicy(\n  fetchPolicy: WatchQueryFetchPolicy = \"cache-first\"\n) {\n  const supportedFetchPolicies: WatchQueryFetchPolicy[] = [\n    \"cache-first\",\n    \"network-only\",\n    \"no-cache\",\n    \"cache-and-network\",\n  ];\n\n  invariant(\n    supportedFetchPolicies.includes(fetchPolicy),\n    `The fetch policy \\`%s\\` is not supported with suspense.`,\n    fetchPolicy\n  );\n}\n\nfunction validatePartialDataReturn(\n  fetchPolicy: WatchQueryFetchPolicy | undefined,\n  returnPartialData: boolean | undefined\n) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    invariant.warn(\n      \"Using `returnPartialData` with a `no-cache` fetch policy has no effect. To read partial data from the cache, consider using an alternate fetch policy.\"\n    );\n  }\n}\n\nexport function toApolloError(result: ApolloQueryResult<any>) {\n  return isNonEmptyArray(result.errors)\n    ? new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\ninterface UseWatchQueryOptionsHookOptions<\n  TData,\n  TVariables extends OperationVariables,\n> {\n  client: ApolloClient<unknown>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  options: SkipToken | SuspenseQueryHookOptions<TData, TVariables>;\n}\n\nexport function useWatchQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>({\n  client,\n  query,\n  options,\n}: UseWatchQueryOptionsHookOptions<TData, TVariables>): WatchQueryOptions<\n  TVariables,\n  TData\n> {\n  return useDeepMemo<WatchQueryOptions<TVariables, TData>>(() => {\n    if (options === skipToken) {\n      return { query, fetchPolicy: \"standby\" };\n    }\n\n    const fetchPolicy =\n      options.fetchPolicy ||\n      client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\";\n\n    const watchQueryOptions = {\n      ...options,\n      fetchPolicy,\n      query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0,\n    };\n\n    if (__DEV__) {\n      validateOptions(watchQueryOptions);\n    }\n\n    // Assign the updated fetch policy after our validation since `standby` is\n    // not a supported fetch policy on its own without the use of `skip`.\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n\n    return watchQueryOptions;\n  }, [client, options, query]);\n}\n"]},"metadata":{},"sourceType":"module"}