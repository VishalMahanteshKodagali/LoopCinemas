{"ast":null,"code":"import { Observable } from \"zen-observable-ts\";\nimport \"symbol-observable\";\nvar prototype = Observable.prototype;\nvar fakeObsSymbol = \"@@observable\";\n\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };","map":{"version":3,"mappings":"AAKA,SAASA,UAAT,QAA2B,mBAA3B;AAIA,OAAO,mBAAP;AAOQ,aAAS,GAAKA,UAAU,UAAxB;AACR,IAAMC,aAAa,GAAG,cAAtB;;AACA,IAAI,CAACC,SAAS,CAACD,aAAD,CAAd,EAA+B;EAC7BC,SAAS,CAACD,aAAD,CAAT,GAA2B;IACzB,OAAO,IAAP;EACD,CAFD;AAGD;;AAED,SAASD,UAAT","names":["Observable","fakeObsSymbol","prototype"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/utilities/observables/Observable.ts"],"sourcesContent":["import type {\n  Observer,\n  Subscription as ObservableSubscription,\n  Subscriber,\n} from \"zen-observable-ts\";\nimport { Observable } from \"zen-observable-ts\";\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport \"symbol-observable\";\n\nexport type { Observer, ObservableSubscription, Subscriber };\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = \"@@observable\" as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };\n"]},"metadata":{},"sourceType":"module"}