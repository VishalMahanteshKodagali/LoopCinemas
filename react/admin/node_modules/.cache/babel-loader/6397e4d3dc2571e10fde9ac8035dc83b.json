{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap } from \"../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\n\nvar SuspenseCache = function () {\n  function SuspenseCache(options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n\n    this.queryRefs = new Trie(canUseWeakMap);\n    this.options = options;\n  }\n\n  SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        key: cacheKey,\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n\n    return ref.current;\n  };\n\n  return SuspenseCache;\n}();\n\nexport { SuspenseCache };","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AAEA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,sBAAT,QAAuC,qBAAvC;;AAiBA;EAME,uBAAYC,OAAZ,EAA+D;IAAnD;MAAAA,UAAgCC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhC;IAAmD;;IALvD,iBAAY,IAAIL,IAAJ,CAClBC,aADkB,CAAZ;IAMN,KAAKE,OAAL,GAAeA,OAAf;EACD;;EAEDG,gDACEC,QADF,EAEEC,gBAFF,EAEgD;IAE9C,IAAMC,GAAG,GAAG,KAAKC,SAAL,CAAeC,WAAf,CAA2BJ,QAA3B,CAAZ;;IAEA,IAAI,CAACE,GAAG,CAACG,OAAT,EAAkB;MAChBH,GAAG,CAACG,OAAJ,GAAc,IAAIV,sBAAJ,CAA2BM,gBAAgB,EAA3C,EAA+C;QAC3DK,GAAG,EAAEN,QADsD;QAE3DO,oBAAoB,EAAE,KAAKX,OAAL,CAAaW,oBAFwB;QAG3DC,SAAS,EAAE;UACT,OAAON,GAAG,CAACG,OAAX;QACD;MAL0D,CAA/C,CAAd;IAOD;;IAED,OAAOH,GAAG,CAACG,OAAX;EACD,CAjBD;;EAkBF;AAAC,CA5BD","names":["Trie","canUseWeakMap","InternalQueryReference","options","Object","create","SuspenseCache","cacheKey","createObservable","ref","queryRefs","lookupArray","current","key","autoDisposeTimeoutMs","onDispose"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/cache/SuspenseCache.ts"],"sourcesContent":["import { Trie } from \"@wry/trie\";\nimport type { ObservableQuery } from \"../../core/index.js\";\nimport { canUseWeakMap } from \"../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey } from \"./types.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>(\n    canUseWeakMap\n  );\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = Object.create(null)) {\n    this.options = options;\n  }\n\n  getQueryRef<TData = any>(\n    cacheKey: CacheKey,\n    createObservable: () => ObservableQuery<TData>\n  ) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        key: cacheKey,\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current as InternalQueryReference<TData>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}