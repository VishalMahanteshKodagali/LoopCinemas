{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { compact } from \"./compact.js\";\nexport function mergeOptions(defaults, options) {\n  return compact(defaults, options, options.variables && {\n    variables: compact(__assign(__assign({}, defaults && defaults.variables), options.variables))\n  });\n}","map":{"version":3,"mappings":";AAOA,SAASA,OAAT,QAAwB,cAAxB;AAOA,OAAM,SAAUC,YAAV,CAIJC,QAJI,EAKJC,OALI,EAKiC;EAErC,OAAOH,OAAO,CACZE,QADY,EAEZC,OAFY,EAGZA,OAAO,CAACC,SAAR,IAAqB;IACnBA,SAAS,EAAEJ,OAAO,uBACZE,QAAQ,IAAIA,QAAQ,CAACE,SADT,GAEbD,OAAO,CAACC,SAFK;EADC,CAHT,CAAd;AAUD","names":["compact","mergeOptions","defaults","options","variables"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/utilities/common/mergeOptions.ts"],"sourcesContent":["import type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\n\nimport { compact } from \"./compact.js\";\n\ntype OptionsUnion<TData, TVariables extends OperationVariables, TContext> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables, TContext>;\n\nexport function mergeOptions<\n  TDefaultOptions extends Partial<OptionsUnion<any, any, any>>,\n  TOptions extends TDefaultOptions,\n>(\n  defaults: TDefaultOptions | Partial<TDefaultOptions> | undefined,\n  options: TOptions | Partial<TOptions>\n): TOptions & TDefaultOptions {\n  return compact(\n    defaults,\n    options,\n    options.variables && {\n      variables: compact({\n        ...(defaults && defaults.variables),\n        ...options.variables,\n      }),\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}