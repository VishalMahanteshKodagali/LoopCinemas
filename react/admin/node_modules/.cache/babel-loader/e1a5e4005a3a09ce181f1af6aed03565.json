{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n\nfunction execSelectionSetKeyArgs(options) {\n  return [options.selectionSet, options.objectOrReference, options.context, options.context.canonizeResults];\n}\n\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n\n    this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config)\n    });\n    this.canon = config.canon || new ObjectCanon();\n    this.executeSelectionSet = wrap(function (options) {\n      var _a;\n\n      var canonizeResults = options.context.canonizeResults;\n      var peekArgs = execSelectionSetKeyArgs(options);\n      peekArgs[3] = !canonizeResults;\n\n      var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return __assign(__assign({}, other), {\n            result: _this.canon.admit(other.result)\n          });\n        }\n\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSelectionSetImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n  }\n\n  StoreReader.prototype.resetCanon = function () {\n    this.canon = new ObjectCanon();\n  };\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        _b = _a.rootId,\n        rootId = _b === void 0 ? \"ROOT_QUERY\" : _b,\n        variables = _a.variables,\n        _c = _a.returnPartialData,\n        returnPartialData = _c === void 0 ? true : _c,\n        _d = _a.canonizeResults,\n        canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var rootRef = makeReference(rootId);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: __assign({\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: canonicalStringify(variables),\n        canonizeResults: canonizeResults\n      }, extractFragmentContext(query, this.config.fragments))\n    });\n    var missing;\n\n    if (execResult.missing) {\n      missing = [new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];\n\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing: missing\n    };\n  };\n\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        objectOrReference = _a.objectOrReference,\n        enclosingRef = _a.enclosingRef,\n        context = _a.context;\n\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n      };\n    }\n\n    var variables = context.variables,\n        policies = context.policies,\n        store = context.store;\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n    var objectsToMerge = [];\n    var missing;\n    var missingMerger = new DeepMerger();\n\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n\n    function handleMissing(result, resultName) {\n      var _a;\n\n      if (result.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n      }\n\n      return result.result;\n    }\n\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a, _b;\n\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n          }\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef: enclosingRef,\n            context: context\n          }), resultName);\n        } else if (!selection.selectionSet) {\n          if (context.canonizeResults) {\n            fieldValue = _this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context: context\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw newInvariantError(7, selection.name.value);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    var result = mergeDeepArray(objectsToMerge);\n    var finalResult = {\n      result: result,\n      missing: missing\n    };\n    var frozen = context.canonizeResults ? this.canon.admit(finalResult) : maybeDeepFreeze(finalResult);\n\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  };\n\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        enclosingRef = _a.enclosingRef,\n        context = _a.context;\n    var missing;\n    var missingMerger = new DeepMerger();\n\n    function handleMissing(childResult, i) {\n      var _a;\n\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n      }\n\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n\n      if (isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          enclosingRef: enclosingRef,\n          context: context\n        }), i);\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context: context\n        }), i);\n      }\n\n      if (globalThis.__DEV__ !== false) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nexport { StoreReader };\n\nfunction firstMissing(tree) {\n  try {\n    JSON.stringify(tree, function (_, value) {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (isNonNullObject(value)) {\n        invariant(!isReference(value), 8, getTypenameFromStoreObject(store, value), field.name.value);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["invariant","newInvariantError","Kind","wrap","isField","resultKeyNameFromField","isReference","makeReference","shouldInclude","addTypenameToDocument","getDefaultValues","getMainDefinition","getQueryDefinition","getFragmentFromSelection","maybeDeepFreeze","mergeDeepArray","DeepMerger","isNonNullObject","canUseWeakMap","compact","maybeDependOnExistenceOfEntity","supportsResultCaching","isArray","extractFragmentContext","getTypenameFromStoreObject","shouldCanonizeResults","MissingFieldError","canonicalStringify","ObjectCanon","execSelectionSetKeyArgs","options","selectionSet","objectOrReference","context","canonizeResults","config","WeakMap","Map","addTypename","canon","executeSelectionSet","peekArgs","other","peek","apply","_a","result","_this","admit","store","enclosingRef","__ref","execSelectionSetImpl","max","resultCacheMaxSize","keyArgs","makeCacheKey","parent","varString","executeSubSelectedArray","execSubSelectedArrayImpl","field","array","StoreReader","query","_b","rootId","variables","_c","returnPartialData","_d","policies","cache","rootRef","execResult","fragments","missing","firstMissing","complete","knownResults","get","latest","isKnown","rootTypenamesById","has","empty","typename","getFieldValue","objectsToMerge","missingMerger","rootIdsByTypename","push","__typename","handleMissing","resultName","merge","workSet","Set","selections","forEach","selection","fieldValue","readField","fieldName","name","value","from","added","concat","JSON","stringify","pass","fragment","lookupFragment","kind","FRAGMENT_SPREAD","fragmentMatches","add","finalResult","frozen","set","childResult","i","filter","canRead","map","item","globalThis","assertSelectionSetForIdValue","tree","_","workSet_1"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/cache/inmemory/readFromStore.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../../utilities/globals/index.js\";\n\nimport type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\nimport { Kind } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type {\n  Reference,\n  StoreObject,\n  FragmentMap,\n  FragmentMapFunction,\n} from \"../../utilities/index.js\";\nimport {\n  isField,\n  resultKeyNameFromField,\n  isReference,\n  makeReference,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getMainDefinition,\n  getQueryDefinition,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  DeepMerger,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n} from \"../../utilities/index.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type {\n  DiffQueryAgainstStoreOptions,\n  InMemoryCacheConfig,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\nimport {\n  maybeDependOnExistenceOfEntity,\n  supportsResultCaching,\n} from \"./entityStore.js\";\nimport {\n  isArray,\n  extractFragmentContext,\n  getTypenameFromStoreObject,\n  shouldCanonizeResults,\n} from \"./helpers.js\";\nimport type { Policies } from \"./policies.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { MissingTree } from \"../core/types/common.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n}\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache;\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n  fragments?: InMemoryCacheConfig[\"fragments\"];\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]\n  >;\n\n  private config: {\n    cache: InMemoryCache;\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n    fragments?: InMemoryCacheConfig[\"fragments\"];\n  };\n\n  private knownResults = new (canUseWeakMap ? WeakMap : Map)<\n    Record<string, any>,\n    SelectionSetNode\n  >();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon();\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon();\n\n    this.executeSelectionSet = wrap(\n      (options) => {\n        const { canonizeResults } = options.context;\n\n        const peekArgs = execSelectionSetKeyArgs(options);\n\n        // Negate this boolean option so we can find out if we've already read\n        // this result using the other boolean value.\n        peekArgs[3] = !canonizeResults;\n\n        const other = this.executeSelectionSet.peek(...peekArgs);\n\n        if (other) {\n          if (canonizeResults) {\n            return {\n              ...other,\n              // If we previously read this result without canonizing it, we can\n              // reuse that result simply by canonizing it now.\n              result: this.canon.admit(other.result),\n            };\n          }\n          // If we previously read this result with canonization enabled, we can\n          // return that canonized result as-is.\n          return other;\n        }\n\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n\n        // Finally, if we didn't find any useful previous results, run the real\n        // execSelectionSetImpl method with the given options.\n        return this.execSelectionSetImpl(options);\n      },\n      {\n        max: this.config.resultCacheMaxSize,\n        keyArgs: execSelectionSetKeyArgs,\n        // Note that the parameters of makeCacheKey are determined by the\n        // array returned by keyArgs.\n        makeCacheKey(selectionSet, parent, context, canonizeResults) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(\n              selectionSet,\n              isReference(parent) ? parent.__ref : parent,\n              context.varString,\n              canonizeResults\n            );\n          }\n        },\n      }\n    );\n\n    this.executeSubSelectedArray = wrap(\n      (options: ExecSubSelectedArrayOptions) => {\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n        return this.execSubSelectedArrayImpl(options);\n      },\n      {\n        max: this.config.resultCacheMaxSize,\n        makeCacheKey({ field, array, context }) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(field, array, context.varString);\n          }\n        },\n      }\n    );\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = \"ROOT_QUERY\",\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        ...extractFragmentContext(query, this.config.fragments),\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [\n        new MissingFieldError(\n          firstMissing(execResult.missing)!,\n          execResult.missing,\n          query,\n          variables\n        ),\n      ];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext\n  ): boolean {\n    if (\n      supportsResultCaching(context.store) &&\n      this.knownResults.get(result) === selectionSet\n    ) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result)\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (\n      isReference(objectOrReference) &&\n      !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n      !context.store.has(objectOrReference.__ref)\n    ) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(\n      objectOrReference,\n      \"__typename\"\n    );\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (\n      this.config.addTypename &&\n      typeof typename === \"string\" &&\n      !policies.rootIdsByTypename[typename]\n    ) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, {\n          [resultName]: result.missing,\n        });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach((selection) => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField(\n          {\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n            from: objectOrReference,\n          },\n          context\n        );\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${selection.name.value}' on ${\n                isReference(objectOrReference)\n                  ? objectOrReference.__ref + \" object\"\n                  : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`,\n            });\n          }\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(\n            this.executeSubSelectedArray({\n              field: selection,\n              array: fieldValue,\n              enclosingRef,\n              context,\n            }),\n            resultName\n          );\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(\n            this.executeSelectionSet({\n              selectionSet: selection.selectionSet,\n              objectOrReference: fieldValue as StoreObject | Reference,\n              enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n              context,\n            }),\n            resultName\n          );\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.lookupFragment\n        );\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw newInvariantError(`No fragment named %s`, selection.name.value);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = context.canonizeResults\n      ? this.canon.admit(finalResult)\n      : // Since this.canon is normally responsible for freezing results (only in\n        // development), freeze them manually if canonization is disabled.\n        maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(\n          this.executeSubSelectedArray({\n            field,\n            array: item,\n            enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(\n          this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            objectOrReference: item,\n            enclosingRef: isReference(item) ? item : enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach((value) => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type %s returned for query field %s`,\n          getTypenameFromStoreObject(store, value),\n          field.name.value\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}