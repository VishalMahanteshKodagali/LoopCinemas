{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = React.useRef();\n\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n\n  var state = stateRef.current;\n  state.forceUpdateState = React.useReducer(function (tick) {\n    return tick + 1;\n  }, 0)[1];\n  return state;\n}\n\nvar InternalState = function () {\n  function InternalState(client, query, previous) {\n    var _this = this;\n\n    this.client = client;\n    this.query = query;\n\n    this.forceUpdate = function () {\n      return _this.forceUpdateState();\n    };\n\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n    var previousResult = previous && previous.result;\n    var previousData = previousResult && previousResult.data;\n\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  InternalState.prototype.forceUpdateState = function () {\n    globalThis.__DEV__ !== false && invariant.warn(48);\n  };\n\n  InternalState.prototype.executeQuery = function (options) {\n    var _this = this;\n\n    var _a;\n\n    if (options.query) {\n      Object.assign(this, {\n        query: options.query\n      });\n    }\n\n    this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n    this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n    return new Promise(function (resolve) {\n      var result;\n      concast.subscribe({\n        next: function (value) {\n          result = value;\n        },\n        error: function () {\n          resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n        },\n        complete: function () {\n          resolve(_this.toQueryResult(result));\n        }\n      });\n    });\n  };\n\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n\n    this.renderPromises = React.useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(React.useCallback(function (handleStoreChange) {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n\n      _this.forceUpdate = handleStoreChange;\n\n      var onNext = function () {\n        var previousResult = _this.result;\n        var result = obsQuery.getCurrentResult();\n\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n\n        _this.setResult(result);\n      };\n\n      var onError = function (error) {\n        subscription.unsubscribe();\n        subscription = obsQuery.resubscribeAfterError(onNext, onError);\n\n        if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n          throw error;\n        }\n\n        var previousResult = _this.result;\n\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n\n      var subscription = obsQuery.subscribe(onNext, onError);\n      return function () {\n        setTimeout(function () {\n          return subscription.unsubscribe();\n        });\n\n        _this.forceUpdate = function () {\n          return _this.forceUpdateState();\n        };\n      };\n    }, [obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    this.unsafeHandlePartialRefetch(result);\n    return this.toQueryResult(result);\n  };\n\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        this.observable.reobserve(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === \"standby\") {\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n\n  InternalState.prototype.getObsQueryOptions = function () {\n    var toMerge = [];\n    var globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n    return toMerge.reduce(mergeOptions);\n  };\n\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    var _b;\n\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var skip = _a.skip,\n        ssr = _a.ssr,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        defaultOptions = _a.defaultOptions,\n        otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: this.query\n    });\n\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n\n    if (skip) {\n      var _c = watchQueryOptions.fetchPolicy,\n          fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,\n          _d = watchQueryOptions.initialFetchPolicy,\n          initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: \"standby\"\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  };\n\n  InternalState.prototype.getDefaultFetchPolicy = function () {\n    var _a, _b;\n\n    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n  };\n\n  InternalState.prototype.onCompleted = function (data) {};\n\n  InternalState.prototype.onError = function (error) {};\n\n  InternalState.prototype.useObservableQuery = function () {\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(this.getObsQueryOptions());\n    this.obsQueryFields = React.useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  };\n\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n\n    this.result = nextResult;\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult, previousResult);\n  };\n\n  InternalState.prototype.handleErrorOrCompleted = function (result, previousResult) {\n    var _this = this;\n\n    if (!result.loading) {\n      var error_1 = this.toApolloError(result);\n      Promise.resolve().then(function () {\n        if (error_1) {\n          _this.onError(error_1);\n        } else if (result.data && (previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus) !== result.networkStatus && result.networkStatus === NetworkStatus.ready) {\n          _this.onCompleted(result.data);\n        }\n      }).catch(function (error) {\n        globalThis.__DEV__ !== false && invariant.warn(error);\n      });\n    }\n  };\n\n  InternalState.prototype.toApolloError = function (result) {\n    return isNonEmptyArray(result.errors) ? new ApolloError({\n      graphQLErrors: result.errors\n    }) : result.error;\n  };\n\n  InternalState.prototype.getCurrentResult = function () {\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n\n    return this.result;\n  };\n\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    var data = result.data,\n        partial = result.partial,\n        resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData\n    }));\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n\n    return queryResult;\n  };\n\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== \"cache-only\") {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n\n  return InternalState;\n}();","map":{"version":3,"mappings":"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","names":["invariant","React","useSyncExternalStore","equal","mergeOptions","getApolloContext","ApolloError","NetworkStatus","DocumentType","verifyDocumentType","useApolloClient","canUseWeakMap","compact","isNonEmptyArray","maybeDeepFreeze","Object","hasOwnProperty","useQuery","query","options","create","useInternalState","client","stateRef","useRef","current","InternalState","state","forceUpdateState","useReducer","tick","previous","loading","data","error","networkStatus","ready","WeakMap","Map","Query","previousResult","result","previousData","globalThis","assign","watchQueryOptions","createWatchQueryOptions","queryHookOptions","concast","observable","reobserveAsConcast","getObsQueryOptions","_a","forceUpdate","Promise","resolve","subscribe","next","value","_this","toQueryResult","getCurrentResult","complete","renderPromises","useContext","useOptions","obsQuery","useObservableQuery","useCallback","handleStoreChange","onNext","setResult","onError","subscription","unsubscribe","resubscribeAfterError","call","setTimeout","disableNetworkFetches","unsafeHandlePartialRefetch","currentWatchQueryOptions","reobserve","onCompleted","prototype","ssr","skip","ssrDisabledResult","fetchPolicy","skipStandbyResult","toMerge","globalDefaults","defaultOptions","watchQuery","push","reduce","otherOptions","variables","getDefaultFetchPolicy","_c","_d","initialFetchPolicy","_b","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","errors","graphQLErrors","queryResult","toQueryResultCache","get","partial","resultWithoutPartial","set","called","partialRefetch","keys","length"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/hooks/useQuery.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"react\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  OperationVariables,\n  WatchQueryFetchPolicy,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type { ApolloContextValue } from \"../context/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  canUseWeakMap,\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return useInternalState(useApolloClient(options.client), query).useQuery(\n    options\n  );\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>\n): InternalState<TData, TVariables> {\n  const stateRef = React.useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  state.forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  /**\n   * Forces an update using local component state.\n   * As this is not batched with `useSyncExternalStore` updates,\n   * this is only used as a fallback if the `useSyncExternalStore` \"force update\"\n   * method is not registered at the moment.\n   * See https://github.com/facebook/react/issues/25191\n   *  */\n  forceUpdateState() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\n      \"Calling default no-op implementation of InternalState#forceUpdate\"\n    );\n  }\n\n  /**\n   * Will be overwritten by the `useSyncExternalStore` \"force update\" method\n   * whenever it is available and reset to `forceUpdateState` when it isn't.\n   */\n  forceUpdate = () => this.forceUpdateState();\n\n  executeQuery(\n    options: QueryHookOptions<TData, TVariables> & {\n      query?: DocumentNode;\n    }\n  ) {\n    if (options.query) {\n      Object.assign(this, { query: options.query });\n    }\n\n    this.watchQueryOptions = this.createWatchQueryOptions(\n      (this.queryHookOptions = options)\n    );\n\n    const concast = this.observable.reobserveAsConcast(\n      this.getObsQueryOptions()\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    this.previousData = this.result?.data || this.previousData;\n    this.result = void 0;\n    this.forceUpdate();\n\n    return new Promise<QueryResult<TData, TVariables>>((resolve) => {\n      let result: ApolloQueryResult<TData>;\n\n      // Subscribe to the concast independently of the ObservableQuery in case\n      // the component gets unmounted before the promise resolves. This prevents\n      // the concast from terminating early and resolving with `undefined` when\n      // there are no more subscribers for the concast.\n      concast.subscribe({\n        next: (value) => {\n          result = value;\n        },\n        error: () => {\n          resolve(this.toQueryResult(this.observable.getCurrentResult()));\n        },\n        complete: () => {\n          resolve(this.toQueryResult(result));\n        },\n      });\n    });\n  }\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = React.useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      React.useCallback(\n        (handleStoreChange) => {\n          if (this.renderPromises) {\n            return () => {};\n          }\n\n          this.forceUpdate = handleStoreChange;\n\n          const onNext = () => {\n            const previousResult = this.result;\n            // We use `getCurrentResult()` instead of the onNext argument because\n            // the values differ slightly. Specifically, loading results will have\n            // an empty object for data instead of `undefined` for some reason.\n            const result = obsQuery.getCurrentResult();\n            // Make sure we're not attempting to re-render similar results\n            if (\n              previousResult &&\n              previousResult.loading === result.loading &&\n              previousResult.networkStatus === result.networkStatus &&\n              equal(previousResult.data, result.data)\n            ) {\n              return;\n            }\n\n            this.setResult(result);\n          };\n\n          const onError = (error: Error) => {\n            subscription.unsubscribe();\n            subscription = obsQuery.resubscribeAfterError(onNext, onError);\n\n            if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n              // The error is not a GraphQL error\n              throw error;\n            }\n\n            const previousResult = this.result;\n            if (\n              !previousResult ||\n              (previousResult && previousResult.loading) ||\n              !equal(error, previousResult.error)\n            ) {\n              this.setResult({\n                data: (previousResult && previousResult.data) as TData,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              });\n            }\n          };\n\n          let subscription = obsQuery.subscribe(onNext, onError);\n\n          // Do the \"unsubscribe\" with a short delay.\n          // This way, an existing subscription can be reused without an additional\n          // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n          // happen in very fast succession.\n          return () => {\n            setTimeout(() => subscription.unsubscribe());\n            this.forceUpdate = () => this.forceUpdateState();\n          };\n        },\n        [\n          // We memoize the subscribe function using useCallback and the following\n          // dependency keys, because the subscribe function reference is all that\n          // useSyncExternalStore uses internally as a dependency key for the\n          // useEffect ultimately responsible for the subscription, so we are\n          // effectively passing this dependency array to that useEffect buried\n          // inside useSyncExternalStore, as desired.\n          obsQuery,\n          this.renderPromises,\n          this.client.disableNetworkFetches,\n        ]\n      ),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult()\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    return this.toQueryResult(result);\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(options: QueryHookOptions<TData, TVariables>) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      (this.queryHookOptions = options)\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted =\n      options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === \"standby\"\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(\n      compact(\n        this.observable && this.observable.options,\n        this.watchQueryOptions\n      )\n    );\n\n    return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<\n    TVariables,\n    TData\n  > {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: \"standby\",\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = (this.observable =\n      (this.renderPromises &&\n        this.renderPromises.getSSRObservable(this.watchQueryOptions)) ||\n      this.observable || // Reuse this.observable if possible (and not SSR)\n      this.client.watchQuery(this.getObsQueryOptions()));\n\n    this.obsQueryFields = React.useMemo(\n      () => ({\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n      }),\n      [obsQuery]\n    );\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false || this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult, previousResult);\n  }\n\n  private handleErrorOrCompleted(\n    result: ApolloQueryResult<TData>,\n    previousResult?: ApolloQueryResult<TData>\n  ) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve()\n        .then(() => {\n          if (error) {\n            this.onError(error);\n          } else if (\n            result.data &&\n            previousResult?.networkStatus !== result.networkStatus &&\n            result.networkStatus === NetworkStatus.ready\n          ) {\n            this.onCompleted(result.data);\n          }\n        })\n        .catch((error) => {\n          invariant.warn(error);\n        });\n    }\n  }\n\n  private toApolloError(\n    result: ApolloQueryResult<TData>\n  ): ApolloError | undefined {\n    return isNonEmptyArray(result.errors)\n      ? new ApolloError({ graphQLErrors: result.errors })\n      : result.error;\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        (this.result = this.observable.getCurrentResult())\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(\n      result,\n      (queryResult = {\n        data, // Ensure always defined, even if result.data is missing.\n        ...resultWithoutPartial,\n        ...this.obsQueryFields,\n        client: this.client,\n        observable: this.observable,\n        variables: this.observable.variables,\n        called: !this.queryHookOptions.skip,\n        previousData: this.previousData,\n      })\n    );\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== \"cache-only\"\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}