{"ast":null,"code":"import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n  if (result.extensions) {\n    return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n  }\n\n  return false;\n}\nexport function isApolloError(err) {\n  return err.hasOwnProperty(\"graphQLErrors\");\n}\n\nvar generateErrorMessage = function (err) {\n  var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n\n  if (err.networkError) errors.push(err.networkError);\n  return errors.map(function (err) {\n    return isNonNullObject(err) && err.message || \"Error message not found.\";\n  }).join(\"\\n\");\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        protocolErrors = _a.protocolErrors,\n        clientErrors = _a.clientErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.name = \"ApolloError\";\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.protocolErrors = protocolErrors || [];\n    _this.clientErrors = clientErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","map":{"version":3,"mappings":";AAAA,OAAO,+BAAP;AAIA,SAASA,eAAT,QAAgC,uBAAhC;AAQA,OAAO,IAAMC,sBAAsB,GAAkBC,MAAM,EAApD;AAkBP,OAAM,SAAUC,8BAAV,CACJC,MADI,EACkB;EAEtB,IAAIA,MAAM,CAACC,UAAX,EAAuB;IACrB,OAAOC,KAAK,CAACC,OAAN,CACJH,MAA6C,CAACC,UAA9C,CACCJ,sBADD,CADI,CAAP;EAKD;;EACD,OAAO,KAAP;AACD;AAED,OAAM,SAAUO,aAAV,CAAwBC,GAAxB,EAAkC;EACtC,OAAOA,GAAG,CAACC,cAAJ,CAAmB,eAAnB,CAAP;AACD;;AAMD,IAAMC,oBAAoB,GAAG,UAACF,GAAD,EAAiB;EAC5C,IAAMG,MAAM,iDACPH,GAAG,CAACI,aADG,EACU,IADV,GAEPJ,GAAG,CAACK,YAFG,EAES,IAFT,GAGPL,GAAG,CAACM,cAHG,EAGW,IAHX,CAAZ;;EAKA,IAAIN,GAAG,CAACO,YAAR,EAAsBJ,MAAM,CAACK,IAAP,CAAYR,GAAG,CAACO,YAAhB;EACtB,OACEJ,MAAM,CAEHM,GAFH,CAGI,UAACT,GAAD,EAAI;IACF,OAACT,eAAe,CAACS,GAAD,CAAf,IAAwBA,GAAG,CAACU,OAA7B,IAAyC,0BAAzC;EAAmE,CAJzE,EAMGC,IANH,CAMQ,IANR,CADF;AASD,CAhBD;;AAsBA;EAAiCC;;EAmB/B,qBAAYC,EAAZ,EAOqB;QANnBT,aAAa;QACbE,cAAc;QACdD,YAAY;QACZE,YAAY;QACZO,YAAY;QACZC,SAAS;;IANX,YAQEC,kBAAMF,YAAN,KAAmB,IARrB;;IASEG,KAAI,CAACC,IAAL,GAAY,aAAZ;IACAD,KAAI,CAACb,aAAL,GAAqBA,aAAa,IAAI,EAAtC;IACAa,KAAI,CAACX,cAAL,GAAsBA,cAAc,IAAI,EAAxC;IACAW,KAAI,CAACZ,YAAL,GAAoBA,YAAY,IAAI,EAApC;IACAY,KAAI,CAACV,YAAL,GAAoBA,YAAY,IAAI,IAApC;IACAU,KAAI,CAACP,OAAL,GAAeI,YAAY,IAAIZ,oBAAoB,CAACe,KAAD,CAAnD;IACAA,KAAI,CAACF,SAAL,GAAiBA,SAAjB;IAICE,KAAY,CAACE,SAAb,GAAyBC,WAAW,CAACC,SAArC;;EACF;;EACH;AAAC,CAxCD,CAAiCC,KAAjC","names":["isNonNullObject","PROTOCOL_ERRORS_SYMBOL","Symbol","graphQLResultHasProtocolErrors","result","extensions","Array","isArray","isApolloError","err","hasOwnProperty","generateErrorMessage","errors","graphQLErrors","clientErrors","protocolErrors","networkError","push","map","message","join","__extends","_a","errorMessage","extraInfo","_super","_this","name","__proto__","ApolloError","prototype","Error"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/errors/index.ts"],"sourcesContent":["import \"../utilities/globals/index.js\";\n\nimport type { GraphQLError, GraphQLErrorExtensions } from \"graphql\";\n\nimport { isNonNullObject } from \"../utilities/index.js\";\nimport type { ServerParseError } from \"../link/http/index.js\";\nimport type { ServerError } from \"../link/utils/index.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype FetchResultWithSymbolExtensions<T> = FetchResult<T> & {\n  extensions: Record<string | symbol, any>;\n};\n\nexport interface ApolloErrorOptions {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  protocolErrors?: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  clientErrors?: ReadonlyArray<Error>;\n  networkError?: Error | ServerParseError | ServerError | null;\n  errorMessage?: string;\n  extraInfo?: any;\n}\n\nexport function graphQLResultHasProtocolErrors<T>(\n  result: FetchResult<T>\n): result is FetchResultWithSymbolExtensions<T> {\n  if (result.extensions) {\n    return Array.isArray(\n      (result as FetchResultWithSymbolExtensions<T>).extensions[\n        PROTOCOL_ERRORS_SYMBOL\n      ]\n    );\n  }\n  return false;\n}\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty(\"graphQLErrors\");\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  const errors = [\n    ...err.graphQLErrors,\n    ...err.clientErrors,\n    ...err.protocolErrors,\n  ];\n  if (err.networkError) errors.push(err.networkError);\n  return (\n    errors\n      // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n      .map(\n        (err) =>\n          (isNonNullObject(err) && err.message) || \"Error message not found.\"\n      )\n      .join(\"\\n\")\n  );\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public protocolErrors: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    protocolErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: ApolloErrorOptions) {\n    super(errorMessage);\n    this.name = \"ApolloError\";\n    this.graphQLErrors = graphQLErrors || [];\n    this.protocolErrors = protocolErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}