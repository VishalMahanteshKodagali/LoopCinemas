{"ast":null,"code":"import { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\n\nfunction isNodeResponse(value) {\n  return !!value.body;\n}\n\nfunction isReadableStream(value) {\n  return !!value.getReader;\n}\n\nfunction isAsyncIterableIterator(value) {\n  return !!(canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\n\nfunction isStreamableBlob(value) {\n  return !!value.stream;\n}\n\nfunction isBlob(value) {\n  return !!value.arrayBuffer;\n}\n\nfunction isNodeReadableStream(value) {\n  return !!value.pipe;\n}\n\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"mappings":"AAOA,SAASA,yBAAT,QAA0C,0BAA1C;AAEA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAAkC;EAChC,OAAO,CAAC,CAAEA,KAAsB,CAACC,IAAjC;AACD;;AAED,SAASC,gBAAT,CAA0BF,KAA1B,EAAoC;EAClC,OAAO,CAAC,CAAEA,KAA6B,CAACG,SAAxC;AACD;;AAED,SAASC,uBAAT,CACEJ,KADF,EACY;EAEV,OAAO,CAAC,EACNN,yBAAyB,IACxBM,KAAoC,CAACK,MAAM,CAACV,aAAR,CAF/B,CAAR;AAID;;AAED,SAASW,gBAAT,CAA0BN,KAA1B,EAAoC;EAClC,OAAO,CAAC,CAAEA,KAAc,CAACO,MAAzB;AACD;;AAED,SAASC,MAAT,CAAgBR,KAAhB,EAA0B;EACxB,OAAO,CAAC,CAAEA,KAAc,CAACS,WAAzB;AACD;;AAED,SAASC,oBAAT,CAA8BV,KAA9B,EAAwC;EACtC,OAAO,CAAC,CAAEA,KAA4B,CAACW,IAAvC;AACD;;AAED,OAAM,SAAUC,gBAAV,CACJC,QADI,EAC6B;EAEjC,IAAIZ,IAAI,GAAYY,QAApB;EAEA,IAAId,cAAc,CAACc,QAAD,CAAlB,EAA8BZ,IAAI,GAAGY,QAAQ,CAACZ,IAAhB;EAE9B,IAAIG,uBAAuB,CAACH,IAAD,CAA3B,EAAmC,OAAON,aAAa,CAAIM,IAAJ,CAApB;EAEnC,IAAIC,gBAAgB,CAACD,IAAD,CAApB,EAA4B,OAAOH,cAAc,CAAIG,IAAI,CAACE,SAAL,EAAJ,CAArB;;EAI5B,IAAIG,gBAAgB,CAACL,IAAD,CAApB,EAA4B;IAC1B,OAAOH,cAAc,CAClBG,IAAI,CAACM,MAAL,GAA+CJ,SAA/C,EADkB,CAArB;EAGD;;EAED,IAAIK,MAAM,CAACP,IAAD,CAAV,EAAkB,OAAOJ,eAAe,CAAII,IAAI,CAACQ,WAAL,EAAJ,CAAtB;EAElB,IAAIC,oBAAoB,CAACT,IAAD,CAAxB,EAAgC,OAAOL,kBAAkB,CAAIK,IAAJ,CAAzB;EAEhC,MAAM,IAAIa,KAAJ,CACJ,4EADI,CAAN;AAGD","names":["canUseAsyncIteratorSymbol","asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","isNodeResponse","value","body","isReadableStream","getReader","isAsyncIterableIterator","Symbol","isStreamableBlob","stream","isBlob","arrayBuffer","isNodeReadableStream","pipe","responseIterator","response","Error"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/link/http/responseIterator.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport type { Response as NodeResponse } from \"node-fetch\";\nimport type { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\n\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\n\nfunction isNodeResponse(value: any): value is NodeResponse {\n  return !!(value as NodeResponse).body;\n}\n\nfunction isReadableStream(value: any): value is ReadableStream<any> {\n  return !!(value as ReadableStream<any>).getReader;\n}\n\nfunction isAsyncIterableIterator(\n  value: any\n): value is AsyncIterableIterator<any> {\n  return !!(\n    canUseAsyncIteratorSymbol &&\n    (value as AsyncIterableIterator<any>)[Symbol.asyncIterator]\n  );\n}\n\nfunction isStreamableBlob(value: any): value is Blob {\n  return !!(value as Blob).stream;\n}\n\nfunction isBlob(value: any): value is Blob {\n  return !!(value as Blob).arrayBuffer;\n}\n\nfunction isNodeReadableStream(value: any): value is NodeReadableStream {\n  return !!(value as NodeReadableStream).pipe;\n}\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"]},"metadata":{},"sourceType":"module"}