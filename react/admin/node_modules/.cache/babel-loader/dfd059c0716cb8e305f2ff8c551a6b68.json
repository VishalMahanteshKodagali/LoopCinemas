{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport { maybe, getMainDefinition, removeClientSetsFromDocument } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? \"/graphql\" : _a,\n      preferredFetch = linkOptions.fetch,\n      _b = linkOptions.print,\n      print = _b === void 0 ? defaultPrinter : _b,\n      includeExtensions = linkOptions.includeExtensions,\n      preserveHeaderCase = linkOptions.preserveHeaderCase,\n      useGETForQueries = linkOptions.useGETForQueries,\n      _c = linkOptions.includeUnusedVariables,\n      includeUnusedVariables = _c === void 0 ? false : _c,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n\n  if (globalThis.__DEV__ !== false) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n      }\n    }\n\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    if (hasDirectives([\"client\"], operation.query)) {\n      var transformedQuery = removeClientSetsFromDocument(operation.query);\n\n      if (!transformedQuery) {\n        return fromError(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n      }\n\n      operation.query = transformedQuery;\n    }\n\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    if (body.variables && !includeUnusedVariables) {\n      body.variables = filterOperationVariables(body.variables, operation.query);\n    }\n\n    var controller;\n\n    if (!options.signal && typeof AbortController !== \"undefined\") {\n      controller = new AbortController();\n      options.signal = controller.signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n    };\n\n    var definitionIsSubscription = function (d) {\n      return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n    };\n\n    var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n    var hasDefer = hasDirectives([\"defer\"], operation.query);\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = \"GET\";\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      var acceptHeader = \"multipart/mixed;\";\n\n      if (isSubscription && hasDefer) {\n        globalThis.__DEV__ !== false && invariant.warn(36);\n      }\n\n      if (isSubscription) {\n        acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n      } else if (hasDefer) {\n        acceptHeader += \"deferSpec=20220824,application/json\";\n      }\n\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === \"GET\") {\n      var _c = rewriteURIForGET(chosenURI, body),\n          newURI = _c.newURI,\n          parseError = _c.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, \"Payload\");\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      var observerNext = observer.next.bind(observer);\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observerNext);\n        } else {\n          return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n        }\n      }).then(function () {\n        controller = undefined;\n        observer.complete();\n      }).catch(function (err) {\n        controller = undefined;\n        handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["invariant","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","parseAndCheckHttpResponse","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","rewriteURIForGET","fromError","filterOperationVariables","maybe","getMainDefinition","removeClientSetsFromDocument","backupFetch","createHttpLink","linkOptions","_a","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","globalThis","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","uri","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","query","transformedQuery","Error","body","variables","controller","signal","AbortController","definitionIsMutation","d","kind","definitionIsSubscription","isSubscription","hasDefer","definitions","some","method","acceptHeader","accept","newURI","parseError","observer","currentFetch","observerNext","next","bind","then","response","setContext","ctype","get","test","undefined","complete","catch","err","abort"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/link/http/createHttpLink.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type { DefinitionNode } from \"graphql\";\n\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport {\n  handleError,\n  readMultipartBody,\n  parseAndCheckHttpResponse,\n} from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport type { HttpOptions } from \"./selectHttpOptionsAndBody.js\";\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n} from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport {\n  maybe,\n  getMainDefinition,\n  removeClientSetsFromDocument,\n} from \"../../utilities/index.js\";\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = \"/graphql\",\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink((operation) => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      \"apollographql-client-name\"?: string;\n      \"apollographql-client-version\"?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders[\"apollographql-client-name\"] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    if (hasDirectives([\"client\"], operation.query)) {\n      const transformedQuery = removeClientSetsFromDocument(operation.query);\n\n      if (!transformedQuery) {\n        return fromError(\n          new Error(\n            \"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"\n          )\n        );\n      }\n\n      operation.query = transformedQuery;\n    }\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      body.variables = filterOperationVariables(\n        body.variables,\n        operation.query\n      );\n    }\n\n    let controller: AbortController | undefined;\n    if (!options.signal && typeof AbortController !== \"undefined\") {\n      controller = new AbortController();\n      options.signal = controller.signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n    };\n    const definitionIsSubscription = (d: DefinitionNode) => {\n      return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n    };\n    const isSubscription = definitionIsSubscription(\n      getMainDefinition(operation.query)\n    );\n    // does not match custom directives beginning with @defer\n    const hasDefer = hasDirectives([\"defer\"], operation.query);\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = \"GET\";\n    }\n\n    if (hasDefer || isSubscription) {\n      options.headers = options.headers || {};\n      let acceptHeader = \"multipart/mixed;\";\n      // Omit defer-specific headers if the user attempts to defer a selection\n      // set on a subscription and log a warning.\n      if (isSubscription && hasDefer) {\n        invariant.warn(\"Multipart-subscriptions do not support @defer\");\n      }\n\n      if (isSubscription) {\n        acceptHeader +=\n          \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n      } else if (hasDefer) {\n        acceptHeader += \"deferSpec=20220824,application/json\";\n      }\n      options.headers.accept = acceptHeader;\n    }\n\n    if (options.method === \"GET\") {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, \"Payload\");\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable((observer) => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      const observerNext = observer.next.bind(observer);\n      currentFetch!(chosenURI, options)\n        .then((response) => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get(\"content-type\");\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observerNext);\n          } else {\n            return parseAndCheckHttpResponse(operation)(response).then(\n              observerNext\n            );\n          }\n        })\n        .then(() => {\n          controller = undefined;\n          observer.complete();\n        })\n        .catch((err) => {\n          controller = undefined;\n          handleError(err, observer);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}