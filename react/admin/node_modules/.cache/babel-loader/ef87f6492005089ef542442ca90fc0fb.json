{"ast":null,"code":"// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null); // Useful for processing arguments objects as well as arrays.\n\n\nconst {\n  forEach,\n  slice\n} = Array.prototype;\nconst {\n  hasOwnProperty\n} = Object.prototype;\nexport class Trie {\n  constructor() {\n    let weakness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let makeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMakeData;\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n\n  lookup() {\n    for (var _len = arguments.length, array = new Array(_len), _key = 0; _key < _len; _key++) {\n      array[_key] = arguments[_key];\n    }\n\n    return this.lookupArray(array);\n  }\n\n  lookupArray(array) {\n    let node = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\") ? node.data : node.data = this.makeData(slice.call(array));\n  }\n\n  peek() {\n    for (var _len2 = arguments.length, array = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      array[_key2] = arguments[_key2];\n    }\n\n    return this.peekArray(array);\n  }\n\n  peekArray(array) {\n    let node = this;\n\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n      node = map && map.get(array[i]);\n    }\n\n    return node && node.data;\n  }\n\n  getChildTrie(key) {\n    const map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n    return child;\n  }\n\n}\n\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n\n    case \"function\":\n      return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,MAAMA,eAAe,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B,C,CAEA;;;AACA,MAAM;EAAEC,OAAF;EAAWC;AAAX,IAAqBC,KAAK,CAACC,SAAjC;AACA,MAAM;EAAEC;AAAF,IAAqBN,MAAM,CAACK,SAAlC;AAEA,OAAM,MAAOE,IAAP,CAAW;EAQfC,cAE4D;IAAA,IADlDC,QACkD,uEADvC,IACuC;IAAA,IAAlDC,QAAkD,uEAAfX,eAAe;IADlD;IACA;EACN;;EAEGY,MAAM,GAA6B;IAAA,kCAARC,KAAQ;MAARA,KAAQ;IAAA;;IACxC,OAAO,KAAKC,WAAL,CAAiBD,KAAjB,CAAP;EACD;;EAEMC,WAAW,CAA+BD,KAA/B,EAAuC;IACvD,IAAIE,IAAI,GAAe,IAAvB;IACAZ,OAAO,CAACa,IAAR,CAAaH,KAAb,EAAoBI,GAAG,IAAIF,IAAI,GAAGA,IAAI,CAACG,YAAL,CAAkBD,GAAlB,CAAlC;IACA,OAAOV,cAAc,CAACS,IAAf,CAAoBD,IAApB,EAA0B,MAA1B,IACHA,IAAI,CAACI,IADF,GAEHJ,IAAI,CAACI,IAAL,GAAY,KAAKR,QAAL,CAAcP,KAAK,CAACY,IAAN,CAAWH,KAAX,CAAd,CAFhB;EAGD;;EAEMO,IAAI,GAA6B;IAAA,mCAARP,KAAQ;MAARA,KAAQ;IAAA;;IACtC,OAAO,KAAKQ,SAAL,CAAeR,KAAf,CAAP;EACD;;EAEMQ,SAAS,CAA+BR,KAA/B,EAAuC;IACrD,IAAIE,IAAI,GAA2B,IAAnC;;IAEA,KAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGV,KAAK,CAACW,MAA5B,EAAoCT,IAAI,IAAIO,CAAC,GAAGC,GAAhD,EAAqD,EAAED,CAAvD,EAA0D;MACxD,MAAMG,GAAG,GACP,KAAKf,QAAL,IAAiBgB,QAAQ,CAACb,KAAK,CAACS,CAAD,CAAN,CAAzB,GAAsCP,IAAI,CAACY,IAA3C,GAAkDZ,IAAI,CAACa,MADzD;MAGAb,IAAI,GAAGU,GAAG,IAAIA,GAAG,CAACI,GAAJ,CAAQhB,KAAK,CAACS,CAAD,CAAb,CAAd;IACD;;IAED,OAAOP,IAAI,IAAIA,IAAI,CAACI,IAApB;EACD;;EAEOD,YAAY,CAACD,GAAD,EAAS;IAC3B,MAAMQ,GAAG,GAAG,KAAKf,QAAL,IAAiBgB,QAAQ,CAACT,GAAD,CAAzB,GACR,KAAKU,IAAL,KAAc,KAAKA,IAAL,GAAY,IAAIG,OAAJ,EAA1B,CADQ,GAER,KAAKF,MAAL,KAAgB,KAAKA,MAAL,GAAc,IAAIG,GAAJ,EAA9B,CAFJ;IAGA,IAAIC,KAAK,GAAGP,GAAG,CAACI,GAAJ,CAAQZ,GAAR,CAAZ;IACA,IAAI,CAACe,KAAL,EAAYP,GAAG,CAACQ,GAAJ,CAAQhB,GAAR,EAAae,KAAK,GAAG,IAAIxB,IAAJ,CAAe,KAAKE,QAApB,EAA8B,KAAKC,QAAnC,CAArB;IACZ,OAAOqB,KAAP;EACD;;AAjDc;;AAoDjB,SAASN,QAAT,CAAkBQ,KAAlB,EAA4B;EAC1B,QAAQ,OAAOA,KAAf;IACA,KAAK,QAAL;MACE,IAAIA,KAAK,KAAK,IAAd,EAAoB;IACpB;;IACF,KAAK,UAAL;MACE,OAAO,IAAP;EALF;;EAOA,OAAO,KAAP;AACD","names":["defaultMakeData","Object","create","forEach","slice","Array","prototype","hasOwnProperty","Trie","constructor","weakness","makeData","lookup","array","lookupArray","node","call","key","getChildTrie","data","peek","peekArray","i","len","length","map","isObjRef","weak","strong","get","WeakMap","Map","child","set","value"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@wry/trie/src/index.ts"],"sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\")\n      ? node.data as Data\n      : node.data = this.makeData(slice.call(array));\n  }\n\n  public peek<T extends any[]>(...array: T): Data | undefined {\n    return this.peekArray(array);\n  }\n\n  public peekArray<T extends IArguments | any[]>(array: T): Data | undefined {\n    let node: Trie<Data> | undefined = this;\n\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map: Trie<Data>[\"weak\" | \"strong\"] =\n        this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n\n      node = map && map.get(array[i]);\n    }\n\n    return node && node.data;\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}