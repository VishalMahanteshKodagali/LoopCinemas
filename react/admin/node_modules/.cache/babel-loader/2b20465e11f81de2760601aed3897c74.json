{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { isNetworkRequestSettled } from \"../../core/index.js\";\nimport { createFulfilledPromise, createRejectedPromise } from \"../../utilities/index.js\";\nvar QUERY_REFERENCE_SYMBOL = Symbol();\nexport function wrapQueryRef(internalQueryRef) {\n  var _a;\n\n  return _a = {}, _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef, _a;\n}\nexport function unwrapQueryRef(queryRef) {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nvar OBSERVED_CHANGED_OPTIONS = [\"canonizeResults\", \"context\", \"errorPolicy\", \"fetchPolicy\", \"refetchWritePolicy\", \"returnPartialData\"];\n\nvar InternalQueryReference = function () {\n  function InternalQueryReference(observable, options) {\n    var _this = this;\n\n    var _a;\n\n    this.listeners = new Set();\n    this.status = \"loading\";\n    this.references = 0;\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n    this.result = observable.getCurrentResult(false);\n    this.key = options.key;\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    if (isNetworkRequestSettled(this.result.networkStatus) || this.result.data && (!this.result.partial || this.watchQueryOptions.returnPartialData)) {\n      this.promise = createFulfilledPromise(this.result);\n      this.status = \"idle\";\n    } else {\n      this.promise = new Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n      });\n    }\n\n    this.subscription = observable.filter(function (_a) {\n      var data = _a.data;\n      return !equal(data, {});\n    }).subscribe({\n      next: this.handleNext,\n      error: this.handleError\n    });\n    this.autoDisposeTimeoutId = setTimeout(this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n  }\n\n  Object.defineProperty(InternalQueryReference.prototype, \"watchQueryOptions\", {\n    get: function () {\n      return this.observable.options;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InternalQueryReference.prototype.retain = function () {\n    var _this = this;\n\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    var disposed = false;\n    return function () {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      _this.references--;\n      setTimeout(function () {\n        if (!_this.references) {\n          _this.dispose();\n        }\n      });\n    };\n  };\n\n  InternalQueryReference.prototype.didChangeOptions = function (watchQueryOptions) {\n    var _this = this;\n\n    return OBSERVED_CHANGED_OPTIONS.some(function (option) {\n      return !equal(_this.watchQueryOptions[option], watchQueryOptions[option]);\n    });\n  };\n\n  InternalQueryReference.prototype.applyOptions = function (watchQueryOptions) {\n    var _a = this.watchQueryOptions,\n        currentFetchPolicy = _a.fetchPolicy,\n        currentCanonizeResults = _a.canonizeResults;\n\n    if (currentFetchPolicy === \"standby\" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = __assign(__assign({}, this.result), this.observable.getCurrentResult());\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n\n    return this.promise;\n  };\n\n  InternalQueryReference.prototype.listen = function (listener) {\n    var _this = this;\n\n    this.listeners.add(listener);\n    return function () {\n      _this.listeners.delete(listener);\n    };\n  };\n\n  InternalQueryReference.prototype.refetch = function (variables) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  };\n\n  InternalQueryReference.prototype.fetchMore = function (options) {\n    return this.initiateFetch(this.observable.fetchMore(options));\n  };\n\n  InternalQueryReference.prototype.dispose = function () {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  };\n\n  InternalQueryReference.prototype.onDispose = function () {};\n\n  InternalQueryReference.prototype.handleNext = function (result) {\n    var _a;\n\n    switch (this.status) {\n      case \"loading\":\n        {\n          if (result.data === void 0) {\n            result.data = this.result.data;\n          }\n\n          this.status = \"idle\";\n          this.result = result;\n          (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);\n          break;\n        }\n\n      case \"idle\":\n        {\n          if (result.data === this.result.data) {\n            return;\n          }\n\n          if (result.data === void 0) {\n            result.data = this.result.data;\n          }\n\n          this.result = result;\n          this.promise = createFulfilledPromise(result);\n          this.deliver(this.promise);\n          break;\n        }\n    }\n  };\n\n  InternalQueryReference.prototype.handleError = function (error) {\n    var _a;\n\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);\n\n    switch (this.status) {\n      case \"loading\":\n        {\n          this.status = \"idle\";\n          (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n          break;\n        }\n\n      case \"idle\":\n        {\n          this.promise = createRejectedPromise(error);\n          this.deliver(this.promise);\n        }\n    }\n  };\n\n  InternalQueryReference.prototype.deliver = function (promise) {\n    this.listeners.forEach(function (listener) {\n      return listener(promise);\n    });\n  };\n\n  InternalQueryReference.prototype.initiateFetch = function (returnedPromise) {\n    var _this = this;\n\n    this.status = \"loading\";\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    this.promise.catch(function () {});\n    returnedPromise.then(function (result) {\n      var _a;\n\n      if (_this.status === \"loading\") {\n        _this.status = \"idle\";\n        _this.result = result;\n        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, result);\n      }\n    }).catch(function () {});\n    return returnedPromise;\n  };\n\n  return InternalQueryReference;\n}();\n\nexport { InternalQueryReference };","map":{"version":3,"mappings":"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","names":["equal","isNetworkRequestSettled","createFulfilledPromise","createRejectedPromise","QUERY_REFERENCE_SYMBOL","Symbol","wrapQueryRef","internalQueryRef","_a","unwrapQueryRef","queryRef","OBSERVED_CHANGED_OPTIONS","observable","options","Set","handleNext","bind","handleError","dispose","result","getCurrentResult","key","onDispose","networkStatus","data","partial","watchQueryOptions","returnPartialData","promise","status","Promise","resolve","reject","_this","subscription","filter","subscribe","next","error","autoDisposeTimeoutId","setTimeout","autoDisposeTimeoutMs","Object","InternalQueryReference","references","clearTimeout","disposed","some","option","currentFetchPolicy","currentCanonizeResults","fetchPolicy","initiateFetch","reobserve","silentSetOptions","canonizeResults","__assign","listener","listeners","add","delete","variables","refetch","fetchMore","unsubscribe","deliver","resubscribeAfterError","forEach","returnedPromise","catch","then"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/react/cache/QueryReference.ts"],"sourcesContent":["import { equal } from \"@wry/equality\";\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { isNetworkRequestSettled } from \"../../core/index.js\";\nimport type { ObservableSubscription } from \"../../utilities/index.js\";\nimport {\n  createFulfilledPromise,\n  createRejectedPromise,\n} from \"../../utilities/index.js\";\nimport type { CacheKey } from \"./types.js\";\nimport type { useBackgroundQuery, useReadQuery } from \"../hooks/index.js\";\n\ntype Listener<TData> = (promise: Promise<ApolloQueryResult<TData>>) => void;\n\ntype FetchMoreOptions<TData> = Parameters<\n  ObservableQuery<TData>[\"fetchMore\"]\n>[0];\n\nconst QUERY_REFERENCE_SYMBOL: unique symbol = Symbol();\n/**\n * A `QueryReference` is an opaque object returned by {@link useBackgroundQuery}.\n * A child component reading the `QueryReference` via {@link useReadQuery} will\n * suspend until the promise resolves.\n */\nexport interface QueryReference<TData = unknown> {\n  [QUERY_REFERENCE_SYMBOL]: InternalQueryReference<TData>;\n}\n\ninterface InternalQueryReferenceOptions {\n  key: CacheKey;\n  onDispose?: () => void;\n  autoDisposeTimeoutMs?: number;\n}\n\nexport function wrapQueryRef<TData>(\n  internalQueryRef: InternalQueryReference<TData>\n): QueryReference<TData> {\n  return { [QUERY_REFERENCE_SYMBOL]: internalQueryRef };\n}\n\nexport function unwrapQueryRef<TData>(\n  queryRef: QueryReference<TData>\n): InternalQueryReference<TData> {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\n\nconst OBSERVED_CHANGED_OPTIONS = [\n  \"canonizeResults\",\n  \"context\",\n  \"errorPolicy\",\n  \"fetchPolicy\",\n  \"refetchWritePolicy\",\n  \"returnPartialData\",\n] as const;\n\ntype ObservedOptions = Pick<\n  WatchQueryOptions,\n  (typeof OBSERVED_CHANGED_OPTIONS)[number]\n>;\n\nexport class InternalQueryReference<TData = unknown> {\n  public result: ApolloQueryResult<TData>;\n  public readonly key: CacheKey;\n  public readonly observable: ObservableQuery<TData>;\n\n  public promiseCache?: Map<CacheKey, Promise<ApolloQueryResult<TData>>>;\n  public promise: Promise<ApolloQueryResult<TData>>;\n\n  private subscription: ObservableSubscription;\n  private listeners = new Set<Listener<TData>>();\n  private autoDisposeTimeoutId: NodeJS.Timeout;\n  private status: \"idle\" | \"loading\" = \"loading\";\n\n  private resolve: ((result: ApolloQueryResult<TData>) => void) | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private references = 0;\n\n  constructor(\n    observable: ObservableQuery<TData>,\n    options: InternalQueryReferenceOptions\n  ) {\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n    // Don't save this result as last result to prevent delivery of last result\n    // when first subscribing\n    this.result = observable.getCurrentResult(false);\n    this.key = options.key;\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    if (\n      isNetworkRequestSettled(this.result.networkStatus) ||\n      (this.result.data &&\n        (!this.result.partial || this.watchQueryOptions.returnPartialData))\n    ) {\n      this.promise = createFulfilledPromise(this.result);\n      this.status = \"idle\";\n    } else {\n      this.promise = new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n    }\n\n    this.subscription = observable\n      .filter(({ data }) => !equal(data, {}))\n      .subscribe({\n        next: this.handleNext,\n        error: this.handleError,\n      });\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this queryRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    this.autoDisposeTimeoutId = setTimeout(\n      this.dispose,\n      options.autoDisposeTimeoutMs ?? 30_000\n    );\n  }\n\n  get watchQueryOptions() {\n    return this.observable.options;\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      // Wait before fully disposing in case the app is running in strict mode.\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  didChangeOptions(watchQueryOptions: ObservedOptions) {\n    return OBSERVED_CHANGED_OPTIONS.some(\n      (option) =>\n        !equal(this.watchQueryOptions[option], watchQueryOptions[option])\n    );\n  }\n\n  applyOptions(watchQueryOptions: ObservedOptions) {\n    const {\n      fetchPolicy: currentFetchPolicy,\n      canonizeResults: currentCanonizeResults,\n    } = this.watchQueryOptions;\n\n    // \"standby\" is used when `skip` is set to `true`. Detect when we've\n    // enabled the query (i.e. `skip` is `false`) to execute a network request.\n    if (\n      currentFetchPolicy === \"standby\" &&\n      currentFetchPolicy !== watchQueryOptions.fetchPolicy\n    ) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = { ...this.result, ...this.observable.getCurrentResult() };\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n\n    return this.promise;\n  }\n\n  listen(listener: Listener<TData>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  refetch(variables: OperationVariables | undefined) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  }\n\n  fetchMore(options: FetchMoreOptions<TData>) {\n    return this.initiateFetch(this.observable.fetchMore<TData>(options));\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private handleNext(result: ApolloQueryResult<TData>) {\n    switch (this.status) {\n      case \"loading\": {\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n        this.status = \"idle\";\n        this.result = result;\n        this.resolve?.(result);\n        break;\n      }\n      case \"idle\": {\n        // This occurs when switching to a result that is fully cached when this\n        // class is instantiated. ObservableQuery will run reobserve when\n        // subscribing, which delivers a result from the cache.\n        if (result.data === this.result.data) {\n          return;\n        }\n\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n\n        this.result = result;\n        this.promise = createFulfilledPromise(result);\n        this.deliver(this.promise);\n        break;\n      }\n    }\n  }\n\n  private handleError(error: ApolloError) {\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(\n      this.handleNext,\n      this.handleError\n    );\n\n    switch (this.status) {\n      case \"loading\": {\n        this.status = \"idle\";\n        this.reject?.(error);\n        break;\n      }\n      case \"idle\": {\n        this.promise = createRejectedPromise(error);\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private deliver(promise: Promise<ApolloQueryResult<TData>>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private initiateFetch(returnedPromise: Promise<ApolloQueryResult<TData>>) {\n    this.status = \"loading\";\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n\n    this.promise.catch(() => {});\n\n    // If the data returned from the fetch is deeply equal to the data already\n    // in the cache, `handleNext` will not be triggered leaving the promise we\n    // created in a pending state forever. To avoid this situtation, we attempt\n    // to resolve the promise if `handleNext` hasn't been run to ensure the\n    // promise is resolved correctly.\n    returnedPromise\n      .then((result) => {\n        if (this.status === \"loading\") {\n          this.status = \"idle\";\n          this.result = result;\n          this.resolve?.(result);\n        }\n      })\n      .catch(() => {});\n\n    return returnedPromise;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}