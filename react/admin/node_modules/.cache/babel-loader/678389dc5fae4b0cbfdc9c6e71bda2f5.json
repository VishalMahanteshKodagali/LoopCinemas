{"ast":null,"code":"import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\n\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n\n    if (isTerminating(firstLink)) {\n      globalThis.__DEV__ !== false && invariant.warn(33, firstLink);\n      return firstLink;\n    }\n\n    var nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw newInvariantError(34);\n  };\n\n  ApolloLink.prototype.onError = function (error, observer) {\n    if (observer && observer.error) {\n      observer.error(error);\n      return false;\n    }\n\n    throw error;\n  };\n\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n\n  return ApolloLink;\n}();\n\nexport { ApolloLink };","map":{"version":3,"mappings":"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","names":["newInvariantError","invariant","Observable","validateOperation","createOperation","transformOperation","passthrough","op","forward","of","toLink","handler","ApolloLink","isTerminating","link","request","length","links","empty","map","reduce","x","y","concat","test","left","right","leftLink","rightLink","operation","context","first","second","firstLink","globalThis","nextLink","split","next","error","observer","fn","onError"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/link/core/ApolloLink.ts"],"sourcesContent":["import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\n\nimport type { Observer } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest,\n} from \"./types.js\";\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from \"../utils/index.js\";\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink((operation) => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation))\n        )\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        `You are calling concat on a terminating link, which will have no effect %o`,\n        firstLink\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        (operation) =>\n          firstLink.request(\n            operation,\n            (op) => nextLink.request(op) || Observable.of()\n          ) || Observable.of()\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, (op) => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink\n  ): Observable<FetchResult> | null {\n    throw newInvariantError(\"request is not implemented\");\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}