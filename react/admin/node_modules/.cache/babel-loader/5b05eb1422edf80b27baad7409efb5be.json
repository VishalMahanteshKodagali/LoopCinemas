{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\n\nfunction lookupSpecifierInfo(spec) {\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function (from, key) {\n      return context.readField(key, from);\n    };\n\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n\n      invariant(extracted !== void 0, 2, schemaKeyPath.join(\".\"), object);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n        variables = _a.variables,\n        fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n        }\n\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n\n    var toMerge = extractor(path);\n\n    if (toMerge !== void 0) {\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n\n      collected = merger.merge(collected, toMerge);\n    }\n\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths;\n}\n\nfunction extractKey(object, key) {\n  return object[key];\n}\n\nexport function extractKeyPath(object, path, extract) {\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\n\nfunction normalize(value) {\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n\n  return value;\n}","map":{"version":3,"mappings":"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","names":["invariant","argumentsObjectFromField","DeepMerger","isNonEmptyArray","isNonNullObject","hasOwn","isArray","specifierInfoCache","Object","create","lookupSpecifierInfo","spec","cacheKey","JSON","stringify","keyFieldsFnFromSpecifier","specifier","info","keyFieldsFn","extract","from","key","context","keyObject","schemaKeyPath","extracted","object","storeObject","extractKeyPath","extractKey","field","_a","variables","fieldName","collected","keyPath","firstChar","firstKey","charAt","slice","d","find","directiveArgs","variableName","varKeyPath","args","suffix","merger","getSpecifierPaths","reduce","toMerge","i","path","length","paths_1","currentPath_1","s","forEach","push","normalize","reducer","obj","child","value","map","collectSpecifierPaths"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/cache/inmemory/key-extractor.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities/index.js\";\n\nimport { hasOwn, isArray } from \"./helpers.js\";\nimport type {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies.js\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<\n  string,\n  {\n    paths?: string[][];\n    keyFieldsFn?: KeyFieldsFunction;\n    keyArgsFn?: KeyArgsFunction;\n  }\n> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return (\n    specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null))\n  );\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyFieldsFn ||\n    (info.keyFieldsFn = (object, context) => {\n      const extract: typeof extractKey = (from, key) =>\n        context.readField(key, from);\n\n      const keyObject = (context.keyObject = collectSpecifierPaths(\n        specifier,\n        (schemaKeyPath) => {\n          let extracted = extractKeyPath(\n            context.storeObject,\n            schemaKeyPath,\n            // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract\n          );\n\n          if (\n            extracted === void 0 &&\n            object !== context.storeObject &&\n            hasOwn.call(object, schemaKeyPath[0])\n          ) {\n            // If context.storeObject fails to provide a value for the requested\n            // path, fall back to the raw result object, if it has a top-level key\n            // matching the first key in the path (schemaKeyPath[0]). This allows\n            // key fields included in the written data to be saved in the cache\n            // even if they are not selected explicitly in context.selectionSet.\n            // Not being mentioned by context.selectionSet is convenient here,\n            // since it means these extra fields cannot be affected by field\n            // aliasing, which is why we can use extractKey instead of\n            // context.readField for this extraction.\n            extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n          }\n\n          invariant(\n            extracted !== void 0,\n            `Missing field '%s' while extracting keyFields from %s`,\n            schemaKeyPath.join(\".\"),\n            object\n          );\n\n          return extracted;\n        }\n      ));\n\n      return `${context.typename}:${JSON.stringify(keyObject)}`;\n    })\n  );\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyArgsFn ||\n    (info.keyArgsFn = (args, { field, variables, fieldName }) => {\n      const collected = collectSpecifierPaths(specifier, (keyPath) => {\n        const firstKey = keyPath[0];\n        const firstChar = firstKey.charAt(0);\n\n        if (firstChar === \"@\") {\n          if (field && isNonEmptyArray(field.directives)) {\n            const directiveName = firstKey.slice(1);\n            // If the directive appears multiple times, only the first\n            // occurrence's arguments will be used. TODO Allow repetition?\n            // TODO Cache this work somehow, a la aliasMap?\n            const d = field.directives.find(\n              (d) => d.name.value === directiveName\n            );\n            // Fortunately argumentsObjectFromField works for DirectiveNode!\n            const directiveArgs = d && argumentsObjectFromField(d, variables);\n            // For directives without arguments (d defined, but directiveArgs ===\n            // null), the presence or absence of the directive still counts as\n            // part of the field key, so we return null in those cases. If no\n            // directive with this name was found for this field (d undefined and\n            // thus directiveArgs undefined), we return undefined, which causes\n            // this value to be omitted from the key object returned by\n            // collectSpecifierPaths.\n            return (\n              directiveArgs &&\n              extractKeyPath(\n                directiveArgs,\n                // If keyPath.length === 1, this code calls extractKeyPath with an\n                // empty path, which works because it uses directiveArgs as the\n                // extracted value.\n                keyPath.slice(1)\n              )\n            );\n          }\n          // If the key started with @ but there was no corresponding directive,\n          // we want to omit this value from the key object, not fall through to\n          // treating @whatever as a normal argument name.\n          return;\n        }\n\n        if (firstChar === \"$\") {\n          const variableName = firstKey.slice(1);\n          if (variables && hasOwn.call(variables, variableName)) {\n            const varKeyPath = keyPath.slice(0);\n            varKeyPath[0] = variableName;\n            return extractKeyPath(variables, varKeyPath);\n          }\n          // If the key started with $ but there was no corresponding variable, we\n          // want to omit this value from the key object, not fall through to\n          // treating $whatever as a normal argument name.\n          return;\n        }\n\n        if (args) {\n          return extractKeyPath(args, keyPath);\n        }\n      });\n\n      const suffix = JSON.stringify(collected);\n\n      // If no arguments were passed to this field, and it didn't have any other\n      // field key contributions from directives or variables, hide the empty\n      // :{} suffix from the field key. However, a field passed no arguments can\n      // still end up with a non-empty :{...} suffix if its key configuration\n      // refers to directives or variables.\n      if (args || suffix !== \"{}\") {\n        fieldName += \":\" + suffix;\n      }\n\n      return fieldName;\n    })\n  );\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = (info.paths = []);\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach((p) => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<TObj extends Record<string, any>, TKey extends string>(\n  object: TObj,\n  key: TKey\n): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(\n    path.reduce(function reducer(obj, key): any {\n      return isArray(obj)\n        ? obj.map((child) => reducer(child, key))\n        : obj && extract!(obj, key);\n    }, object)\n  );\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), (path) =>\n      extractKeyPath(value, path)\n    ) as T;\n  }\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}