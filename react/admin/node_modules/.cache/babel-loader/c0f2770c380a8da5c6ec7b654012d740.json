{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign,\n    hasOwnProperty = Object.hasOwnProperty;\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        queryInfo = _a.queryInfo,\n        options = _a.options;\n\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n\n      var first = !_this.observers.size;\n\n      _this.observers.add(observer);\n\n      var last = _this.last;\n\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n\n    var _b = queryManager.defaultOptions.watchQuery,\n        _c = _b === void 0 ? {} : _b,\n        _d = _c.fetchPolicy,\n        defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n\n    var _e = options.fetchPolicy,\n        fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n        _f = options.initialFetchPolicy,\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function () {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n\n    var _a = this.options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n\n    if (skipCacheDataFor(fetchPolicy) || this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {} else if (this.waitForOwnResult) {\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      var diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n\n      if (diff.complete) {\n        delete result.partial;\n\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n\n    var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !equalByQuery(this.query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(18, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId();\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        globalThis.__DEV__ !== false && invariant.error(19, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n          fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n          _b = options.initialFetchPolicy,\n          initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  };\n\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n  };\n\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    var _a = this,\n        pollingInfo = _a.pollingInfo,\n        pollInterval = _a.options.pollInterval;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(pollInterval, 20);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    var poll = function () {\n      var info = _this.pollingInfo;\n\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var error = this.getLastError();\n\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      this.updatePolling();\n\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n\n    var finishWaitingForOwnResult = function () {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n\n    var variables = options.variables && __assign({}, options.variables);\n\n    var _a = this.fetch(options, newNetworkStatus, query),\n        concast = _a.concast,\n        fromLink = _a.fromLink;\n\n    var observer = {\n      next: function (result) {\n        finishWaitingForOwnResult();\n\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        finishWaitingForOwnResult();\n\n        _this.reportError(error, variables);\n      }\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n    return concast;\n  };\n\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n\n  ObservableQuery.prototype.resubscribeAfterError = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var last = this.last;\n    this.resetLastResults();\n    var subscription = this.subscribe.apply(this, args);\n    this.last = last;\n    return subscription;\n  };\n\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    var isDifferent = this.isDifferentFromLastResult(result, variables);\n\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  };\n\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, \"error\", this.last.error = error);\n  };\n\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n      fetchPolicy = _a.fetchPolicy,\n      nextFetchPolicy = _a.nextFetchPolicy;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function () {\n        this.nextFetchPolicy = nextFetchPolicy;\n\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n\n        return fetchPolicy;\n      }\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(21, error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(22, missing);\n  }\n}\n\nfunction skipCacheDataFor(fetchPolicy) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"mappings":"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","names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","fixObservableSubclass","getQueryDefinition","equalByQuery","Object","hasOwnProperty","__extends","_a","queryManager","queryInfo","options","_super","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","_this","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","defaultOptions","watchQuery","_b","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","__assign","queryId","generateQueryId","opDef","query","queryName","name","value","ObservableQuery","lastQuery","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","getDocumentInfo","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","globalThis","partialRefetch","logMissingFieldErrors","missing","updateLastResult","newResult","resultIsDifferent","hasNonreactiveDirective","key","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","__DEV__","queryDef","vars","variableDefinitions","some","v","variable","combinedOptions","fetchMoreOptions","transformDocument","originalNetworkStatus","observe","updatedQuerySet","qid","then","cache","previous","fetchMoreResult","onWatchUpdated","watch","finally","reobserveCacheFirst","subscribeToMore","startGraphQLSubscription","subscriptionData","updateQuery","subscriptions","setOptions","newOptions","mergedOptions","prototype","setVariables","optimistic","mapFn","updatePolling","nextFetchPolicy","reason","observable","newNetworkStatus","setObservableQuery","ssrMode","pollingInfo","clearTimeout","interval","poll","info","getLastError","assumeImmutableResults","reobserveAsConcast","useDisposableConcast","oldVariables","assign","finishWaitingForOwnResult","concast","fetch","fromLink","reportResult","promise","args","_i","arguments","apply","getCurrentResult","lastError","isDifferent","reportError","errors","errorResult","hasObservers","removeObserver","stopPolling","forEach","clear","obsQuery"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription,\n} from \"../utilities/index.js\";\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from \"../utilities/index.js\";\nimport type { ApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport type { QueryInfo } from \"./QueryInfo.js\";\nimport type { MissingFieldError } from \"../cache/index.js\";\nimport type { MissingTree } from \"../cache/core/types/common.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\n\nconst { assign, hasOwnProperty } = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables,\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    }\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\"\n        ? defaultFetchPolicy\n        : fetchPolicy,\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const resultIsDifferent = this.queryManager.getDocumentInfo(this.query)\n      .hasNonreactiveDirective\n      ? !equalByQuery(this.query, this.last.result, newResult, this.variables)\n      : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent || (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(\n    variablesMustMatch?: boolean\n  ): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n      updateQuery?: (\n        previousQueryResult: TData,\n        options: {\n          fetchMoreResult: TFetchData;\n          variables: TFetchVars;\n        }\n      ) => TData;\n    }\n  ): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query\n        ? fetchMoreOptions\n        : {\n            ...this.options,\n            query: this.options.query,\n            ...fetchMoreOptions,\n            variables: {\n              ...this.options.variables,\n              ...fetchMoreOptions.variables,\n            },\n          }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery = fetchMoreOptions.query\n      ? this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager\n      .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        this.queryManager.removeQuery(qid);\n\n        if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n          queryInfo.networkStatus = originalNetworkStatus;\n        }\n\n        // Performing this cache update inside a cache.batch transaction ensures\n        // any affected cache.watch watchers are notified at most once about any\n        // updates. Most watchers will be using the QueryInfo class, which\n        // responds to notifications by calling reobserveCacheFirst to deliver\n        // fetchMore cache results back to this ObservableQuery.\n        this.queryManager.cache.batch({\n          update: (cache) => {\n            const { updateQuery } = fetchMoreOptions;\n            if (updateQuery) {\n              cache.updateQuery(\n                {\n                  query: this.query,\n                  variables: this.variables,\n                  returnPartialData: true,\n                  optimistic: false,\n                },\n                (previous) =>\n                  updateQuery(previous!, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables as TFetchVars,\n                  })\n              );\n            } else {\n              // If we're using a field policy instead of updateQuery, the only\n              // thing we need to do is write the new data to the cache using\n              // combinedOptions.variables (instead of this.variables, which is\n              // what this.updateQuery uses, because it works by abusing the\n              // original field value, keyed by the original variables).\n              cache.writeQuery({\n                query: combinedOptions.query,\n                variables: combinedOptions.variables,\n                data: fetchMoreResult.data,\n              });\n            }\n          },\n\n          onWatchUpdated: (watch) => {\n            // Record the DocumentNode associated with any watched query whose\n            // data were updated by the cache writes above.\n            updatedQuerySet.add(watch.query);\n          },\n        });\n\n        return fetchMoreResult;\n      })\n      .finally(() => {\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (!updatedQuerySet.has(this.query)) {\n          reobserveCacheFirst(this);\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                })\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error(\"Unhandled GraphQL subscription error\", err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      NetworkStatus.setVariables\n    );\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">\n    ) => TData\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n    query?: DocumentNode\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](\n      this.queryId,\n      options,\n      newNetworkStatus,\n      query\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { pollInterval },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      \"Attempted to start a polling query without a polling interval.\"\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\"\n                  ? \"no-cache\"\n                  : \"network-only\",\n            },\n            NetworkStatus.poll\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return (this.last = {\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    });\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus, query);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result) => {\n        finishWaitingForOwnResult();\n        this.reportResult(result, variables);\n      },\n      error: (error) => {\n        finishWaitingForOwnResult();\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  }\n\n  public resubscribeAfterError(\n    onNext: (value: ApolloQueryResult<TData>) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(\n    observer: Observer<ApolloQueryResult<TData>>\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(...args: [any, any?, any?]) {\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    const last = this.last;\n    this.resetLastResults();\n\n    const subscription = this.subscribe(...args);\n    this.last = last;\n\n    return subscription;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  }\n\n  private reportError(error: ApolloError, variables: TVariables | undefined) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, \"error\", (this.last!.error = error));\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error(\"Unhandled error\", error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(\n  fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */\n) {\n  return (\n    fetchPolicy === \"network-only\" ||\n    fetchPolicy === \"no-cache\" ||\n    fetchPolicy === \"standby\"\n  );\n}\n"]},"metadata":{},"sourceType":"module"}