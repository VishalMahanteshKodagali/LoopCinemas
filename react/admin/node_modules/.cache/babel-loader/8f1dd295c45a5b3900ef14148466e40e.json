{"ast":null,"code":"function defaultDispose() {}\n\nexport class Cache {\n  constructor() {\n    let max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    let dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  has(key) {\n    return this.map.has(key);\n  }\n\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  getNode(key) {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  set(key, value) {\n    let node = this.getNode(key);\n\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  }\n\n  clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  delete(key) {\n    const node = this.map.get(key);\n\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defaultDispose","Cache","constructor","max","Infinity","dispose","Map","has","key","map","get","node","getNode","value","newest","older","newer","oldest","set","clean","size","delete"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/optimism/src/cache.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}