{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport \"./fixPolyfills.js\";\nimport { wrap } from \"optimism\";\nimport { equal } from \"@wry/equality\";\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference, DocumentTransform } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\n\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n    _this.assumeImmutableResults = true;\n    _this.makeVar = makeVar;\n    _this.txCount = 0;\n    _this.config = normalizeConfig(config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n\n    _this.init();\n\n    return _this;\n  }\n\n  InMemoryCache.prototype.init = function () {\n    var rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  };\n\n  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n    var _this = this;\n\n    var previousReader = this.storeReader;\n    var fragments = this.config.fragments;\n    this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n      cache: this,\n      addTypename: this.addTypename,\n      resultCacheMaxSize: this.config.resultCacheMaxSize,\n      canonizeResults: shouldCanonizeResults(this.config),\n      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n      fragments: fragments\n    }), fragments);\n    this.maybeBroadcastWatch = wrap(function (c, options) {\n      return _this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n              id = c.id,\n              variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, canonicalStringify({\n            optimistic: optimistic,\n            id: id,\n            variables: variables\n          }));\n        }\n      }\n    });\n    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n      return group.resetCaching();\n    });\n  };\n\n  InMemoryCache.prototype.restore = function (data) {\n    this.init();\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    var _a = options.returnPartialData,\n        returnPartialData = _a === void 0 ? false : _a;\n\n    try {\n      return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData: returnPartialData\n      })).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        return null;\n      }\n\n      throw e;\n    }\n  };\n\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n\n    var store = options.optimistic ? this.optimisticData : this.data;\n\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    }));\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    if (!this.watches.size) {\n      recallCache(this);\n    }\n\n    this.watches.add(watch);\n\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n\n    return function () {\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        forgetCache(_this);\n      }\n\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n\n  InMemoryCache.prototype.gc = function (options) {\n    canonicalStringify.reset();\n    var ids = this.optimisticData.gc();\n\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n\n    return ids;\n  };\n\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n\n  InMemoryCache.prototype.identify = function (object) {\n    if (isReference(object)) return object.__ref;\n\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      globalThis.__DEV__ !== false && invariant.warn(e);\n    }\n  };\n\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        return false;\n      }\n\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.reset = function (options) {\n    var _this = this;\n\n    this.init();\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      this.watches.forEach(function (watch) {\n        return _this.maybeBroadcastWatch.forget(watch);\n      });\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var update = options.update,\n        _a = options.optimistic,\n        optimistic = _a === void 0 ? true : _a,\n        removeOptimistic = options.removeOptimistic,\n        onWatchUpdated = options.onWatchUpdated;\n    var updateResult;\n\n    var perform = function (layer) {\n      var _a = _this,\n          data = _a.data,\n          optimisticData = _a.optimisticData;\n      ++_this.txCount;\n\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n\n      try {\n        return updateResult = update(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n\n    var alreadyDirty = new Set();\n\n    if (onWatchUpdated && !this.txCount) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      }));\n    }\n\n    if (typeof optimistic === \"string\") {\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      perform(this.data);\n    } else {\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch, diff) {\n          var result = onWatchUpdated.call(this, watch, diff);\n\n          if (result !== false) {\n            alreadyDirty.delete(watch);\n          }\n\n          return result;\n        }\n      }));\n\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(function (watch) {\n          return _this.maybeBroadcastWatch.dirty(watch);\n        });\n      }\n    } else {\n      this.broadcastWatches(options);\n    }\n\n    return updateResult;\n  };\n\n  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n    return this.batch({\n      update: update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function (options) {\n    var _this = this;\n\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, options);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.addFragmentsToDocument = function (document) {\n    var fragments = this.config.fragments;\n    return fragments ? fragments.transform(document) : document;\n  };\n\n  InMemoryCache.prototype.addTypenameToDocument = function (document) {\n    if (this.addTypename) {\n      return this.addTypenameTransform.transformDocument(document);\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatch = function (c, options) {\n    var lastDiff = c.lastDiff;\n    var diff = this.diff(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { InMemoryCache };","map":{"version":3,"mappings":"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","names":["invariant","wrap","equal","ApolloCache","MissingFieldError","addTypenameToDocument","isReference","DocumentTransform","StoreReader","StoreWriter","EntityStore","supportsResultCaching","makeVar","forgetCache","recallCache","Policies","hasOwn","normalizeConfig","shouldCanonizeResults","canonicalStringify","__extends","config","_super","_this","Set","addTypename","policies","cache","dataIdFromObject","possibleTypes","typePolicies","init","InMemoryCache","rootStore","data","Root","resultCaching","optimisticData","stump","resetResultCache","resetResultIdentities","previousReader","storeReader","fragments","storeWriter","resultCacheMaxSize","canonizeResults","canon","maybeBroadcastWatch","c","options","broadcastWatch","max","makeCacheKey","store","optimistic","id","variables","query","callback","group","forEach","resetCaching","replace","extract","_a","diffQueryAgainstStore","__assign","returnPartialData","result","e","txCount","writeToStore","broadcast","broadcastWatches","call","modify","fields","rootId","watch","watches","size","add","immediate","delete","forget","reset","ids","gc","resetCanon","retain","release","object","__ref","identify","globalThis","evict","discardWatches","clear","Promise","resolve","idToRemove","newOptimisticData","removeLayer","removeOptimistic","onWatchUpdated","updateResult","perform","layer","update","alreadyDirty","addLayer","diff","dirty","optimisticId","batch","document","addFragmentsToDocument","transform","addTypenameTransform","transformDocument","fromOptimisticTransaction","lastDiff"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport \"./fixPolyfills.js\";\n\nimport type { DocumentNode } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\nimport { equal } from \"@wry/equality\";\n\nimport { ApolloCache } from \"../core/cache.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport type { StoreObject, Reference } from \"../../utilities/index.js\";\nimport {\n  addTypenameToDocument,\n  isReference,\n  DocumentTransform,\n} from \"../../utilities/index.js\";\nimport type { InMemoryCacheConfig, NormalizedCacheObject } from \"./types.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  \"optimistic\" | \"onWatchUpdated\"\n>;\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n  private addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n\n  private maybeBroadcastWatch: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]\n  >;\n\n  // Override the default value, since InMemoryCache result objects are frozen\n  // in development and expected to remain logically immutable in production.\n  public readonly assumeImmutableResults = true;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = (this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    }));\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n    const { fragments } = this.config;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      (this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon: resetResultIdentities\n          ? void 0\n          : previousReader && previousReader.canon,\n        fragments,\n      })),\n      fragments\n    );\n\n    this.maybeBroadcastWatch = wrap(\n      (c: Cache.WatchOptions, options?: BroadcastOptions) => {\n        return this.broadcastWatch(c, options);\n      },\n      {\n        max: this.config.resultCacheMaxSize,\n        makeCacheKey: (c: Cache.WatchOptions) => {\n          // Return a cache key (thus enabling result caching) only if we're\n          // currently using a data store that can track cache dependencies.\n          const store = c.optimistic ? this.optimisticData : this.data;\n          if (supportsResultCaching(store)) {\n            const { optimistic, id, variables } = c;\n            return store.makeCacheKey(\n              c.query,\n              // Different watches can have the same query, optimistic\n              // status, rootId, and variables, but if their callbacks are\n              // different, the (identical) result needs to be delivered to\n              // each distinct callback. The easiest way to achieve that\n              // separation is to include c.callback in the cache key for\n              // maybeBroadcastWatch calls. See issue #5733.\n              c.callback,\n              canonicalStringify({ optimistic, id, variables })\n            );\n          }\n        },\n      }\n    );\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach((group) =>\n      group.resetCaching()\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return (\n        this.storeReader.diffQueryAgainstStore<T>({\n          ...options,\n          store: options.optimistic ? this.optimisticData : this.data,\n          config: this.config,\n          returnPartialData,\n        }).result || null\n      );\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not need to\n        // worry about catching \"normal\" exceptions resulting from incomplete\n        // cache data. Unexpected errors will be re-thrown. If you need more\n        // information about which fields were missing, use cache.diff instead,\n        // and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables extends OperationVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach((watch) => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return (updateResult = update(this));\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        },\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach((watch) => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || optimisticId !== null,\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach((c) => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  private addFragmentsToDocument(document: DocumentNode) {\n    const { fragments } = this.config;\n    return fragments ? fragments.transform(document) : document;\n  }\n\n  private addTypenameToDocument(document: DocumentNode) {\n    if (this.addTypename) {\n      return this.addTypenameTransform.transformDocument(document);\n    }\n    return document;\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(c: Cache.WatchOptions, options?: BroadcastOptions) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (\n        options.onWatchUpdated &&\n        options.onWatchUpdated.call(this, c, diff, lastDiff) === false\n      ) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback((c.lastDiff = diff), lastDiff);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}