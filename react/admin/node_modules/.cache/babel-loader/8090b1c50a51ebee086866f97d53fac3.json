{"ast":null,"code":"export function iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}","map":{"version":3,"mappings":"AAEA,OAAM,SAAUA,sBAAV,CACJC,SADI,EAEJC,MAFI,EAGJC,QAHI,EAGQ;EAKZ,IAAMC,mBAAmB,GAAkB,EAA3C;EACAH,SAAS,CAACI,OAAV,CAAkB,UAACC,GAAD,EAAI;IAAK,UAAG,CAACJ,MAAD,CAAH,IAAeE,mBAAmB,CAACG,IAApB,CAAyBD,GAAzB,CAAf;EAA4C,CAAvE;EACAF,mBAAmB,CAACC,OAApB,CAA4B,UAACC,GAAD,EAAI;IAAK,OAACA,GAAW,CAACJ,MAAD,CAAX,CAAoBC,QAApB,CAAD;EAA8B,CAAnE;AACD","names":["iterateObserversSafely","observers","method","argument","observersWithMethod","forEach","obs","push"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/admin/node_modules/@apollo/src/utilities/observables/iteration.ts"],"sourcesContent":["import type { Observer } from \"./Observable.js\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach((obs) => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach((obs) => (obs as any)[method](argument));\n}\n"]},"metadata":{},"sourceType":"module"}