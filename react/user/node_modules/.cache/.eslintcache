[{"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/index.js":"1","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/App.js":"2","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/data/repository.js":"3","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Login.js":"4","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Home.js":"5","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Reviews.js":"6","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/MyProfile.js":"7","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/fragments/Footer.js":"8","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/fragments/Navbar.js":"9","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Signup.js":"10","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Booking.js":"11","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/BookTickets.js":"12","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/EditReviewForm.js":"13","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/MyBookedTickets.js":"14","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/UpcomingMovies.js":"15","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/Review.js":"16","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/MovieItem.js":"17"},{"size":367,"mtime":1697423251516,"results":"18","hashOfConfig":"19"},{"size":1853,"mtime":1697423251514,"results":"20","hashOfConfig":"19"},{"size":6681,"mtime":1697693630017,"results":"21","hashOfConfig":"19"},{"size":2789,"mtime":1697693630017,"results":"22","hashOfConfig":"19"},{"size":913,"mtime":1697423251516,"results":"23","hashOfConfig":"19"},{"size":2927,"mtime":1697423251516,"results":"24","hashOfConfig":"19"},{"size":5925,"mtime":1698151431976,"results":"25","hashOfConfig":"19"},{"size":242,"mtime":1697423251516,"results":"26","hashOfConfig":"19"},{"size":2019,"mtime":1697423251516,"results":"27","hashOfConfig":"19"},{"size":5385,"mtime":1697700175018,"results":"28","hashOfConfig":"19"},{"size":1566,"mtime":1697423251516,"results":"29","hashOfConfig":"19"},{"size":3841,"mtime":1697423251515,"results":"30","hashOfConfig":"19"},{"size":2541,"mtime":1697423251515,"results":"31","hashOfConfig":"19"},{"size":2146,"mtime":1697423251515,"results":"32","hashOfConfig":"19"},{"size":4623,"mtime":1697693630017,"results":"33","hashOfConfig":"19"},{"size":2084,"mtime":1697423251515,"results":"34","hashOfConfig":"19"},{"size":232,"mtime":1697700175018,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12s6f20",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/index.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/App.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/data/repository.js",["95","96"],[],"import axios from \"axios\";\nconst API_HOST = \"http://localhost:4000/api\";\n\n\nconst USERS_KEY = \"users\";\nconst USER_KEY = \"user\";\nconst USER_DETAILS_KEY = \"userDetails\";\nconst MOVIE_REVIEWS = \"movieReviews\";\n\nconst movies = [\n  { title: \"Gran Turismo\", sessionTime: \"10:00 AM, 2:00 PM\" , image:\"./gran_card.png\", corouselImage:\"./gran.png\"},\n  { title: \"Blue Beetle\", sessionTime: \"11:00 AM, 3:00 PM\" ,image:\"./blue_card.png\", corouselImage:\"./blue.png\" },\n  { title: \"Oppenheimer\", sessionTime: \"12:00 PM, 4:00 PM\" ,image:\"./oppenheimer_card.png\", corouselImage:\"./oppenheimer.png\" },\n]\nconst movieRatings = [\n  {\n    movieReviewId: 1,\n    movieTitle: \"Gran Turismo\",\n    rating: 4,\n    comments: \"Great movie, loved it!\",\n    userId: 1,\n  },\n  {\n    movieReviewId: 2,\n    movieTitle: \"Blue Beetle\",\n    rating: 1,\n    comments: \"One of the best movies I've seen!\",\n    userId: 1,\n  },\n  {\n    movieReviewId: 3,\n    movieTitle: \"Oppenheimer\",\n    rating: 5,\n    comments: \"One of the best movies I've seen!\",\n    userId: 1,\n  },\n]\n// Check if data is already initialized before proceeding with initialization\nfunction initializeLocalStorage() {\n  if (!localStorage.getItem(USERS_KEY)) {\n    const users = [\n      {\n        username: \"mbolger\",\n        password: \"abc123\"\n      },\n      {\n        username: \"shekhar\",\n        password: \"def456\"\n      }\n    ];\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  }\n\n  if (!localStorage.getItem(MOVIE_REVIEWS)) {\n    // Assume movieRatings is already defined\n    localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(movieRatings));\n  }\n  if (!localStorage.getItem('userReviewCount')) {\n    // Assume movieRatings is already defined\n  }\n  \n}\n\n\nasync function getUsers() {\n  try {\n    const response = await axios.get(`${API_HOST}/users`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }\n}\nfunction getMovies() {\n  return movies;\n  /*try {\n    const response = await axios.get(`${API_HOST}/movies`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }*/\n}\n\nasync function verifyUser(username, password) {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/users/login?username=${username}&password=${password}`;\n  \n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl);\n    \n    // If the request is successful, set the user and return true\n    if (response.data) {\n      if(response.data.role === \"user\" && response.data.isBlocked === 0)\n      {\n        setUser(response.data)\n        return 0;\n      }else{\n        return 1;\n      }\n    }\n    \n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during authentication:', error);\n  }\n  // Return false if the authentication failed\n  return 2;\n}\nasync function getUserBookings() {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/reservations/`+getUser();\n  \n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl);\n    \n    // If the request is successful, set the user and return true\n    if (response.data) {   \n      return response.data;\n    }\n    \n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during booking fetch:', error);\n  }\n  // Return false if the authentication failed\n  return [];\n}\n\n\n\nfunction setUser(user) {\n  try {\n    localStorage.setItem(USER_KEY, user.username);\n    localStorage.setItem(USER_DETAILS_KEY, JSON.stringify(user));   \n\n  } catch (error) {\n    // Log any error that occurs during the API call\n    console.error('Error setting user:', error);\n  }\n}\n\nfunction getUser() {\n  return localStorage.getItem(USER_KEY);\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nasync function saveUser(user) {\n  try {\n    const response = await axios.post(`${API_HOST}/users`, user);\n\n    setUser(response.data);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function updateUser(currentUsername, fields) {\n  try {\n    const response = await axios.put(`http://localhost:4000/api/users/${currentUsername}`, fields);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating user:', error);\n    throw error;\n  }\n}\n\nasync function deleteUser(username) {\n  try {\n    await axios.delete(`${API_HOST}/users/${username}`);\n    removeUser();\n    window.location.href = \"http://localhost:3000/login\";\n  } catch (error) {\n    console.error(\"Error deleting user\", error);\n  }\n}\n\n\nfunction getMovieReviews(){\n  const data = localStorage.getItem(MOVIE_REVIEWS);\n  // Convert data to objects.\n  return JSON.parse(data);\n}\n\n\nfunction deleteMovieReviews(selectedReview){\n  \n\n  const reviews = getMovieReviews();\n  for(const r of reviews) {\n    if(r.userId === selectedReview.userId && r.movieTitle === selectedReview.movieTitle)\n    {\n      var index = reviews.indexOf(r);\n      if (index !== -1) {\n        reviews.splice(index, 1);\n}\n    }\n  }\n\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n  \n}\nasync function editMovieRatings(selectedMoviewReview) {\n  try {\n    const response = await axios.put(`${API_HOST}/reviews`, selectedMoviewReview);\n\n    console.log(\"Review updated successfully!\"+response.data);\n\n  } catch (error) {\n    console.log(\"Error creating reservation:\"+ error);\n\n  } \n    \n\n}\n\nasync function deleteMovieReviewbyId(selectedReview){\n  \n  try {\n    const response = await axios.delete(`${API_HOST}/reviews/`+selectedReview.review_id);\n\n    console.log(\"Review updated successfully!\"+response.data);\n\n  } catch (error) {\n    console.log(\"Error creating reservation:\"+ error);\n  \n}\n}\nasync function updateMovieRatings(rating){\n\n  try {\n    const response = await axios.post(`${API_HOST}/reviews`, rating);\n    console.log(response.data);\n  } catch (error) {\n    throw error;\n  }\n}\n\n\nasync function getLoggedInUserDetails(){\n  return getUser(); \n}\nasync function getLoggedInUser(){\n  return JSON.parse(localStorage.getItem(USER_DETAILS_KEY));\n}\n\n\n\nfunction deleteUserMovieReviews(username){\n  let reviews = getMovieReviews();\n  reviews = reviews.filter(review=> review.userId !== username);\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n\n}\n\nexport {\n  initializeLocalStorage,\n  verifyUser,\n  getUser,\n  removeUser,\n  saveUser,\n  updateUser,\n  deleteUser,\n  getLoggedInUserDetails,\n  movies,\n  movieRatings,\n  updateMovieRatings,\n  getMovieReviews,\n  deleteMovieReviews,\n  deleteUserMovieReviews,\n  deleteMovieReviewbyId,\n  editMovieRatings,\n  getMovies,\n  getLoggedInUser\n}\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Login.js",["97"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { verifyUser } from \"../data/repository\";\nimport axios from \"axios\";\n\nfunction Login(props) {\n  const [fields, setFields] = useState({ username: \"\", password: \"\" });\n  const [errorMessage, setErrorMessage] = useState(null);\n  const navigate = useNavigate();\n\n  // Generic change handler.\n  const handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    // Copy fields.\n    const temp = { username: fields.username, password: fields.password };\n    // OR use spread operator.\n    // const temp = { ...fields };\n\n    // Update field and state.\n    temp[name] = value;\n    setFields(temp);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const verified = await verifyUser(fields.username, fields.password);\n    console.log(verified)\n\n    // If verified login the user.\n    if(verified === 0) {\n      props.loginUser(fields.username);\n      // Navigate to the home page.\n      navigate(\"/\");\n      return;\n    }else if(verified === 1){\n      // Reset password field to blank.\n      const temp = { ...fields };\n      temp.password = \"\";\n      setFields(temp);\n\n      // Set error message.\n      setErrorMessage(\"Your account has been disabled. Please contact admin\");\n      return;\n    }else{\n       // Reset password field to blank.\n    const temp = { ...fields };\n    temp.password = \"\";\n    setFields(temp);\n\n    // Set error message.\n    setErrorMessage(\"Username and / or password invalid, please try again.\");\n    return;\n    }\n   \n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"username\" className=\"control-label\">Username</label>\n              <input name=\"username\" id=\"username\" className=\"form-control\"\n                value={fields.username} onChange={handleInputChange} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\" className=\"control-label\">Password</label>\n              <input type=\"password\" name=\"password\" id=\"password\" className=\"form-control\"\n                value={fields.password} onChange={handleInputChange} />\n            </div>\n            <div className=\"form-group\">\n              <input type=\"submit\" className=\"btn btn-primary\" value=\"Login\" />\n            </div>\n            {errorMessage !== null &&\n              <div className=\"form-group\">\n                <span className=\"text-danger\">{errorMessage}</span>\n              </div>\n            }\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Home.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Reviews.js",["98"],[],"import React, { useState, useEffect } from \"react\";\nimport { getMovieReviews, deleteMovieReviewbyId, getUser, editMovieRatings } from \"../data/repository\";\nimport axios from \"axios\"; // Import Axios\nimport '../style.css';\nimport EditReviewForm from \"../components/EditReviewForm\";\nconst API_HOST = \"http://localhost:4000/api\";\n\nconst ReviewsPage = () => {\n\n  // State to store reviews \n  const [reviews, setReviews] = useState([]);\n\n  // Logged-in user's ID \n  const loggedInUserId = getUser();\n  console.log(loggedInUserId);\n\n  // State for edit mode and selected review\n  const [editMode, setEditMode] = useState(false);\n  const [selectedReview, setSelectedReview] = useState(null);\n\n  // Function to fetch movie reviews using Axios\n  const fetchMovieReviews = async () => {\n    try {\n      const response = await axios.get(`${API_HOST}/reviews`)// Replace with the actual endpoint URL\n      setReviews(response.data); // Assuming the data is in response.data\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n\n  // Fetch movie reviews when the component mounts\n  useEffect(() => {\n    fetchMovieReviews();\n  }, []);\n\n  // Function to handle opening edit mode for a review\n  const handleEditReview = (review) => {\n    setSelectedReview(review);\n    setEditMode(true);\n  };\n\n  // Function to handle deleting a review\n  const handleDeleteReview = async (review) => {\n\n    await deleteMovieReviewbyId(review);\n    fetchMovieReviews();\n\n  };\n\n  // Function to update a review after editing\n  const updateReview = async (updatedReview) => {\n    // Update the review in the state\n  \n    await editMovieRatings(updatedReview);\n    fetchMovieReviews();\n    \n\n    // Exit edit mode\n    setEditMode(false);\n    setSelectedReview(null);\n  };\n\n  // Scroll to top when switching between edit and delete modes\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [editMode]);\n\n  return (\n    <div className=\"reviews-page\">\n      <h2>All Reviews</h2>\n      {/* Loop through reviews and display review items */}\n      {reviews.map((review, index) => (\n        <div className=\"review-item\" key={index}>\n          <h3>{review.movie.movie_name}</h3>\n          <p>Rating: {review.review_rating} stars</p>\n          <p>{review.review_description}</p>\n          {/* Show edit and delete buttons for the review owner */}\n          {loggedInUserId === review.username && (\n            <div>\n              <button className=\"mx-2\" onClick={() => handleEditReview(review)}>Edit Review</button>\n              <button onClick={() => handleDeleteReview(review)}>Delete Review</button>\n            </div>\n          )}\n        </div>\n      ))}\n      {/* Show edit form in edit mode */}\n      {editMode && (\n        <EditReviewForm\n          review={selectedReview}\n          onCancel={() => setEditMode(false)}\n          onUpdate={updateReview}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ReviewsPage;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/MyProfile.js",["99"],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/fragments/Footer.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/fragments/Navbar.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Signup.js",["100"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { saveUser, createUser } from \"../data/repository\";\n\nfunction Signup(props) {\n  const [fields, setFields] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [errorMessagee, setErrorMessagee] = useState(null);\n\n  const [successMessage, setSuccessMessage] = useState(null);\n  const navigate = useNavigate();\n\n  // Generic change handler.\n  const handleInputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    // Copy fields.\n    const temp = { ...fields };\n\n    // Update field and state.\n    temp[name] = value;\n    setFields(temp);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Perform form validation\n    const validationErrors = {};\n    if (!fields.username.trim()) {\n      validationErrors.username = \"Username is required\";\n    }\n    if (!fields.email.trim()) {\n      validationErrors.email = \"Email is required\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(fields.email)) {\n      validationErrors.email = \"Invalid email format\";\n    }\n    if (!fields.password.trim()) {\n      validationErrors.password = \"Password is required\";\n    } else if (fields.password.length < 6) {\n      validationErrors.password = \"Password must be at least 6 characters\";\n    }\n    if (fields.password !== fields.confirmPassword) {\n      validationErrors.confirmPassword = \"Passwords do not match\";\n    }\n\n    if (Object.keys(validationErrors).length > 0) {\n      setErrorMessage(validationErrors);\n      setSuccessMessage(null);\n    } else {\n      \n    try {\n      // Save user details to the server\n      const user = {\n        username: fields.username,\n        email: fields.email,\n        password: fields.password,\n      };\n      await saveUser(user);\n\n      // Show success message\n      setSuccessMessage(\"Registration successful! You are now logged in.\");\n      setErrorMessage(null);\n      setErrorMessagee(null);\n\n      // Navigate to the home page or logged-in page.\n      //navigate(\"/\");\n      props.loginUser(fields.username);\n\n      // Clear success message after a few seconds\n      setTimeout(() => {\n        setSuccessMessage(null);\n        navigate(\"/\");  \n      }, 3000);\n    }catch(error){\n      console.error(\"Error during registration:\", error);\n      //setErrorMessage(error.response?.data?.message || \"Registration failed. Please try again.\");\n      setErrorMessagee(\"Username already registered. Please use a different username\");\n    }\n  }\n\n  };\n\n  return (\n    <div>\n      <h1>Signup</h1>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <form onSubmit={handleSubmit}>\n            {/* Form fields and validation messages */}\n            <div className=\"form-group\">\n              <label htmlFor=\"username\" className=\"control-label\">\n                Username\n              </label>\n              <input\n                name=\"username\"\n                id=\"username\"\n                className=\"form-control\"\n                value={fields.username}\n                onChange={handleInputChange}\n              />\n              {errorMessage && <p className=\"text-danger\">{errorMessage.username}</p>}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\" className=\"control-label\">\n                Email\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                className=\"form-control\"\n                value={fields.email}\n                onChange={handleInputChange}\n              />\n              {errorMessage && <p className=\"text-danger\">{errorMessage.email}</p>}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\" className=\"control-label\">\n                Password\n              </label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                className=\"form-control\"\n                value={fields.password}\n                onChange={handleInputChange}\n              />\n              {errorMessage && <p className=\"text-danger\">{errorMessage.password}</p>}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\" className=\"control-label\">\n                Confirm Password\n              </label>\n              <input\n                type=\"password\"\n                name=\"confirmPassword\"\n                id=\"confirmPassword\"\n                className=\"form-control\"\n                value={fields.confirmPassword}\n                onChange={handleInputChange}\n              />\n              {errorMessage && (\n                <p className=\"text-danger\">{errorMessage.confirmPassword}</p>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <input type=\"submit\" className=\"btn btn-primary\" value=\"Sign Up\" />\n            </div>\n            {successMessage && <p className=\"text-success\">{successMessage}</p>}\n            {errorMessagee && (\n                <p className=\"text-danger\">{errorMessagee}</p>\n              )}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Signup;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/pages/Booking.js",["101"],[],"import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport '../Style/booking.css'; \nimport BookTickets from \"../components/BookTickets\";\nimport axios from \"axios\"; // Import Axios\nimport { useEffect, useState } from \"react\";\nconst API_HOST = \"http://localhost:4000/api\";\n\n\nconst Booking = () => {\n  const location = useLocation();\n  const { movie } = location.state;\n\n  const [sessions,setSessions] = useState([]);\n\n  useEffect(()=>{\n    fetchSessions();\n  },[])\n\n\n   // Function to fetch movie reviews using Axios\n   const fetchSessions = async () => {\n    try {\n      console.log(movie)\n      const response = await axios.get(`${API_HOST}/sessions/movie/`+movie.movie_id)// Replace with the actual endpoint URL\n    \n      setSessions(response.data); // Assuming the data is in response.data\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n\n  return (\n    <div className=\"booking-container\">\n      <div className=\"booking-header\">\n        <h1>Booking Details for {movie.movie_name}</h1>\n       \n      </div>\n      <br></br>\n      <div className=\"movie-details\">\n        <img src={movie.image} alt={movie.movie_name} className=\"movie-poster\" />\n        <div className=\"movie-info\">\n        <h2>Session time</h2>\n        {sessions.map((session, index) => (\n              <p>{session.session_time}</p> \n          ))}\n        </div>\n      </div>\n\n      <div className=\"booking-section\">\n      <BookTickets movie={movie} sessions={sessions} />\n      </div>\n    </div>\n  );\n};\n\nexport default Booking;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/BookTickets.js",["102","103","104"],[],"import React, { useState, useEffect } from \"react\";\nimport { getLoggedInUserDetails } from \"../data/repository\";\nimport \"../Style/bookTickets.css\";\nimport { useNavigate } from \"react-router-dom\"; \nimport axios from \"axios\";\nimport { getUser} from \"../data/repository\";\n\nconst API_HOST = \"http://localhost:4000/api\";\n\nconst BookTickets = ({ movie,sessions }) => {\n \n  const [ticketCount, setTicketCount] = useState(1);\n  const [selectedSession, setSelectedSession] = useState(0);\n  const [availableTickets, setAvailableTickets] = useState(0); // 0 for the first session, 1 for the second\n  const user = getLoggedInUserDetails();\n  const [message, setMessage] = useState(\"\"); // State for displaying messages\n\n\n  const navigate = useNavigate();\n\n  const goBack = (movie) => {\n    navigate(\"/\");\n  }\n\n\n  const handleSessionChange = async (sessionId) => {\n    if(sessionId !== \"None\"){\n      try {\n        const response = await axios.get(`${API_HOST}/sessions/`+sessionId)// Replace with the actual endpoint URL\n        setAvailableTickets(response.data.session_ticket_count); // Assuming the data is in response.data\n        setSelectedSession(sessionId)\n        console.log(selectedSession)\n        setMessage(\"\"); // Clear any previous messages\n      } catch (error) {\n        console.error(\"Error fetching movie reviews:\", error);\n      }\n    }else{\n      setSelectedSession(0)\n      setAvailableTickets(0);\n      setMessage(\"\"); // Clear any previous messages\n    }\n    \n  };\n \n  const handleBookTickets = async () => { \n    if(selectedSession !== 0){\n      if ((availableTickets-ticketCount) >= 0){\n        const username = getUser()\n  \n        try {\n          const reservationData = {\n            reservation_ticket_count: ticketCount,\n            username: username,\n            session_id: selectedSession,\n          };\n          const response = await axios.post(`${API_HOST}/reservations`, reservationData);\n      \n          await handleSessionChange(selectedSession);\n          setMessage(\"Reservation created successfully!\");\n\n    \n\n        } catch (error) {\n          setMessage(\"We are experiencing a high load on our servers. Please try again later\");\n          console.log(\"Error creating reservation:\"+ error);\n\n        } \n      }else{\n        setMessage(\"The number you selected is more than the available seats\")\n      }\n    }else{\n      setMessage(\"Please select a valid session\")\n    }\n    \n    \n  };\n  const handleTicketCountChange = (e) => {\n    const newCount = parseInt(e.target.value, 10);\n    setTicketCount(newCount);\n  };\n\n  return (\n    <div className=\"book-tickets\">\n      <h2>Book Tickets</h2>\n      <div className=\"session-selection\">\n        <label>Select Session:</label>\n        <select\n          onChange={(e) => handleSessionChange(e.target.value)}\n        >\n          <option key=\"None\" value=\"None\">\n              None\n            </option>\n          {sessions.map((session) => (\n            <option key={session.session_time} value={session.session_id}>\n              {session.session_time}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"ticket-count\">\n        <h6>Available Ticktes: {availableTickets}</h6>\n        <label>Enter Ticket Count </label>\n        <input\n          type=\"number\"\n          value={ticketCount} // Bind the input value to the state\n          onChange={handleTicketCountChange} // Update the state on input change\n        />\n      </div>\n      <button className=\"book-tickets-btn\" onClick={handleBookTickets}>Book Tickets</button>\n      <button className=\"back-tickets-btn\" onClick={goBack}>Back</button>\n      {message && (\n        <div className=\"message\" style={{ color: message === \"Reservation created successfully!\" ? \"green\" : \"red\" }}>\n          {message}\n        </div>\n      )}    </div>\n  );\n};\n\nexport default BookTickets;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/EditReviewForm.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/MyBookedTickets.js",["105","106"],[],"import React, { useEffect, useState } from \"react\";\nimport { getLoggedInUser ,getUser} from \"../data/repository\";\nimport axios from \"axios\";\n\nconst MyBookedTickets = () => {\n  const user = getLoggedInUser();\n  const [userBookingHistory,setBookings] = useState([]);\n\n    \n  useEffect(() => {\n    getUserBookings();\n    console.log(userBookingHistory)\n  }, []);\n\n     const getUserBookings = async () => {\n        const apiUrl = `http://localhost:4000/api/reservations/`+getUser();\n        \n        try {\n          const response = await axios.get(apiUrl);\n          \n          if (response.data) {   \n            setBookings(response.data)\n\n          }\n          \n        } catch (error) {\n          console.error('Error during booking fetch:', error);\n        }\n    };\n\n\n  return (\n    <div className=\"my-5 my-booked-tickets\" style={styles.container}>\n      <h2 style={styles.heading}>Booked Tickets</h2>\n      {userBookingHistory.length === 0 ? (\n        <p style={styles.noTickets}>No tickets booked found</p>\n      ) : (\n        <ul style={styles.ticketList}>\n          {userBookingHistory.map((booking, index) => (\n            <li key={index} style={styles.ticketItem}>\n              <strong style={styles.movie}>Movie:</strong> {booking.session.movie.movie_name} , <strong style={styles.session}>Session:</strong> {booking.session.session_time}, <strong style={styles.ticketCount}>Tickets:</strong> {booking.reservation_ticket_count}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    backgroundColor: \"#fff\",\n    padding: \"20px\",\n    borderRadius: \"5px\",\n    boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.2)\",\n  },\n  heading: {\n    fontSize: \"24px\",\n    fontWeight: \"bold\",\n    marginBottom: \"15px\",\n  },\n  noTickets: {\n    fontSize: \"18px\",\n    color: \"#888\",\n  },\n  ticketList: {\n    listStyle: \"none\",\n    padding: 0,\n  },\n  ticketItem: {\n    marginBottom: \"10px\",\n    borderBottom: \"1px solid #eee\",\n    paddingBottom: \"10px\",\n  },\n  movie: {\n    color: \"#333\",\n  },\n  session: {\n    color: \"#555\",\n  },\n  ticketCount: {\n    color: \"#777\",\n  },\n};\n\nexport default MyBookedTickets;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/UpcomingMovies.js",["107","108","109","110","111"],[],"import React, { useState,useEffect } from \"react\";\nimport MovieItem from \"./MovieItem\";\nimport { movies, getMovieReviews, updateMovieRatings,getLoggedInUserDetails, getUser ,getMovies} from \"../data/repository\";\nimport Review from \"./Review\";\nimport {Carousel} from \"react-bootstrap\";\nimport '../Style/UpcomingMovies.css'; \nimport { useNavigate } from \"react-router-dom\"; \nimport axios from \"axios\"; // Import Axios\nconst API_HOST = \"http://localhost:4000/api\";\n\n\n\n\nconst UpcomingMovies = () => {\n\n  const navigate = useNavigate();\n\n  const handleBookTicket = async (movie) => {\n    await axios.post(`${API_HOST}/moviesClickCount/movie/`+movie.movie_id)// Replace with the actual endpoint URL\n    navigate(\"/booking\", { state: { movie } });\n  }\n\n\n  // Hardcoded data for upcoming movies and session times\n  const [upcomingMovies, setMovies] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n\n  const [showReview, setShowReview] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n\n\n\n   // Function to fetch movie reviews using Axios\n   const fetchMovieReviews = async () => {\n    try {\n      const response = await axios.get(`${API_HOST}/reviews`)// Replace with the actual endpoint URL\n      console.log(response.data);\n      setReviews(response.data); // Assuming the data is in response.data\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n\n   // Function to fetch movie reviews using Axios\n   const fetchMovies = async () => {\n    try {\n      const response = await axios.get(`${API_HOST}/movies`)// Replace with the actual endpoint URL\n      console.log(response.data);\n      setMovies(response.data); // Assuming the data is in response.data\n    } catch (error) {\n      console.error(\"Error fetching movie reviews:\", error);\n    }\n  };\n\n  // Fetch movie reviews when the component mounts\n  useEffect(() => {\n    fetchMovies();\n    fetchMovieReviews();\n\n  }, []);\n\n\n  \n\n  const handleLeaveReview = (movieTitle) => {\n    const userId = getUser.userId; \n    \n \n    setSelectedMovie(movieTitle);\n    setShowReview(true);\n  };\n\n  const handleCloseReview = () => {\n    setShowReview(false);\n    setSelectedMovie(null);\n  };\n\n  const handleSubmitReview = async (movieTitle, rating, comments) => {\n\n  // Store the updated review count in local storage\n  const username = getUser();\n    // Save the review data to a localStorage.\n    const movieReview = {\n      movie_id: movieTitle,\n      review_rating: rating,\n      review_description: comments,\n      username: username,\n    };\n    updateMovieRatings(movieReview);\n    await fetchMovies();\n    await fetchMovieReviews();  \n  };\n\n  // Calculate average rating for each movie\n  const averageRatings = upcomingMovies.reduce((acc, movie) => {\n    const movieRatings = reviews.filter((rating) => rating.movie.movie_name === movie.movie_name);\n    if (movieRatings.length > 0) {\n      const totalRating = movieRatings.reduce((sum, rating) => sum + rating.review_rating, 0);\n      acc[movie.movie_name] = totalRating / movieRatings.length;\n    } else {\n      acc[movie.movie_name] = 0;\n    }\n    return acc;\n  }, {});\n\n  // Sort movies based on average ratings (from highest to lowest)\n  upcomingMovies.sort((a, b) => averageRatings[b.movie_name] - averageRatings[a.movie_name]);\n\n  return (\n    <div className=\"upcoming-movies\" style={{ flex: 1, overflow: 'auto' }}>\n      <Carousel>\n        {upcomingMovies.map((movie, index) => (\n          <Carousel.Item key={index}>\n            <img src={movie.corouselImage} alt={movie.title} />\n            <Carousel.Caption>\n              <h4>{movie.movie_name}</h4>\n              <h5>{movie.sessionTime}</h5>\n            </Carousel.Caption>\n          </Carousel.Item>\n        ))}\n      </Carousel>\n      <ul>\n        {upcomingMovies.map((movie, index) => (\n          <li key={index}>\n            <MovieItem title={movie.title} sessionTime={movie.sessionTime} image ={movie.image} />\n            <p>Average Rating: {averageRatings[movie.movie_name].toFixed(1)} stars</p>\n            {getUser() &&  (\n              <button onClick={() => handleLeaveReview(movie.movie_id)}>\n              Leave Review\n            </button>\n            )}\n            {getUser() &&   (\n            <button onClick={() => handleBookTicket(movie)} className=\"mx-2\">Book Tickets</button>\n            )}\n          </li>\n        ))}\n      </ul>\n      {showReview && (\n        <Review\n          movieTitle={selectedMovie}\n          onClose={handleCloseReview}\n          onSubmitReview={handleSubmitReview}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default UpcomingMovies;\n","/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/Review.js",[],[],"/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/components/MovieItem.js",[],[],{"ruleId":"112","severity":1,"message":"113","line":65,"column":16,"nodeType":"114","messageId":"115","endLine":65,"endColumn":24},{"ruleId":"112","severity":1,"message":"116","line":111,"column":16,"nodeType":"114","messageId":"115","endLine":111,"endColumn":31},{"ruleId":"112","severity":1,"message":"117","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":13},{"ruleId":"112","severity":1,"message":"118","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":25},{"ruleId":"112","severity":1,"message":"119","line":9,"column":9,"nodeType":"114","messageId":"115","endLine":9,"endColumn":23},{"ruleId":"112","severity":1,"message":"120","line":3,"column":20,"nodeType":"114","messageId":"115","endLine":3,"endColumn":30},{"ruleId":"121","severity":1,"message":"122","line":18,"column":5,"nodeType":"123","endLine":18,"endColumn":7,"suggestions":"124"},{"ruleId":"112","severity":1,"message":"125","line":1,"column":27,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"112","severity":1,"message":"126","line":15,"column":9,"nodeType":"114","messageId":"115","endLine":15,"endColumn":13},{"ruleId":"112","severity":1,"message":"127","line":56,"column":17,"nodeType":"114","messageId":"115","endLine":56,"endColumn":25},{"ruleId":"112","severity":1,"message":"126","line":6,"column":9,"nodeType":"114","messageId":"115","endLine":6,"endColumn":13},{"ruleId":"121","severity":1,"message":"128","line":13,"column":6,"nodeType":"123","endLine":13,"endColumn":8,"suggestions":"129"},{"ruleId":"112","severity":1,"message":"130","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":16},{"ruleId":"112","severity":1,"message":"118","line":3,"column":18,"nodeType":"114","messageId":"115","endLine":3,"endColumn":33},{"ruleId":"112","severity":1,"message":"131","line":3,"column":54,"nodeType":"114","messageId":"115","endLine":3,"endColumn":76},{"ruleId":"112","severity":1,"message":"132","line":3,"column":87,"nodeType":"114","messageId":"115","endLine":3,"endColumn":96},{"ruleId":"112","severity":1,"message":"133","line":67,"column":11,"nodeType":"114","messageId":"115","endLine":67,"endColumn":17},"no-unused-vars","'getUsers' is defined but never used.","Identifier","unusedVar","'getUserBookings' is defined but never used.","'axios' is defined but never used.","'getMovieReviews' is defined but never used.","'getUserDetails' is assigned a value but never used.","'createUser' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSessions'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'useEffect' is defined but never used.","'user' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userBookingHistory'. Either include it or remove the dependency array.",["135"],"'movies' is defined but never used.","'getLoggedInUserDetails' is defined but never used.","'getMovies' is defined but never used.","'userId' is assigned a value but never used.",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [fetchSessions]",{"range":"140","text":"141"},"Update the dependencies array to be: [userBookingHistory]",{"range":"142","text":"143"},[482,484],"[fetchSessions]",[355,357],"[userBookingHistory]"]