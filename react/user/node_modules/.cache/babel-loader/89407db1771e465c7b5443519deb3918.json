{"ast":null,"code":"import axios from \"axios\";\nconst API_HOST = \"http://localhost:4000/api\";\nconst USERS_KEY = \"users\";\nconst USER_KEY = \"user\";\nconst USER_DETAILS_KEY = \"userDetails\";\nconst MOVIE_REVIEWS = \"movieReviews\";\nconst movies = [{\n  title: \"Gran Turismo\",\n  sessionTime: \"10:00 AM, 2:00 PM\",\n  image: \"./gran_card.png\",\n  corouselImage: \"./gran.png\"\n}, {\n  title: \"Blue Beetle\",\n  sessionTime: \"11:00 AM, 3:00 PM\",\n  image: \"./blue_card.png\",\n  corouselImage: \"./blue.png\"\n}, {\n  title: \"Oppenheimer\",\n  sessionTime: \"12:00 PM, 4:00 PM\",\n  image: \"./oppenheimer_card.png\",\n  corouselImage: \"./oppenheimer.png\"\n}];\nconst movieRatings = [{\n  movieReviewId: 1,\n  movieTitle: \"Gran Turismo\",\n  rating: 4,\n  comments: \"Great movie, loved it!\",\n  userId: 1\n}, {\n  movieReviewId: 2,\n  movieTitle: \"Blue Beetle\",\n  rating: 1,\n  comments: \"One of the best movies I've seen!\",\n  userId: 1\n}, {\n  movieReviewId: 3,\n  movieTitle: \"Oppenheimer\",\n  rating: 5,\n  comments: \"One of the best movies I've seen!\",\n  userId: 1\n}]; // Check if data is already initialized before proceeding with initialization\n\nfunction initializeLocalStorage() {\n  if (!localStorage.getItem(USERS_KEY)) {\n    const users = [{\n      username: \"mbolger\",\n      password: \"abc123\"\n    }, {\n      username: \"shekhar\",\n      password: \"def456\"\n    }];\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  }\n\n  if (!localStorage.getItem(MOVIE_REVIEWS)) {\n    // Assume movieRatings is already defined\n    localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(movieRatings));\n  }\n\n  if (!localStorage.getItem('userReviewCount')) {// Assume movieRatings is already defined\n  }\n}\n\nasync function getUsers() {\n  try {\n    const response = await axios.get(`${API_HOST}/users`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }\n}\n\nfunction getMovies() {\n  return movies;\n  /*try {\n    const response = await axios.get(`${API_HOST}/movies`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }*/\n}\n\nasync function verifyUser(username, password) {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/users/login?username=${username}&password=${password}`;\n\n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl); // If the request is successful, set the user and return true\n\n    if (response.data) {\n      if (response.data.role === \"user\" && response.data.isBlocked === 0) {\n        setUser(response.data);\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during authentication:', error);\n  } // Return false if the authentication failed\n\n\n  return 2;\n}\n\nasync function getUserBookings() {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/reservations/` + getUser();\n\n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl); // If the request is successful, set the user and return true\n\n    if (response.data) {\n      return response.data;\n    }\n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during booking fetch:', error);\n  } // Return false if the authentication failed\n\n\n  return [];\n}\n\nfunction setUser(user) {\n  try {\n    localStorage.setItem(USER_KEY, user.username);\n    localStorage.setItem(USER_DETAILS_KEY, JSON.stringify(user));\n  } catch (error) {\n    // Log any error that occurs during the API call\n    console.error('Error setting user:', error);\n  }\n}\n\nfunction getUser() {\n  return localStorage.getItem(USER_KEY);\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nasync function saveUser(user) {\n  try {\n    const response = await axios.post(`${API_HOST}/users`, user);\n    setUser(response.data);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function updateUser(currentUsername, fields) {\n  try {\n    const response = await axios.put(`http://localhost:4000/api/users/${currentUsername}`, fields);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating user:', error);\n    throw error;\n  }\n}\n\nasync function deleteUser(username) {\n  try {\n    await axios.delete(`${API_HOST}/users/${username}`);\n    removeUser();\n    window.location.href = \"http://localhost:3000/login\";\n  } catch (error) {\n    console.error(\"Error deleting user\", error);\n  }\n}\n\nfunction getMovieReviews() {\n  const data = localStorage.getItem(MOVIE_REVIEWS); // Convert data to objects.\n\n  return JSON.parse(data);\n}\n\nfunction deleteMovieReviews(selectedReview) {\n  const reviews = getMovieReviews();\n\n  for (const r of reviews) {\n    if (r.userId === selectedReview.userId && r.movieTitle === selectedReview.movieTitle) {\n      var index = reviews.indexOf(r);\n\n      if (index !== -1) {\n        reviews.splice(index, 1);\n      }\n    }\n  }\n\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n}\n\nasync function editMovieRatings(selectedMoviewReview) {\n  try {\n    const response = await axios.put(`${API_HOST}/reviews`, selectedMoviewReview);\n    console.log(\"Review updated successfully!\" + response.data);\n  } catch (error) {\n    console.log(\"Error creating reservation:\" + error);\n  }\n}\n\nasync function deleteMovieReviewbyId(selectedReview) {\n  try {\n    const response = await axios.delete(`${API_HOST}/reviews/` + selectedReview.review_id);\n    console.log(\"Review updated successfully!\" + response.data);\n  } catch (error) {\n    console.log(\"Error creating reservation:\" + error);\n  }\n}\n\nasync function updateMovieRatings(rating) {\n  try {\n    const response = await axios.post(`${API_HOST}/reviews`, rating);\n    console.log(response.data);\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function getLoggedInUserDetails() {\n  return getUser();\n}\n\nasync function getLoggedInUser() {\n  return JSON.parse(localStorage.getItem(USER_DETAILS_KEY));\n}\n\nfunction deleteUserMovieReviews(username) {\n  let reviews = getMovieReviews();\n  reviews = reviews.filter(review => review.userId !== username);\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n}\n\nexport { initializeLocalStorage, verifyUser, getUser, removeUser, saveUser, updateUser, deleteUser, getLoggedInUserDetails, movies, movieRatings, updateMovieRatings, getMovieReviews, deleteMovieReviews, deleteUserMovieReviews, deleteMovieReviewbyId, editMovieRatings, getMovies, getLoggedInUser };","map":{"version":3,"names":["axios","API_HOST","USERS_KEY","USER_KEY","USER_DETAILS_KEY","MOVIE_REVIEWS","movies","title","sessionTime","image","corouselImage","movieRatings","movieReviewId","movieTitle","rating","comments","userId","initializeLocalStorage","localStorage","getItem","users","username","password","setItem","JSON","stringify","getUsers","response","get","data","error","console","getMovies","verifyUser","apiUrl","role","isBlocked","setUser","getUserBookings","getUser","user","removeUser","removeItem","saveUser","post","updateUser","currentUsername","fields","put","deleteUser","delete","window","location","href","getMovieReviews","parse","deleteMovieReviews","selectedReview","reviews","r","index","indexOf","splice","editMovieRatings","selectedMoviewReview","log","deleteMovieReviewbyId","review_id","updateMovieRatings","getLoggedInUserDetails","getLoggedInUser","deleteUserMovieReviews","filter","review"],"sources":["/Users/vishalmahanteshkodagali/Documents/RMIT/Sem 3/Full Stack Development/Assignment/Git_s3895036/loop-web-s3904406/react/user/src/data/repository.js"],"sourcesContent":["import axios from \"axios\";\nconst API_HOST = \"http://localhost:4000/api\";\n\n\nconst USERS_KEY = \"users\";\nconst USER_KEY = \"user\";\nconst USER_DETAILS_KEY = \"userDetails\";\nconst MOVIE_REVIEWS = \"movieReviews\";\n\nconst movies = [\n  { title: \"Gran Turismo\", sessionTime: \"10:00 AM, 2:00 PM\" , image:\"./gran_card.png\", corouselImage:\"./gran.png\"},\n  { title: \"Blue Beetle\", sessionTime: \"11:00 AM, 3:00 PM\" ,image:\"./blue_card.png\", corouselImage:\"./blue.png\" },\n  { title: \"Oppenheimer\", sessionTime: \"12:00 PM, 4:00 PM\" ,image:\"./oppenheimer_card.png\", corouselImage:\"./oppenheimer.png\" },\n]\nconst movieRatings = [\n  {\n    movieReviewId: 1,\n    movieTitle: \"Gran Turismo\",\n    rating: 4,\n    comments: \"Great movie, loved it!\",\n    userId: 1,\n  },\n  {\n    movieReviewId: 2,\n    movieTitle: \"Blue Beetle\",\n    rating: 1,\n    comments: \"One of the best movies I've seen!\",\n    userId: 1,\n  },\n  {\n    movieReviewId: 3,\n    movieTitle: \"Oppenheimer\",\n    rating: 5,\n    comments: \"One of the best movies I've seen!\",\n    userId: 1,\n  },\n]\n// Check if data is already initialized before proceeding with initialization\nfunction initializeLocalStorage() {\n  if (!localStorage.getItem(USERS_KEY)) {\n    const users = [\n      {\n        username: \"mbolger\",\n        password: \"abc123\"\n      },\n      {\n        username: \"shekhar\",\n        password: \"def456\"\n      }\n    ];\n    localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  }\n\n  if (!localStorage.getItem(MOVIE_REVIEWS)) {\n    // Assume movieRatings is already defined\n    localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(movieRatings));\n  }\n  if (!localStorage.getItem('userReviewCount')) {\n    // Assume movieRatings is already defined\n  }\n  \n}\n\n\nasync function getUsers() {\n  try {\n    const response = await axios.get(`${API_HOST}/users`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }\n}\nfunction getMovies() {\n  return movies;\n  /*try {\n    const response = await axios.get(`${API_HOST}/movies`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching users\", error);\n    return [];\n  }*/\n}\n\nasync function verifyUser(username, password) {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/users/login?username=${username}&password=${password}`;\n  \n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl);\n    \n    // If the request is successful, set the user and return true\n    if (response.data) {\n      if(response.data.role === \"user\" && response.data.isBlocked === 0)\n      {\n        setUser(response.data)\n        return 0;\n      }else{\n        return 1;\n      }\n    }\n    \n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during authentication:', error);\n  }\n  // Return false if the authentication failed\n  return 2;\n}\nasync function getUserBookings() {\n  // Define the URL for your API login endpoint\n  const apiUrl = `http://localhost:4000/api/reservations/`+getUser();\n  \n  try {\n    // Make a GET request to the login endpoint\n    const response = await axios.get(apiUrl);\n    \n    // If the request is successful, set the user and return true\n    if (response.data) {   \n      return response.data;\n    }\n    \n  } catch (error) {\n    // Log the error if the request failed\n    console.error('Error during booking fetch:', error);\n  }\n  // Return false if the authentication failed\n  return [];\n}\n\n\n\nfunction setUser(user) {\n  try {\n    localStorage.setItem(USER_KEY, user.username);\n    localStorage.setItem(USER_DETAILS_KEY, JSON.stringify(user));   \n\n  } catch (error) {\n    // Log any error that occurs during the API call\n    console.error('Error setting user:', error);\n  }\n}\n\nfunction getUser() {\n  return localStorage.getItem(USER_KEY);\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nasync function saveUser(user) {\n  try {\n    const response = await axios.post(`${API_HOST}/users`, user);\n\n    setUser(response.data);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function updateUser(currentUsername, fields) {\n  try {\n    const response = await axios.put(`http://localhost:4000/api/users/${currentUsername}`, fields);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating user:', error);\n    throw error;\n  }\n}\n\nasync function deleteUser(username) {\n  try {\n    await axios.delete(`${API_HOST}/users/${username}`);\n    removeUser();\n    window.location.href = \"http://localhost:3000/login\";\n  } catch (error) {\n    console.error(\"Error deleting user\", error);\n  }\n}\n\n\nfunction getMovieReviews(){\n  const data = localStorage.getItem(MOVIE_REVIEWS);\n  // Convert data to objects.\n  return JSON.parse(data);\n}\n\n\nfunction deleteMovieReviews(selectedReview){\n  \n\n  const reviews = getMovieReviews();\n  for(const r of reviews) {\n    if(r.userId === selectedReview.userId && r.movieTitle === selectedReview.movieTitle)\n    {\n      var index = reviews.indexOf(r);\n      if (index !== -1) {\n        reviews.splice(index, 1);\n}\n    }\n  }\n\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n  \n}\nasync function editMovieRatings(selectedMoviewReview) {\n  try {\n    const response = await axios.put(`${API_HOST}/reviews`, selectedMoviewReview);\n\n    console.log(\"Review updated successfully!\"+response.data);\n\n  } catch (error) {\n    console.log(\"Error creating reservation:\"+ error);\n\n  } \n    \n\n}\n\nasync function deleteMovieReviewbyId(selectedReview){\n  \n  try {\n    const response = await axios.delete(`${API_HOST}/reviews/`+selectedReview.review_id);\n\n    console.log(\"Review updated successfully!\"+response.data);\n\n  } catch (error) {\n    console.log(\"Error creating reservation:\"+ error);\n  \n}\n}\nasync function updateMovieRatings(rating){\n\n  try {\n    const response = await axios.post(`${API_HOST}/reviews`, rating);\n    console.log(response.data);\n  } catch (error) {\n    throw error;\n  }\n}\n\n\nasync function getLoggedInUserDetails(){\n  return getUser(); \n}\nasync function getLoggedInUser(){\n  return JSON.parse(localStorage.getItem(USER_DETAILS_KEY));\n}\n\n\n\nfunction deleteUserMovieReviews(username){\n  let reviews = getMovieReviews();\n  reviews = reviews.filter(review=> review.userId !== username);\n  localStorage.setItem(MOVIE_REVIEWS, JSON.stringify(reviews));\n\n}\n\nexport {\n  initializeLocalStorage,\n  verifyUser,\n  getUser,\n  removeUser,\n  saveUser,\n  updateUser,\n  deleteUser,\n  getLoggedInUserDetails,\n  movies,\n  movieRatings,\n  updateMovieRatings,\n  getMovieReviews,\n  deleteMovieReviews,\n  deleteUserMovieReviews,\n  deleteMovieReviewbyId,\n  editMovieRatings,\n  getMovies,\n  getLoggedInUser\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}